/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.04.2023 17:00:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 52
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 57776;
#else
constexpr int kTensorArenaSize = 56752;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[34];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[3*3*3*3] = { 
  /* [0][0][][] */ 32,64,21, -3,-9,14, -33,-71,-8, 
  /* [0][1][][] */ 79,115,34, -6,-12,20, -74,-127,-16, 
  /* [0][2][][] */ 34,21,25, -2,-10,11, -28,-36,-16, 
  /* [1][0][][] */ -7,-36,-9, -25,-75,-16, -9,-40,-13, 
  /* [1][1][][] */ 51,81,1, 74,127,4, 53,82,1, 
  /* [1][2][][] */ -40,-29,15, -60,-63,15, -43,-37,17, 
  /* [2][0][][] */ 16,2,-22, 49,11,-56, 49,31,-75, 
  /* [2][1][][] */ 55,-81,24, 68,-99,33, 47,-41,-4, 
  /* [2][2][][] */ 42,-98,56, 30,-127,95, 17,-75,52, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,3,3,3 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0078140636906027794, 0.0045603970065712929, 0.027405688539147377, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 49461, 59903, 13939, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<3, float> quant4_scale = { 3, { 3.0643390346085653e-05, 1.7883910913951695e-05, 0.00010747329361038283, } };
const TfArray<3, int> quant4_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[1*3*3*3] = { 
  /* [0][0][][] */ -5,-1,-2, -9,127,38, 19,-4,-41, 
  /* [0][1][][] */ 12,1,65, 42,-119,127, -127,-3,-78, 
  /* [0][2][][] */ -2,10,-58, -13,-16,-14, 37,11,-1, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant5_scale = { 3, { 0.011521357111632824, 0.017210733145475388, 0.0082328198477625847, } };
const TfArray<3, int> quant5_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 3 };
const ALIGN(8) int32_t tensor_data6[3] = { 18948, 1192, 8249, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<3, float> quant6_scale = { 3, { 0.00021055928664281964, 0.00031453583505935967, 0.00015045941108837724, } };
const TfArray<3, int> quant6_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[6*1*1*3] = { 
  /* [0][0][][] */ -127,14,8, 
  /* [1][0][][] */ 127,-5,-3, 
  /* [2][0][][] */ 109,2,127, 
  /* [3][0][][] */ 127,-7,-20, 
  /* [4][0][][] */ -127,-1,59, 
  /* [5][0][][] */ 0,127,0, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant7_scale = { 6, { 0.0048254546709358692, 0.024401785805821419, 0.0050695575773715973, 0.0047203893773257732, 0.0074703237041831017, 0.031371068209409714, } };
const TfArray<6, int> quant7_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[6] = { 25426, -16656, -7462, -5351, 24690, -2733, };
const TfArray<1, int> tensor_dimension8 = { 1, { 6 } };
const TfArray<6, float> quant8_scale = { 6, { 0.00011354011076036841, 0.00057415966875851154, 0.00011928370804525912, 0.00011106798774562776, 0.00017577232210896909, 0.00073814281495288014, } };
const TfArray<6, int> quant8_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[1*3*3*6] = { 
  /* [0][0][][] */ -81,-76,-52,-21,51,37, 48,-92,-90,80,87,56, -10,-41,-40,-57,37,27, 
  /* [0][1][][] */ -127,-96,-73,-36,75,65, 84,-127,-127,127,127,127, -7,-48,-58,-92,55,72, 
  /* [0][2][][] */ -59,-39,-29,-11,30,36, 45,-47,-48,71,48,85, 1,-11,-14,-41,15,58, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant9_scale = { 6, { 0.010027831420302391, 0.0018006707541644573, 0.0046710344031453133, 0.0070031234063208103, 0.0052136839367449284, 0.0018857767572626472, } };
const TfArray<6, int> quant9_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 3 };
const ALIGN(16) int32_t tensor_data10[6] = { 9205, 65185, 68231, -471, -24027, 8238, };
const TfArray<1, int> tensor_dimension10 = { 1, { 6 } };
const TfArray<6, float> quant10_scale = { 6, { 0.00023594897356815636, 4.2368723370600492e-05, 0.00010990669397870079, 0.00016477938333991915, 0.00012267491547390819, 4.4371219701133668e-05, } };
const TfArray<6, int> quant10_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[12*1*1*6] = { 
  /* [0][0][][] */ 93,20,-18,127,-23,-24, 
  /* [1][0][][] */ 29,127,-26,29,-46,70, 
  /* [2][0][][] */ -12,-21,78,-3,127,0, 
  /* [3][0][][] */ -127,10,-15,17,-31,-13, 
  /* [4][0][][] */ 6,60,-7,3,-19,-127, 
  /* [5][0][][] */ 127,-10,22,-33,42,-8, 
  /* [6][0][][] */ 0,-10,127,2,-74,2, 
  /* [7][0][][] */ -14,-2,76,-8,127,6, 
  /* [8][0][][] */ 1,3,-127,-4,79,5, 
  /* [9][0][][] */ -9,-127,37,-6,60,13, 
  /* [10][0][][] */ 127,-29,20,-34,37,-5, 
  /* [11][0][][] */ 4,-13,-93,-20,-127,0, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant11_scale = { 12, { 0.0076141310855746269, 0.0061268401332199574, 0.0031071081757545471, 0.013105506077408791, 0.0047582960687577724, 0.013078597374260426, 0.010091633535921574, 0.012126201763749123, 0.013663378544151783, 0.012490503489971161, 0.0079651810228824615, 0.0066109476611018181, } };
const TfArray<12, int> quant11_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[12] = { 2670, -761, -6575, 10294, 12629, -12333, -1382, -24335, 8311, 4685, -3807, 35982, };
const TfArray<1, int> tensor_dimension12 = { 1, { 12 } };
const TfArray<12, float> quant12_scale = { 12, { 0.00016746151959523559, 0.00013475074956659228, 6.8336230469867587e-05, 0.00028823615866713226, 0.00010465166269568726, 0.00028764433227479458, 0.00022195049677975476, 0.00026669781072996557, 0.0003005057224072516, 0.00027471009525470436, 0.00017518232925795019, 0.00014539797848556191, } };
const TfArray<12, int> quant12_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[1*3*3*12] = { 
  /* [0][0][][] */ 57,-41,0,-60,-8,-12,20,3,25,4,-50,-9, -30,-56,-11,5,18,-23,-32,37,-49,19,10,4, -3,30,0,-8,-6,-2,14,-6,-1,-2,0,-7, 
  /* [0][1][][] */ 127,-72,-3,-127,7,-127,22,107,-77,10,-127,52, -3,-127,-127,-15,127,-37,-127,127,127,-127,0,122, 21,-19,9,3,-22,-2,1,84,15,28,2,19, 
  /* [0][2][][] */ 22,-15,-1,-54,-4,-3,15,18,12,7,-45,-42, -13,-45,-5,9,-6,-16,-47,29,-32,19,9,-127, -12,26,2,-4,2,1,-5,13,-10,3,-1,-11, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant13_scale = { 12, { 0.010361799970269203, 0.0050497041083872318, 0.031562171876430511, 0.0097140055149793625, 0.014085405506193638, 0.010512423701584339, 0.0057028327137231827, 0.0031617567874491215, 0.0087789334356784821, 0.027345152571797371, 0.010089152492582798, 0.022259285673499107, } };
const TfArray<12, int> quant13_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 3 };
const ALIGN(16) int32_t tensor_data14[12] = { 815, 23856, 6599, 1859, 700, 1884, 18970, 2225, -252, 475, 8140, -158, };
const TfArray<1, int> tensor_dimension14 = { 1, { 12 } };
const TfArray<12, float> quant14_scale = { 12, { 0.00024380706599913538, 0.0001188165697385557, 0.0007426393567584455, 0.00022856483701616526, 0.00033142132451757789, 0.00024735115584917367, 0.00013418430171441287, 7.4394280090928078e-05, 0.00020656314154621214, 0.00064341537654399872, 0.00023739182506687939, 0.00052374793449416757, } };
const TfArray<12, int> quant14_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[12*1*1*12] = { 
  /* [0][0][][] */ 8,-32,-39,29,106,50,2,20,-5,127,-4,22, 
  /* [1][0][][] */ 13,127,23,-100,1,-99,-31,-50,15,42,-19,29, 
  /* [2][0][][] */ -31,-24,83,16,21,33,41,-34,41,-8,-4,127, 
  /* [3][0][][] */ 127,-22,-31,5,13,-38,-7,13,-7,-13,109,-1, 
  /* [4][0][][] */ 0,5,10,1,-3,-6,112,-2,127,4,0,4, 
  /* [5][0][][] */ -1,-37,17,15,-4,23,-127,-7,51,4,8,1, 
  /* [6][0][][] */ 0,48,15,-1,127,-5,5,6,1,4,-4,-13, 
  /* [7][0][][] */ 127,-42,42,49,36,-76,-2,36,-13,-4,126,-5, 
  /* [8][0][][] */ 13,-13,10,-1,-127,-5,-2,-12,47,64,11,-30, 
  /* [9][0][][] */ 127,-22,-6,21,33,-35,22,7,-3,7,77,4, 
  /* [10][0][][] */ 4,-3,127,3,-10,16,50,-110,-17,2,22,-24, 
  /* [11][0][][] */ -13,-6,99,-25,-7,8,21,-127,0,5,-1,2, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant15_scale = { 12, { 0.004251998383551836, 0.0038435677997767925, 0.0026895611081272364, 0.013596983626484871, 0.0065639382228255272, 0.0081380670890212059, 0.0119129978120327, 0.013689978048205376, 0.0093670031055808067, 0.011744702234864235, 0.0031835334375500679, 0.0051959436386823654, } };
const TfArray<12, int> quant15_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[12] = { 79, 13394, 20241, -7404, -8327, 15792, -15612, -9112, 15045, -10306, 19541, 8619, };
const TfArray<1, int> tensor_dimension16 = { 1, { 12 } };
const TfArray<12, float> quant16_scale = { 12, { 0.00010004702198784798, 9.043689351528883e-05, 6.3283790950663388e-05, 0.00031992903677746654, 0.00015444560267496854, 0.00019148393766954541, 0.00028030583052895963, 0.00032211715006269515, 0.00022040007752366364, 0.00027634593425318599, 7.4906667578034103e-05, 0.00012225749378558248, } };
const TfArray<12, int> quant16_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*12] = { 
  /* [0][0][][] */ -106,-63,-74,-87,75,-51,112,31,-77,3,-83,-110, -105,-96,-85,-127,106,-89,122,104,-89,-105,-127,35, -3,-38,-26,-62,52,-47,60,31,-38,78,-65,72, 
  /* [0][1][][] */ -127,-103,-106,-98,104,-77,114,37,-101,13,-72,-127, -127,-127,-127,-120,127,-127,127,127,-127,-108,-125,42, -5,-55,-43,-62,63,-71,71,27,-46,127,-67,85, 
  /* [0][2][][] */ -27,-42,-64,-19,62,-22,61,4,-46,6,2,-32, -40,-55,-74,-25,78,-54,70,33,-53,-63,3,10, -5,-24,-17,-12,37,-27,38,-1,-16,62,8,24, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant17_scale = { 12, { 0.004438081756234169, 0.0034487966913729906, 0.0063906777650117874, 0.003365514799952507, 0.0030794146005064249, 0.0026281906757503748, 0.0057100066915154457, 0.0017207665368914604, 0.0020317463204264641, 0.0014877708163112402, 0.0065893698483705521, 0.0076982299797236919, } };
const TfArray<12, int> quant17_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[12] = { 34755, 60605, 54573, 9013, -451, 56463, -1326, -377, 71200, -1552, 51246, -263, };
const TfArray<1, int> tensor_dimension18 = { 1, { 12 } };
const TfArray<12, float> quant18_scale = { 12, { 0.0001044254531734623, 8.1148158642463386e-05, 0.0001503688981756568, 7.9188583185896277e-05, 7.2456816269550472e-05, 6.1839782574679703e-05, 0.00013435310393106192, 4.0488626837031916e-05, 4.7805795475142077e-05, 3.5006371035706252e-05, 0.00015504400653298944, 0.00018113483383785933, } };
const TfArray<12, int> quant18_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[25*1*1*12] = { 
  /* [0][0][][] */ -127,71,10,-7,-3,-21,106,30,-91,24,-61,-9, 
  /* [1][0][][] */ 127,118,51,-59,103,-9,-21,-3,79,0,39,-23, 
  /* [2][0][][] */ 4,1,8,-2,127,-54,-6,-2,15,-2,4,3, 
  /* [3][0][][] */ 66,-74,15,-44,-8,14,-11,127,-6,71,44,40, 
  /* [4][0][][] */ -48,14,11,-6,-42,-1,10,-2,-25,-10,127,-11, 
  /* [5][0][][] */ 54,25,18,-2,127,4,-4,14,34,-3,10,13, 
  /* [6][0][][] */ 27,0,127,23,-101,65,-15,-33,25,-22,-94,-26, 
  /* [7][0][][] */ -25,-35,-30,15,-38,-35,8,-21,-4,-12,-127,15, 
  /* [8][0][][] */ -21,-127,79,-4,37,-61,107,2,56,-23,-40,-6, 
  /* [9][0][][] */ 29,-47,-45,-4,-6,6,-21,3,-3,7,-127,27, 
  /* [10][0][][] */ 14,-44,4,-10,-28,-127,-6,-1,14,1,-5,1, 
  /* [11][0][][] */ 6,15,34,6,122,-127,-20,4,38,7,-8,-6, 
  /* [12][0][][] */ 15,51,-5,16,-22,-8,-36,-16,-127,-21,1,-2, 
  /* [13][0][][] */ -64,-10,27,-17,-22,34,6,-2,4,4,127,-34, 
  /* [14][0][][] */ -70,12,36,22,33,-17,94,36,127,30,-62,-15, 
  /* [15][0][][] */ -50,-48,-109,-6,-46,120,-77,-13,-56,12,-127,-31, 
  /* [16][0][][] */ 31,22,9,-127,6,-14,-14,101,29,55,-32,19, 
  /* [17][0][][] */ 60,-127,11,-15,52,1,-15,16,-62,13,56,28, 
  /* [18][0][][] */ 2,21,-18,-9,60,127,7,4,-36,-4,-31,2, 
  /* [19][0][][] */ -43,-52,-127,-15,-16,3,23,-1,11,-3,54,-6, 
  /* [20][0][][] */ -45,-88,61,29,-9,32,8,-60,-127,-37,-13,-28, 
  /* [21][0][][] */ 24,-28,-47,62,-39,-39,-1,-49,33,-2,-127,-6, 
  /* [22][0][][] */ 0,53,-6,-25,32,127,11,15,-2,9,69,1, 
  /* [23][0][][] */ 9,34,-4,-1,-26,6,12,-1,16,-50,3,127, 
  /* [24][0][][] */ 45,6,4,-19,-20,-71,-70,-3,-127,-8,-25,0, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant19_scale = { 25, { 0.0046245655976235867, 0.012099227868020535, 0.013253706507384777, 0.0044788047671318054, 0.004367251880466938, 0.0026226877234876156, 0.0070206085219979286, 0.0042494200170040131, 0.0028630932793021202, 0.0055018696002662182, 0.012240668758749962, 0.010043998248875141, 0.0054502170532941818, 0.0025185781996697187, 0.0071836225688457489, 0.0019683106802403927, 0.0061909742653369904, 0.0044485270045697689, 0.0091570774093270302, 0.0099009349942207336, 0.0079869134351611137, 0.0038403486832976341, 0.0069744149222970009, 0.023297503590583801, 0.003629123792052269, } };
const TfArray<25, int> quant19_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[25] = { 30468, -44664, 1796, 2290, 1202, 9576, -2532, 46329, 29762, 36311, 21383, 6910, 24912, 9936, -13249, 70123, 4867, 22428, -4034, 19698, 32208, 41937, -24112, -7197, 45361, };
const TfArray<1, int> tensor_dimension20 = { 1, { 25 } };
const TfArray<25, float> quant20_scale = { 25, { 7.5896467023994774e-05, 0.00019856753351632506, 0.00021751435997430235, 7.3504299507476389e-05, 7.1673537604510784e-05, 4.3042469769716263e-05, 0.0001152193290181458, 6.9739726313855499e-05, 4.6987905079731718e-05, 9.029441571328789e-05, 0.00020088881137780845, 0.00016483795479871333, 8.9446715719532222e-05, 4.133386755711399e-05, 0.00011789464770117775, 3.230310176149942e-05, 0.00010160371311940253, 7.3007387982215732e-05, 0.00015028218331281096, 0.00016249006148427725, 0.00013107793347444385, 6.3026222051121294e-05, 0.00011446121789049357, 0.00038234901148825884, 5.9559682995313779e-05, } };
const TfArray<25, int> quant20_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[1*3*3*25] = { 
  /* [0][0][][] */ 7,-8,-22,30,-15,-76,-14,-127,2,0,4,11,17,31,8,26,-21,-3,-5,-108,-40,-40,-28,-2,-11, -42,42,127,77,-12,-69,35,88,1,8,-35,-3,-41,-22,55,3,25,1,-6,-127,-127,56,19,-5,9, 29,-18,-32,21,-2,13,-33,40,11,-1,-10,8,14,-5,-51,-1,-14,-4,-15,-23,-7,25,13,0,-8, 
  /* [0][1][][] */ -93,-114,-57,-72,61,-127,52,120,-31,-127,1,-7,52,-127,-56,-24,34,-20,11,-70,-47,-6,-124,127,31, -127,-127,-73,-127,127,-83,127,-87,-127,83,127,-127,-127,2,-127,-127,127,127,127,-105,-46,-127,127,40,127, -37,-19,-57,-28,9,27,-24,-39,-34,25,39,34,38,-9,117,-37,11,-37,35,21,-9,-67,-4,6,5, 
  /* [0][2][][] */ 31,-14,19,38,-47,83,-32,20,17,7,-16,19,3,35,27,35,-22,4,-13,-17,40,8,18,-36,-13, 15,-8,-34,69,-110,90,-29,-14,38,6,-57,28,-31,-4,61,-15,7,-37,-46,-4,-22,28,-31,15,-27, 23,13,11,14,-19,-78,-4,-4,20,-1,-25,5,5,-2,-39,12,-11,5,-23,-12,27,15,14,-8,-8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant21_scale = { 25, { 0.0072866142727434635, 0.0022938456386327744, 0.01104850135743618, 0.015650663524866104, 0.010696093551814556, 0.01025625504553318, 0.0087199006229639053, 0.021578680723905563, 0.010970372706651688, 0.012939366512000561, 0.0111747020855546, 0.0093849524855613708, 0.023867722600698471, 0.019252145662903786, 0.012223145924508572, 0.011457291431725025, 0.0083912163972854614, 0.019816532731056213, 0.0092908656224608421, 0.0027350131422281265, 0.0078227147459983826, 0.0083832675591111183, 0.010931727476418018, 0.0037475333083420992, 0.0086508812382817268, } };
const TfArray<25, int> quant21_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 3 };
const ALIGN(16) int32_t tensor_data22[25] = { 16498, 32024, 195, -1188, 427, 11705, -590, 129, 10443, 2766, -342, 11057, 2599, 5363, 54, 6802, 879, 1092, 862, 33089, 9801, 11848, -296, -3, 1682, };
const TfArray<1, int> tensor_dimension22 = { 1, { 25 } };
const TfArray<25, float> quant22_scale = { 25, { 0.00017144974844995886, 5.3972838941263035e-05, 0.00025996475596912205, 0.00036825091228820384, 0.00025167278363369405, 0.00024132365069817752, 0.00020517413213383406, 0.00050773366820067167, 0.00025812641251832247, 0.00030445569427683949, 0.00026293416158296168, 0.00022082241775933653, 0.00056159350788220763, 0.00045299166231416166, 0.00028760344139300287, 0.00026958333910442889, 0.00019744038581848145, 0.00046627136180177331, 0.00021860860579181463, 6.4353254856541753e-05, 0.0001840638869907707, 0.00019725336460396647, 0.00025721712154336274, 8.8177257566712797e-05, 0.00020355015294626355, } };
const TfArray<25, int> quant22_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[25*1*1*25] = { 
  /* [0][0][][] */ 10,1,-9,10,-67,-50,4,-17,-47,-41,127,-81,-1,40,-16,-110,0,-16,-88,26,12,-26,17,-13,-5, 
  /* [1][0][][] */ -18,-55,127,28,-26,7,-52,3,-38,-17,65,-126,57,-58,-11,-31,-34,75,-7,-1,-11,107,40,5,87, 
  /* [2][0][][] */ -61,-70,29,11,21,54,125,-34,-97,55,34,-34,-34,-9,-47,109,-44,-114,18,127,-39,17,-46,-53,-37, 
  /* [3][0][][] */ -73,15,-7,-1,18,6,-32,58,52,-15,-33,27,-12,-34,5,-14,52,127,-23,-9,-1,-45,65,15,-37, 
  /* [4][0][][] */ -14,72,-2,-29,127,119,-21,-24,82,-62,21,-10,-75,95,52,110,-40,55,55,78,57,57,6,-53,-15, 
  /* [5][0][][] */ -20,-25,21,-1,-7,24,-1,21,6,127,8,-26,-5,-29,-14,-12,1,19,16,-9,-37,-14,0,62,-10, 
  /* [6][0][][] */ -60,-5,14,-31,49,23,-23,42,-15,-12,20,-33,-2,-4,-33,28,-29,-23,-13,-72,66,-60,23,39,-127, 
  /* [7][0][][] */ 25,50,-17,21,37,6,-23,20,-50,2,-24,64,89,25,25,5,-99,127,-18,-49,-34,-66,-40,-6,63, 
  /* [8][0][][] */ 0,9,0,25,4,39,17,127,10,-48,11,-7,-40,11,-31,11,29,-17,32,-35,48,-85,18,7,-14, 
  /* [9][0][][] */ 29,28,12,-57,-2,35,56,-15,-14,-82,22,-31,-52,72,-28,8,-42,-127,45,5,-30,44,-2,-13,-4, 
  /* [10][0][][] */ 6,27,3,22,77,64,9,4,127,52,-18,-23,-22,-100,-16,76,-23,61,74,-1,-7,112,-17,22,-88, 
  /* [11][0][][] */ -80,102,-2,-3,10,88,-49,24,38,18,11,116,-58,-38,118,-39,43,102,32,-21,-100,44,-28,-10,127, 
  /* [12][0][][] */ 127,13,-18,51,63,2,-14,21,83,7,7,84,25,-7,-22,26,52,10,76,-4,36,-41,17,1,81, 
  /* [13][0][][] */ -27,22,21,17,54,48,-34,14,127,-5,2,-60,-73,-1,41,19,-60,-73,27,-5,44,-59,-3,-3,67, 
  /* [14][0][][] */ 10,-18,18,3,11,7,1,0,18,-1,-8,-17,3,12,-4,-2,0,-2,127,0,-5,5,-24,-1,-37, 
  /* [15][0][][] */ -7,-34,49,85,66,-63,-95,95,-86,-4,4,32,-11,-29,103,-38,26,89,-68,-110,-125,-23,-4,21,-127, 
  /* [16][0][][] */ -84,-30,4,-15,-16,0,11,-3,-1,16,3,-11,50,-19,3,23,127,3,-4,59,27,13,19,14,-25, 
  /* [17][0][][] */ 81,13,35,-21,-15,0,22,14,-109,-9,3,-17,6,-39,-31,-25,23,86,9,-24,-32,28,7,-13,-127, 
  /* [18][0][][] */ -29,-56,-1,18,-19,42,48,10,28,6,34,127,78,-42,13,-64,-48,33,100,19,-35,51,78,35,1, 
  /* [19][0][][] */ 50,14,102,16,42,40,46,19,28,31,54,127,-7,-28,19,37,31,-38,-79,10,-13,-64,0,17,6, 
  /* [20][0][][] */ -69,0,1,26,-16,-26,23,-18,-8,-2,-16,-1,59,-8,-21,36,127,30,-15,25,44,-11,42,61,-23, 
  /* [21][0][][] */ 17,-1,95,8,1,-21,-14,0,27,5,-15,-70,12,22,6,-22,-11,20,127,7,-9,-24,-3,4,-18, 
  /* [22][0][][] */ 74,-74,-14,-92,-47,-37,25,95,-8,-23,-29,-51,19,-13,12,67,-82,6,-19,104,-35,-112,127,90,20, 
  /* [23][0][][] */ 14,95,7,59,71,14,-8,5,-17,-99,-53,76,58,127,-15,16,17,-40,17,-10,14,-5,20,-18,-5, 
  /* [24][0][][] */ -105,-44,-21,18,-116,-51,113,-19,-80,4,-61,-2,-87,43,5,-48,53,61,52,127,-56,25,-25,-62,85, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant23_scale = { 25, { 0.0085566956549882889, 0.0037782443687319756, 0.0041356426663696766, 0.0086173582822084427, 0.006083095446228981, 0.0078965919092297554, 0.0061900792643427849, 0.0072349840775132179, 0.0066485642455518246, 0.0064593511633574963, 0.006779917050153017, 0.004398777149617672, 0.0060287304222583771, 0.0059245801530778408, 0.0089485784992575645, 0.0015696054324507713, 0.0088297547772526741, 0.0049410560168325901, 0.0066904784180223942, 0.0076232198625802994, 0.0037011152599006891, 0.0069879558868706226, 0.0030288498383015394, 0.0069839777424931526, 0.0025432370603084564, } };
const TfArray<25, int> quant23_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int32_t tensor_data24[25] = { 16952, 18829, 19530, -5902, -22773, 2018, 22176, -2178, 9591, 7595, -17407, -27474, -31269, 3756, 994, 50941, -6100, 10958, -14996, -17751, 4142, 5457, 24606, -12458, 14908, };
const TfArray<1, int> tensor_dimension24 = { 1, { 25 } };
const TfArray<25, float> quant24_scale = { 25, { 0.00017333740834146738, 7.6537849963642657e-05, 8.3777857071254402e-05, 0.0001745662884786725, 0.00012322841212153435, 0.00015996534784790128, 0.00012539564340841025, 0.00014656281564384699, 0.00013468340330291539, 0.00013085041427984834, 0.00013734429376199841, 8.9108303654938936e-05, 0.00012212710862513632, 0.00012001728464383632, 0.00018127598741557449, 3.1796309485798702e-05, 0.00017886891146190464, 0.00010009352990891784, 0.00013553247845266014, 0.00015442751464433968, 7.4975410825572908e-05, 0.00014155864482745528, 6.1356979131232947e-05, 0.00014147805632092059, 5.1519669796107337e-05, } };
const TfArray<25, int> quant24_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[1*3*3*25] = { 
  /* [0][0][][] */ 90,61,97,63,94,-43,67,76,-49,-64,56,-84,57,64,103,-117,77,66,67,-73,-66,54,-35,-51,79, 106,89,119,100,127,-88,91,102,-68,-89,78,-112,72,89,-14,-108,102,95,108,-79,-90,86,-99,-91,105, 36,42,49,35,50,-40,36,42,-23,-37,51,-35,28,43,-87,-44,36,40,44,-12,-16,45,-57,-51,48, 
  /* [0][1][][] */ 112,102,92,86,60,-65,108,92,-65,-92,55,-98,95,108,127,-127,91,89,79,-127,-84,88,-62,-72,82, 127,127,127,127,48,-127,127,127,-127,-127,127,-127,127,127,-34,-118,127,127,127,-115,-127,127,-127,-127,127, 63,56,64,46,3,-65,54,51,-51,-52,70,-39,58,56,-104,-33,42,58,64,-51,-35,66,-72,-71,56, 
  /* [0][2][][] */ 44,42,27,28,16,-11,41,32,-27,-40,19,-31,45,46,65,-52,20,34,33,-49,-41,44,-18,-26,23, 51,49,48,48,-41,-44,34,40,-75,-61,69,-46,67,52,-25,-58,38,55,56,-57,-62,69,-43,-48,46, 37,26,36,20,-20,-27,34,9,-45,-26,57,-9,35,23,-64,2,13,34,40,-22,-14,44,-29,-25,21, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant25_scale = { 25, { 0.0029249833896756172, 0.0033143071923404932, 0.0029758252203464508, 0.0030539699364453554, 0.0035075407940894365, 0.0027517217677086592, 0.0064806714653968811, 0.0026407800614833832, 0.0036215356085449457, 0.0034559594932943583, 0.0027972192037850618, 0.0033127206843346357, 0.0033177686855196953, 0.0033286584075540304, 0.0040434580296278, 0.0050134784542024136, 0.0028127648402005434, 0.003486014436930418, 0.0020877528004348278, 0.0025068151298910379, 0.0049727908335626125, 0.0025296560488641262, 0.0035624569281935692, 0.0032049189321696758, 0.0035528908483684063, } };
const TfArray<25, int> quant25_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 3 };
const ALIGN(16) int32_t tensor_data26[25] = { -3546, -3154, -2355, 296, -1167, 37309, -869, -2712, 32457, 27851, -1438, 29634, -3628, 800, -534, 28470, -838, -3312, -429, 35187, 22921, -280, 38720, 29236, -8333, };
const TfArray<1, int> tensor_dimension26 = { 1, { 25 } };
const TfArray<25, float> quant26_scale = { 25, { 6.8823137553408742e-05, 7.798369915690273e-05, 7.0019421400502324e-05, 7.1858114097267389e-05, 8.2530372310429811e-05, 6.4746396674308926e-05, 0.00015248639101628214, 6.2136001361068338e-05, 8.5212603153195232e-05, 8.1316698924638331e-05, 6.5816922869998962e-05, 7.7946373494341969e-05, 7.80651462264359e-05, 7.8321376349776983e-05, 9.5140188932418823e-05, 0.00011796419858001173, 6.6182699811179191e-05, 8.2023871073033661e-05, 4.9123595090350136e-05, 5.8983885537600145e-05, 0.0001170068426290527, 5.9521320508792996e-05, 8.382251689909026e-05, 7.54098582547158e-05, 8.3597435150295496e-05, } };
const TfArray<25, int> quant26_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[51*1*1*25] = { 
  /* [0][0][][] */ -43,-127,9,50,-66,-66,42,-2,-17,-9,-28,60,-107,-28,-4,20,97,16,2,30,-61,0,-50,-15,-45, 
  /* [1][0][][] */ 40,-13,0,-26,0,15,11,-21,21,20,-21,-31,12,127,8,-8,15,12,21,-39,-3,8,-9,5,-16, 
  /* [2][0][][] */ -1,127,-21,-88,1,-42,-56,38,-63,-76,-51,59,62,-35,-15,-88,34,-39,39,0,2,-19,-81,-16,47, 
  /* [3][0][][] */ 37,-90,-92,-44,-21,-25,100,127,-45,29,-87,12,-37,57,-15,-15,2,-3,-5,39,-1,109,58,9,65, 
  /* [4][0][][] */ -18,13,-14,65,-4,-59,-15,43,13,45,-33,-3,115,57,5,-33,86,127,6,-21,-112,-34,60,10,22, 
  /* [5][0][][] */ -9,4,-127,93,-57,-106,20,-1,61,-52,-21,98,-52,12,70,26,108,-17,19,9,-100,-18,-86,-1,-46, 
  /* [6][0][][] */ -127,-29,-16,1,-9,0,-20,-16,4,-7,3,-8,19,-11,5,0,-3,6,32,-36,8,5,1,-2,-7, 
  /* [7][0][][] */ 127,-37,-11,88,-19,77,14,-62,-52,121,-110,55,-6,-29,2,72,-21,-3,90,-13,-18,48,-96,30,-35, 
  /* [8][0][][] */ 30,-36,35,26,26,20,-70,3,30,-82,-6,-34,1,55,-1,-33,122,127,-3,16,-85,-31,49,34,53, 
  /* [9][0][][] */ -2,53,-49,-31,19,3,12,-61,15,-21,127,11,31,-18,-9,-16,-16,14,50,10,23,-21,33,-8,-4, 
  /* [10][0][][] */ 111,-91,-37,-18,-1,-19,-29,98,-26,-44,15,24,-14,-32,-21,44,22,-46,-127,-10,-5,120,-22,-74,38, 
  /* [11][0][][] */ -51,-124,-52,-15,12,16,-60,-127,7,-20,-3,65,101,-71,-19,31,-41,56,25,-17,25,10,-33,4,-8, 
  /* [12][0][][] */ 24,-62,87,-30,63,-93,1,-40,54,56,27,-28,-9,-28,34,-2,2,-96,-11,26,-23,-11,-93,-127,15, 
  /* [13][0][][] */ -3,-8,7,6,10,12,24,12,3,-5,-8,8,10,126,-29,127,15,-48,26,-14,32,-6,-27,0,-43, 
  /* [14][0][][] */ 4,-54,20,-65,42,49,77,-46,-60,41,43,79,127,-49,3,47,-41,51,-32,-90,1,30,20,26,10, 
  /* [15][0][][] */ -68,-61,4,-81,67,-66,51,-76,-100,21,5,33,-69,11,-39,-30,-49,71,-127,32,17,13,-62,100,110, 
  /* [16][0][][] */ 20,-23,19,127,39,49,-12,-24,-43,-2,5,-22,15,-12,-17,-39,-11,-17,50,-3,19,-11,-63,53,1, 
  /* [17][0][][] */ -116,36,-74,28,23,31,-12,-57,-11,-66,-54,-4,0,35,-1,18,25,-9,44,-28,1,4,13,127,-29, 
  /* [18][0][][] */ -5,67,120,60,-67,13,70,42,51,-15,33,-36,-88,109,13,83,26,-127,24,-21,-79,-14,64,-30,84, 
  /* [19][0][][] */ -40,5,108,45,9,-109,-34,-2,-16,85,-127,-17,-4,18,11,3,-16,-17,29,-90,13,4,56,106,2, 
  /* [20][0][][] */ -38,-47,-28,10,75,8,-62,2,-127,83,-15,-23,71,-32,1,-32,23,-90,-31,-29,-42,23,-21,16,-65, 
  /* [21][0][][] */ -9,33,68,101,-10,-61,-28,99,28,-114,1,-127,6,28,10,-91,-99,-42,62,33,76,-10,-5,-18,-24, 
  /* [22][0][][] */ -4,48,-127,-12,-45,-32,112,58,-22,64,-55,62,42,18,-3,-3,43,13,-90,-92,-24,-30,-51,-17,-7, 
  /* [23][0][][] */ -20,-4,-41,-24,15,-90,40,96,-110,-26,-12,-50,-121,127,7,-72,-95,-43,18,-23,16,19,-6,37,-72, 
  /* [24][0][][] */ -30,-14,-21,-24,-59,28,63,18,-113,-71,-26,29,-127,107,-4,53,-98,-73,36,-125,52,-61,-18,66,-40, 
  /* [25][0][][] */ -26,-49,-23,86,-36,-123,-63,27,31,-80,2,101,-2,-23,74,-14,127,24,2,-32,-64,9,-95,46,-44, 
  /* [26][0][][] */ -43,-49,-3,-63,-15,44,-30,11,-17,59,7,43,17,-18,-37,-25,18,127,-14,-2,-26,1,39,-38,10, 
  /* [27][0][][] */ 7,52,5,9,-9,-2,14,-8,-11,5,7,25,-26,12,95,-12,-12,8,-16,-21,5,127,10,21,3, 
  /* [28][0][][] */ -57,-70,-48,24,35,-20,25,104,-6,-39,-15,79,-66,37,-2,-39,-26,106,32,8,127,-15,-79,12,-50, 
  /* [29][0][][] */ 24,-46,22,35,-22,-75,-27,24,40,-127,92,-93,-60,-9,9,32,-109,-21,15,-86,59,44,-47,-97,-12, 
  /* [30][0][][] */ 25,20,-65,-64,-21,20,1,-35,-127,80,9,46,41,63,-4,-17,-20,49,23,26,16,-24,-22,1,-116, 
  /* [31][0][][] */ 2,36,-9,9,55,99,-50,-2,-32,25,24,-41,56,104,-59,-20,116,-100,-17,-9,-14,-8,127,4,62, 
  /* [32][0][][] */ -41,-6,23,82,112,37,-20,87,55,81,127,43,-42,2,9,-91,-47,-55,-3,108,-11,-46,-36,84,59, 
  /* [33][0][][] */ -40,67,115,-8,24,98,94,-17,70,53,6,51,10,10,-3,-21,-67,29,16,-64,-25,8,45,-127,-39, 
  /* [34][0][][] */ -10,103,8,15,19,-2,-52,9,10,77,-39,-6,74,127,3,55,-10,-88,4,1,-18,-4,20,-24,2, 
  /* [35][0][][] */ -8,68,40,24,5,-22,-2,54,-14,17,-3,-13,127,21,-1,-58,-63,-30,-24,20,16,4,16,-7,95, 
  /* [36][0][][] */ -1,43,-71,-57,32,69,25,-22,-72,34,83,-24,-89,10,-4,-27,10,5,127,-28,-31,1,21,-43,37, 
  /* [37][0][][] */ -4,-52,8,-52,-27,87,49,-127,21,27,-22,78,98,-87,-69,112,-14,71,-16,22,106,-29,-29,-7,124, 
  /* [38][0][][] */ -28,127,20,-4,-3,-20,-7,22,3,0,-20,-10,-15,-3,14,-32,-10,-24,-47,-19,15,26,-15,6,23, 
  /* [39][0][][] */ 14,-47,39,33,-12,-46,69,127,8,-120,-30,-59,-79,-38,4,11,48,48,32,28,-34,-93,-21,58,-46, 
  /* [40][0][][] */ 5,-30,-54,11,5,-41,-9,15,48,0,-15,-3,127,-13,27,-20,-14,-24,8,28,15,3,-49,15,32, 
  /* [41][0][][] */ -24,30,-53,100,72,-71,-3,-9,-22,-35,8,-108,23,-80,-51,15,-70,-41,-64,46,-61,28,127,-31,-93, 
  /* [42][0][][] */ 25,-38,68,18,18,-3,71,-20,37,-35,68,-47,53,-2,8,-28,106,127,-81,22,-47,6,-8,43,-6, 
  /* [43][0][][] */ -8,-53,91,-11,11,-82,-2,53,-78,-8,-57,111,34,127,42,36,65,22,1,67,-7,-27,-40,63,-53, 
  /* [44][0][][] */ -4,-2,-60,47,42,50,-73,-32,16,-82,67,127,9,-45,-47,99,-1,13,-47,35,11,-10,16,-47,19, 
  /* [45][0][][] */ -3,16,18,-37,-10,42,-48,-9,33,10,48,42,46,-43,-14,52,-12,-4,-7,-30,42,-17,-14,2,127, 
  /* [46][0][][] */ -50,23,-5,15,46,5,40,7,23,40,127,1,-23,-23,8,-15,8,4,-43,-39,0,-32,-28,-91,-43, 
  /* [47][0][][] */ -17,-125,-17,-14,55,54,11,17,-10,-20,17,-37,12,-2,-24,-10,10,-14,3,67,0,127,-12,-39,25, 
  /* [48][0][][] */ -50,-81,-69,42,9,19,9,-9,47,8,31,-4,5,3,1,-6,-3,2,37,-127,3,-72,2,-25,-37, 
  /* [49][0][][] */ 54,75,30,0,4,-13,10,-1,14,14,-41,-15,18,4,4,2,6,13,-50,-16,0,-127,-24,23,-43, 
  /* [50][0][][] */ 21,-17,-13,12,9,12,-5,-24,-2,6,28,20,-5,-1,25,-4,-11,9,19,18,3,127,2,10,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant27_scale = { 51, { 0.0027893169317394495, 0.0058766496367752552, 0.0041992808692157269, 0.0036746056284755468, 0.0022224611602723598, 0.0021242632064968348, 0.010170469060540199, 0.007427931297570467, 0.0023724569473415613, 0.0048492890782654285, 0.0041258232668042183, 0.0053281174041330814, 0.0020246128551661968, 0.002671543974429369, 0.0043475599959492683, 0.0012773787602782249, 0.0061477562412619591, 0.0079164952039718628, 0.0038317709695547819, 0.0051699811592698097, 0.0023321709595620632, 0.0047745783813297749, 0.0053933947347104549, 0.002881522523239255, 0.0012687351554632187, 0.0040214452892541885, 0.0066329222172498703, 0.0054981778375804424, 0.0092851342633366585, 0.0030457887332886457, 0.003964537288993597, 0.0049982755444943905, 0.005703567061573267, 0.0040549016557633877, 0.0044713052920997143, 0.0032518254593014717, 0.0030907387845218182, 0.0056231473572552204, 0.006457917857915163, 0.0025586127303540707, 0.0039013058412820101, 0.0035418905317783356, 0.0042135873809456825, 0.0045405146665871143, 0.0070431949570775032, 0.0086505291983485222, 0.0042879274114966393, 0.0064993426203727722, 0.0048247226513922215, 0.0078555885702371597, 0.0065296702086925507, } };
const TfArray<51, int> quant27_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[51] = { 52213, 3652, 30807, 7793, -1832, 52278, 13147, -4991, 8108, -2188, 37506, 24276, 60783, 16210, -1276, 67228, 4042, 4891, -9542, 4957, 50393, 16158, 17182, 56163, 84413, 31372, -5252, -5045, 3886, 63597, 18958, -22752, -35760, -12002, -9949, -5913, 16937, -25305, 4790, 42802, 11312, 34189, -6439, 5288, -1242, -14935, 19451, 4415, 30143, 4083, -5847, };
const TfArray<1, int> tensor_dimension28 = { 1, { 51 } };
const TfArray<51, float> quant28_scale = { 51, { 4.3565458327066153e-05, 9.1785535914823413e-05, 6.5587242715992033e-05, 5.7392502640141174e-05, 3.4711916669039056e-05, 3.3178195735672489e-05, 0.0001588493469171226, 0.00011601451114984229, 3.7054654967505485e-05, 7.5739510066341609e-05, 6.4439926063641906e-05, 8.3218183135613799e-05, 3.1621788366464898e-05, 4.1726001654751599e-05, 6.790316547267139e-05, 1.9950974092353135e-05, 9.6019859483931214e-05, 0.00012364523718133569, 5.9847217926289886e-05, 8.0748301115818322e-05, 3.6425441066967323e-05, 7.4572628363966942e-05, 8.4237726696301252e-05, 4.5005588617641479e-05, 1.9815972336800769e-05, 6.2809682276565582e-05, 0.00010359751468058676, 8.5874300566501915e-05, 0.00014502157864626497, 4.7571211325703189e-05, 6.1920851294416934e-05, 7.8066485002636909e-05, 8.9082212070934474e-05, 6.3332227000501007e-05, 6.9835899921599776e-05, 5.0789232773240656e-05, 4.8273272113874555e-05, 8.782616350799799e-05, 0.00010086417751153931, 3.9962164009921253e-05, 6.0933263739570975e-05, 5.5319669627351686e-05, 6.5810687374323606e-05, 7.091685984050855e-05, 0.00011000543599948287, 0.00013510987628251314, 6.6971784690394998e-05, 0.00010151117749046534, 7.535581971751526e-05, 0.00012269394937902689, 0.00010198485688306391, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*51] = { 
  /* [0][0][][] */ -16,-30,10,-12,2,1,19,15,2,-22,-6,5,-13,0,3,19,-36,-79,15,-8,-3,17,4,6,123,-9,-2,6,-2,4,12,-18,-26,-24,-48,-13,-6,10,-5,-23,-4,-8,-4,-2,27,0,12,-7,3,-3,0, 21,-26,35,-21,3,-6,-43,24,-26,-32,-1,-12,19,4,-38,-105,-81,-90,-15,-26,-25,4,-16,-1,80,-127,-19,13,7,-13,-28,4,12,-89,3,-127,51,33,-49,76,-34,0,-7,-10,-77,-34,-23,-5,-79,-21,-61, -14,-24,21,-17,5,8,13,13,0,14,-8,2,5,-5,-1,8,-44,24,10,-29,-12,13,-2,2,95,3,4,13,6,7,5,-14,4,-10,46,-1,-31,7,-9,-23,-7,-7,-1,17,33,-1,-17,-14,-15,-5,-14, 
  /* [0][1][][] */ -50,-44,22,-35,25,-25,18,14,-4,-127,-6,-13,-22,28,0,-54,-98,-127,22,-15,1,5,-17,9,-77,-4,-20,19,-14,-17,-7,25,127,-18,-127,7,37,17,-41,-53,-17,15,-6,78,-127,-28,-13,-46,-46,-30,-49, 127,-127,127,127,127,-127,-127,127,-127,12,127,127,-127,93,-127,-86,-3,13,-127,127,-127,127,127,127,-127,-73,127,-127,127,-127,-127,127,116,-127,34,13,127,-127,127,127,127,127,127,127,-3,127,127,-127,127,127,127, -39,-44,-8,-6,16,-12,23,16,-4,123,-29,-20,-9,-127,4,-22,-72,-19,26,53,-9,-46,-8,5,-100,28,-20,-27,-2,-9,7,17,16,5,90,-7,34,25,-22,-50,-21,6,-15,39,-78,-22,-106,-81,-24,-18,-14, 
  /* [0][2][][] */ -23,-4,1,-16,-36,12,3,5,8,-34,-22,-7,-1,11,3,15,-127,-6,14,-1,-2,29,-1,-14,-13,9,-20,10,-14,4,3,-7,6,45,-47,17,1,8,-6,-45,-2,-6,-5,18,-14,-8,0,-8,-5,-5,-17, 8,21,16,37,-107,14,34,44,-16,-7,-38,-19,-20,-4,-40,-127,-98,-4,-4,-11,-12,-97,1,-125,-29,-100,22,-40,16,5,-16,13,-1,2,-2,109,23,23,4,114,11,6,-11,-9,-94,-5,21,-33,26,5,21, -10,-4,6,-9,-23,14,12,-3,0,39,-24,-4,6,-4,-3,-44,-37,21,5,-8,-7,34,4,-8,-41,6,-27,7,-10,-2,3,2,-11,36,61,13,-9,11,5,-23,-5,-11,1,18,-31,-3,-38,-34,3,8,19, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant29_scale = { 51, { 0.010426890105009079, 0.0081174280494451523, 0.005244535394012928, 0.008825330063700676, 0.010201961733400822, 0.016324643045663834, 0.0075326515361666679, 0.0039772116579115391, 0.01780298538506031, 0.0063961613923311234, 0.01176624558866024, 0.012395447120070457, 0.012580704875290394, 0.017590032890439034, 0.0087010227143764496, 0.008177642710506916, 0.0026978815440088511, 0.0042234365828335285, 0.0079067209735512733, 0.0093875480815768242, 0.016433704644441605, 0.007275579497218132, 0.0078562293201684952, 0.010200108401477337, 0.0049960622563958168, 0.004659370519220829, 0.011145121417939663, 0.012775741517543793, 0.0093633653596043587, 0.011644361540675163, 0.0089663537219166756, 0.0065707392059266567, 0.0041855419985949993, 0.0059778941795229912, 0.0077617159113287926, 0.010506445541977882, 0.011247662827372551, 0.013813821598887444, 0.01322484016418457, 0.005939040333032608, 0.017056806012988091, 0.0095726056024432182, 0.010532866232097149, 0.0032849311828613281, 0.0034077127929776907, 0.0095298029482364655, 0.011122904717922211, 0.0057796486653387547, 0.012665051966905594, 0.012896042317152023, 0.010514506138861179, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[51] = { 1100, 12805, -1401, 3948, 300, 8105, 8319, 2631, 8557, 2404, -342, -3250, 12415, -69, 14933, 24578, 33526, 17155, 13051, 424, 10111, -150, -410, -162, 3833, 19544, -1307, 5309, -433, 11551, 10228, -1015, 397, 12187, -623, 327, -8281, 2247, 3007, 4774, 340, -712, 1102, 2108, 21468, 6435, -432, 11766, -462, -321, 1921, };
const TfArray<1, int> tensor_dimension30 = { 1, { 51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.00019516926840879023, 0.00015194104344118387, 9.8166579846292734e-05, 0.00016519146447535604, 0.0001909590937430039, 0.00030556268757209182, 0.00014099526742938906, 7.4444971687626094e-05, 0.00033323414390906692, 0.00011972257925663143, 0.00022023916244506836, 0.00023201647854875773, 0.00023548411263618618, 0.00032924811239354312, 0.00016286470054183155, 0.00015306813293136656, 5.0498620112193748e-05, 7.9053774243220687e-05, 0.00014799705240875483, 0.00017571498756296933, 0.00030760408844798803, 0.00013618341472465545, 0.00014705194917041808, 0.00019092440197709948, 9.3515693151857704e-05, 8.7213535152841359e-05, 0.00020861304074060172, 0.00023913479526527226, 0.00017526235023979098, 0.00021795775683131069, 0.00016783112369012088, 0.00012299029913265258, 7.8344470239244401e-05, 0.00011189350334461778, 0.0001452828582841903, 0.00019665838044602424, 0.00021053239470347762, 0.0002585654438007623, 0.00024754097103141248, 0.00011116624227724969, 0.00031926724477671087, 0.00017917888180818409, 0.00019715292728506029, 6.1486942286137491e-05, 6.3785155361983925e-05, 0.00017837769701145589, 0.00020819719065912068, 0.00010818276496138424, 0.00023706292267888784, 0.00024138655862770975, 0.00019680925470311195, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[51*1*1*51] = { 
  /* [0][0][][] */ 33,12,127,-43,-16,-82,23,-16,-91,-4,16,-20,2,36,38,51,-89,-35,-11,58,-27,-18,-56,-3,55,3,12,-33,-5,-42,2,-8,39,-10,24,1,-15,-13,-1,-54,33,10,62,-73,73,-25,-26,-39,26,-44,-13, 
  /* [1][0][][] */ 57,2,63,64,69,-41,-23,111,-28,-32,20,-24,-1,53,104,95,-15,5,79,69,-47,-5,-103,-18,55,-52,127,-32,31,98,63,-9,47,-49,27,14,-27,56,-12,34,71,52,87,39,66,-22,-13,-2,-47,-92,-2, 
  /* [2][0][][] */ -3,27,-23,-57,21,98,35,7,-14,-24,80,61,40,-27,-49,41,-46,-10,-63,40,73,-44,29,18,5,-5,-81,22,9,100,87,-12,-25,-22,-44,32,-57,-9,-35,14,-31,-2,-62,-42,-70,127,-34,5,24,-42,-21, 
  /* [3][0][][] */ -26,-4,-71,-39,62,-48,-29,-15,27,33,76,8,65,31,74,127,96,-66,-1,61,4,-17,-53,119,36,47,18,14,20,67,-36,-27,-8,6,17,-64,-99,-4,-8,-65,-1,22,12,25,25,23,-51,24,13,14,-66, 
  /* [4][0][][] */ -53,-21,-3,3,-9,84,1,18,11,-38,-15,18,46,43,19,7,10,-6,-52,-23,46,100,-15,7,-74,-40,-6,5,102,-57,17,127,42,-9,-35,43,-40,29,60,79,-21,-31,-9,-3,7,-37,-12,17,38,-16,44, 
  /* [5][0][][] */ 55,-40,28,43,-8,7,10,-40,21,-52,17,43,58,36,30,-3,-52,-51,0,124,-30,-6,9,8,-12,-16,26,36,-32,4,31,-89,67,-8,-1,-74,24,12,18,12,36,70,-24,14,23,3,-38,10,34,-127,-42, 
  /* [6][0][][] */ 113,45,48,49,-1,-25,20,-71,127,29,32,98,-23,41,-36,32,-70,-54,16,57,19,-31,-10,42,37,-59,-25,24,1,9,-22,-44,4,33,102,19,24,-17,-92,66,-22,-113,-72,65,-24,-94,13,-36,5,40,8, 
  /* [7][0][][] */ 32,-22,51,-24,-48,1,1,-28,-11,5,-28,-34,5,3,3,-35,4,-23,28,57,-22,-33,24,-5,5,-35,-31,-85,33,-1,-6,-3,4,13,-17,-9,76,8,96,-22,-43,-12,29,-43,38,26,13,-8,-40,26,127, 
  /* [8][0][][] */ 127,17,-75,39,-30,-87,58,51,67,8,-13,25,46,32,-15,119,20,21,-13,-78,38,26,46,-59,-52,95,-7,-17,-58,114,45,-73,13,-11,20,26,-57,-46,1,28,-5,-6,-69,-49,-17,67,41,53,-24,-21,-41, 
  /* [9][0][][] */ 2,-20,12,-15,-26,-35,-33,-5,26,-3,14,-17,-6,2,-28,34,37,-5,7,-40,27,-40,27,-46,13,-18,-11,19,37,0,-78,9,-31,-22,2,-69,-16,-19,8,-65,127,38,58,75,11,-1,12,5,8,-21,3, 
  /* [10][0][][] */ 53,-57,-95,-114,-14,-81,37,32,69,20,27,-30,-100,12,102,56,-16,-45,-70,-14,-127,19,-21,-41,-46,-46,-88,5,-18,-94,0,-39,-32,50,39,35,-79,42,21,-5,0,33,20,3,-68,-40,44,-29,49,39,-32, 
  /* [11][0][][] */ 11,-40,21,60,26,-24,-6,25,-4,35,7,-45,9,73,-10,-22,17,26,-46,67,38,11,4,30,17,15,101,23,70,36,49,-8,74,-6,87,-7,44,-1,-37,10,53,-94,34,13,1,127,47,-7,-4,-6,32, 
  /* [12][0][][] */ -43,-10,-22,-61,-18,16,45,-39,5,21,18,-28,-36,-17,61,6,20,6,25,-45,-25,29,-21,36,14,5,-58,-30,-9,-45,-10,9,-40,-21,-43,55,16,44,29,17,127,40,-8,-46,-5,0,25,-34,71,26,56, 
  /* [13][0][][] */ 0,-11,-14,-124,-5,4,0,-69,3,40,-12,-26,-48,0,-20,44,1,-13,21,-75,27,19,17,-6,-29,-23,14,-3,25,-5,-70,18,31,16,-20,-6,50,-17,31,-48,-33,33,24,10,28,15,127,42,36,-16,21, 
  /* [14][0][][] */ -24,-74,-94,-1,-36,-127,-90,-9,-97,21,-27,-102,62,24,-6,56,12,37,-39,80,-30,-58,47,-15,38,65,-5,11,-37,-35,-11,-52,-44,-24,-35,-17,72,-17,-3,-75,72,64,-112,-54,94,-25,26,25,79,-18,57, 
  /* [15][0][][] */ -12,33,23,17,26,-8,-10,5,20,6,4,-33,50,1,-1,21,-7,-28,-8,35,-32,-22,-46,-8,46,14,42,-61,-33,5,-4,-69,19,-3,-4,4,-8,8,19,-33,67,53,39,44,26,0,-14,-38,-63,-66,127, 
  /* [16][0][][] */ 11,-99,5,-1,-29,-77,66,-71,-57,24,20,-39,-13,-41,39,93,4,-29,81,-55,-45,17,25,92,-30,-38,-35,-48,15,2,-11,-50,83,30,47,-16,63,88,70,127,44,-21,46,81,3,-97,106,-56,31,53,-63, 
  /* [17][0][][] */ -10,10,-7,127,-43,47,51,45,37,-79,16,-9,41,-34,53,-87,26,17,-52,-34,34,7,53,11,-24,17,-47,-69,-32,31,2,11,19,19,-27,5,-84,-35,-17,-49,-13,55,41,26,-57,41,-33,-5,-46,-118,-8, 
  /* [18][0][][] */ -6,-12,-11,-17,8,-30,-19,2,-22,-16,13,-18,16,-3,-5,27,-10,9,-11,-8,-24,12,46,-11,6,2,7,-67,-11,-32,8,1,-9,-22,-15,-26,-32,27,127,-23,-50,-16,-28,-27,1,-4,-3,45,27,-39,55, 
  /* [19][0][][] */ -15,53,3,-3,-7,14,-44,-15,-44,-1,-86,-26,21,-42,91,66,50,8,-57,-38,-23,-26,10,-62,52,63,-13,1,-34,22,-27,-42,-26,-46,-36,-67,22,4,90,-71,-1,127,-74,-38,94,74,-38,-9,13,45,-2, 
  /* [20][0][][] */ 40,-32,35,13,12,-44,-39,-29,-32,20,-28,-5,-29,44,41,35,23,18,-127,-45,24,6,9,-60,-27,16,-39,-31,-1,11,49,24,30,-18,35,14,-6,-35,15,-29,-21,-9,-89,-21,0,5,22,19,-28,-4,-18, 
  /* [21][0][][] */ 0,1,79,-47,127,48,13,-64,15,-30,4,-43,-13,2,-38,27,48,-22,-6,6,-32,14,71,127,7,-55,-22,-55,-45,-62,-31,-15,-89,-57,16,83,46,4,-19,60,-28,-61,0,10,-34,3,-25,-8,88,68,66, 
  /* [22][0][][] */ -10,36,54,40,7,19,-23,-72,10,-16,127,-44,-40,-23,86,-34,32,19,11,-26,-51,-3,66,56,21,20,9,15,52,-56,39,-8,-6,-29,33,26,-14,30,-14,17,-8,20,-19,-24,-42,-83,36,-7,50,-115,34, 
  /* [23][0][][] */ 45,34,27,76,29,-2,-20,73,-54,-68,25,-23,-56,29,68,-10,20,35,30,65,-12,-5,20,32,41,-13,7,-15,4,-17,33,-8,-24,20,23,75,-127,18,-5,-53,40,44,63,-32,-19,-45,-15,-8,-3,-13,-55, 
  /* [24][0][][] */ -53,69,-75,70,38,106,1,36,-53,28,18,29,84,-68,1,57,44,30,-45,1,12,-14,-26,-25,26,26,-57,-7,-57,11,9,-13,18,-6,-19,-14,-14,-15,-45,-112,-62,23,-99,-48,15,127,3,52,-36,-50,24, 
  /* [25][0][][] */ 47,33,16,-35,-52,-26,-11,15,12,6,17,19,-42,16,-17,-2,20,24,5,14,-9,-29,-32,-21,19,-51,-13,48,-6,-24,25,4,2,33,-3,-45,-10,5,-5,-47,16,-49,2,21,1,127,0,-10,13,41,18, 
  /* [26][0][][] */ 30,-78,-76,-74,21,-4,2,-74,-41,18,16,17,-66,57,56,95,18,24,121,-40,-76,5,-42,-23,-103,-7,-5,-50,46,-64,-49,-32,-84,-28,-43,-102,-33,34,-93,-5,-42,53,21,60,69,-93,38,-39,44,-86,127, 
  /* [27][0][][] */ 18,50,-13,-75,117,37,15,46,40,-34,14,-67,32,0,25,13,-73,-6,15,74,-43,-53,127,-12,-14,66,-43,-51,4,55,-28,4,66,-23,22,9,-5,-11,35,-48,-38,-2,4,-39,-12,-11,-14,52,38,-66,-31, 
  /* [28][0][][] */ 25,47,22,-8,-52,82,1,65,18,-14,-20,88,99,-106,-83,61,-1,-63,29,100,47,-15,-2,16,19,-23,-52,7,-54,81,15,-7,-16,28,-36,9,-70,-36,-8,-3,25,-20,-127,28,-28,92,-15,34,-28,6,37, 
  /* [29][0][][] */ -38,-30,31,33,108,38,3,-21,-39,-26,68,-34,-71,-40,-71,-20,-33,8,-44,10,-21,5,21,87,35,-54,-59,-15,48,-27,-47,127,-13,-25,-11,25,35,115,11,31,-71,34,72,-12,22,4,-1,-7,40,-65,7, 
  /* [30][0][][] */ 14,-21,38,127,3,-5,22,60,-34,-9,14,48,-29,-18,-26,-11,24,-2,4,8,5,14,-64,12,-2,-3,32,-58,9,-12,49,26,-44,17,1,1,15,-5,-55,-43,26,39,-21,-2,-9,-8,-22,-101,-16,25,79, 
  /* [31][0][][] */ -16,-20,90,-29,12,30,33,12,28,-40,10,-21,22,-6,14,48,-16,7,-11,10,-14,11,-15,-15,-12,31,0,-23,-17,13,41,27,28,3,-37,81,-34,2,15,-41,127,-1,-32,-65,47,57,-4,-23,5,-3,-19, 
  /* [32][0][][] */ -18,-31,-58,65,-4,-8,-13,33,-59,-82,24,86,-18,62,-53,-6,-76,16,87,127,-67,-60,-94,16,-25,13,-10,-64,43,-25,-40,30,63,-23,38,-22,-94,-9,-2,-16,97,-59,-41,-94,103,-33,4,-105,36,-76,22, 
  /* [33][0][][] */ 56,14,-23,-104,48,23,-6,-127,-30,50,-9,-39,-83,4,-22,38,89,44,37,-116,45,-28,30,-24,-49,-76,48,-34,-27,-28,-50,-73,-126,-10,32,38,19,-2,-12,-14,-7,35,-84,-23,40,-36,109,-69,23,29,-8, 
  /* [34][0][][] */ 28,-127,-3,-12,13,32,-10,-77,-32,0,0,-28,38,22,70,49,39,8,-46,-18,-19,-58,-18,88,18,-35,-25,-20,33,-23,-67,67,29,57,68,16,-52,9,11,-72,-35,-56,-70,30,-2,44,47,13,24,1,8, 
  /* [35][0][][] */ -37,-23,102,63,24,7,-5,-64,-97,12,-78,127,13,-31,-63,54,22,9,-38,107,-10,11,-34,68,-15,68,-25,-51,-66,63,-127,-104,78,-16,-54,16,94,39,-1,117,-73,118,36,57,-38,-20,0,44,-15,-20,-17, 
  /* [36][0][][] */ 42,-29,-15,-14,19,-82,-1,-42,-127,9,-13,7,-45,6,41,50,16,-4,-11,-27,20,1,-12,-10,-27,-6,1,21,-12,73,64,27,-57,40,21,-15,-4,-26,19,-71,-16,-32,44,-27,5,17,-9,2,11,-12,-18, 
  /* [37][0][][] */ 71,-67,88,40,106,44,-75,22,29,-127,44,-9,0,2,68,74,53,5,-38,-111,43,-53,-53,12,32,-46,-36,-49,-21,-9,-45,3,-26,-82,-4,-52,-32,43,100,-61,-11,-26,-82,-12,-5,70,-55,-30,9,54,-63, 
  /* [38][0][][] */ 19,-126,83,-51,18,-72,31,-23,-127,-17,-55,16,-16,46,-43,69,23,-51,4,13,37,-10,13,-18,64,60,67,-32,21,126,84,79,-18,-31,39,-33,-2,-5,8,-12,-27,-3,117,11,-4,-61,-92,13,90,-68,33, 
  /* [39][0][][] */ 2,-5,14,11,1,-1,-11,17,10,10,-15,-2,-11,6,-9,27,10,20,12,-5,18,-1,-7,3,-5,0,-6,-98,-1,0,-16,-1,15,2,7,15,3,0,8,-9,-19,-3,10,-14,-29,7,4,0,6,4,127, 
  /* [40][0][][] */ 4,-24,15,33,20,-11,-26,-17,3,-8,-40,-6,66,50,45,18,-7,8,127,-4,28,38,-27,31,-16,-28,28,-11,79,-41,-30,-69,8,-7,12,-1,-34,69,45,18,-22,-42,18,17,-2,8,1,3,23,-7,1, 
  /* [41][0][][] */ 77,63,-13,13,-7,-24,-29,-68,24,19,86,127,-42,20,-74,81,-36,43,87,65,-61,-78,-71,-68,15,-11,119,18,-15,9,-74,-50,-18,-49,-45,-89,-63,-11,-26,-82,99,10,-82,-96,46,56,-7,6,-46,-36,6, 
  /* [42][0][][] */ 14,-18,104,22,-12,-78,5,-54,-40,-82,-59,60,65,53,-6,50,-28,-85,12,53,-28,-39,4,32,-85,7,39,-12,-11,18,-51,-10,-72,18,49,-127,46,63,-14,39,76,18,-38,-10,-13,-46,-21,-8,7,-51,63, 
  /* [43][0][][] */ 74,16,-29,-46,1,37,67,12,45,39,-24,9,-94,42,-40,-12,-7,-66,-70,-7,16,-4,-85,56,-40,19,-38,3,48,-62,121,-5,22,-127,37,62,-85,17,-6,-26,-43,37,10,-8,13,-104,34,-64,51,88,12, 
  /* [44][0][][] */ 75,25,74,-45,6,-63,-4,-39,-89,33,66,-24,-111,102,26,-3,-17,10,53,45,2,-29,-34,-13,-15,-58,-24,-22,9,-114,22,-7,19,-20,56,-62,40,45,41,71,127,-115,-18,10,37,-95,87,4,0,10,-16, 
  /* [45][0][][] */ 65,-16,-62,111,-23,-83,23,8,5,41,42,72,-6,-8,-26,127,-29,18,77,-37,-8,-26,-2,19,-11,10,32,-47,-23,93,-66,-64,-56,-74,18,82,-23,-20,-25,-92,-104,18,26,-117,32,-115,83,31,-14,47,7, 
  /* [46][0][][] */ 59,-64,11,-41,-9,70,-13,18,1,-12,34,28,-27,-12,-72,-2,28,43,-55,6,87,4,-72,12,21,-127,70,-9,15,17,12,-29,-45,65,-11,19,-43,-9,-41,-20,20,-84,3,91,-39,14,25,-40,-24,18,48, 
  /* [47][0][][] */ -1,24,40,26,-63,-32,14,-2,-3,-16,12,61,2,-61,37,-30,-127,-15,24,96,-52,14,12,-8,-51,-59,11,-12,30,-56,2,27,-20,-50,-75,21,85,33,-51,-33,47,54,2,4,15,-29,-63,-5,-25,-38,-25, 
  /* [48][0][][] */ -22,-74,27,-54,-84,1,24,-19,8,90,-11,-6,48,91,-114,-105,26,-60,-120,-60,19,17,-106,-16,-56,36,-118,15,1,-2,-2,17,-29,-111,5,45,-127,-33,-42,5,-87,55,100,-34,-48,-7,7,-8,99,91,-39, 
  /* [49][0][][] */ 5,-15,-9,13,11,-6,127,7,-20,-12,83,-31,1,5,-13,10,-34,60,22,3,-7,-17,1,7,11,27,28,-16,-8,-7,-2,21,-36,35,-10,-13,-45,-14,5,19,1,-1,-51,-23,5,1,4,31,-1,51,-3, 
  /* [50][0][][] */ 112,84,31,104,-85,-63,19,73,-77,121,-18,44,28,39,-90,-38,16,-94,-68,51,48,0,-68,6,49,-102,27,8,45,33,13,-43,40,-127,77,-17,-51,9,15,111,-42,22,-40,-6,78,13,59,-9,-22,63,-61, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant31_scale = { 51, { 0.0025387064088135958, 0.0023838616907596588, 0.0031713377684354782, 0.0032123501878231764, 0.0029140871483832598, 0.0052321581169962883, 0.0013301133876666427, 0.0021767285652458668, 0.0030430890619754791, 0.0042054885998368263, 0.0047547277063131332, 0.0026347765233367682, 0.0040818345732986927, 0.0023622231092303991, 0.0053885923698544502, 0.0035797157324850559, 0.0027223965153098106, 0.0013083246303722262, 0.0073229018598794937, 0.0048288125544786453, 0.0033292996231466532, 0.0011410122970119119, 0.0017127561150118709, 0.0033090240322053432, 0.0041250870563089848, 0.0064539480954408646, 0.0032695205882191658, 0.0042022331617772579, 0.0030061651486903429, 0.0040289489552378654, 0.0026963884010910988, 0.0025592471938580275, 0.0027834540233016014, 0.0042685572989284992, 0.0027006426826119423, 0.0053148474544286728, 0.0050167469307780266, 0.0035438269842416048, 0.0042371107265353203, 0.0060355407185852528, 0.0048585678450763226, 0.0017273540142923594, 0.0031681465916335583, 0.0038210279308259487, 0.0017204396426677704, 0.0030614710412919521, 0.004165351390838623, 0.0013522881781682372, 0.0020766686648130417, 0.0040424177423119545, 0.0015552982222288847, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[51] = { 20701, -32472, 6893, -6944, 4148, -9764, 38090, 14726, -7870, 10149, 31606, -15239, -1690, 27325, 17032, -6066, -5733, 35270, 5778, -3726, 29756, 48036, 26466, 533, 300, -4581, 26060, 1432, -2655, 8584, 10030, 918, 17403, 30461, 21605, -14780, 11847, 12313, -421, 843, -10727, 30828, 7868, 22717, 30544, 12352, 12941, 45994, 56376, 1232, 21292, };
const TfArray<1, int> tensor_dimension32 = { 1, { 51 } };
const TfArray<51, float> quant32_scale = { 51, { 5.0010952691081911e-05, 4.6960605686763301e-05, 6.2473402067553252e-05, 6.3281317125074565e-05, 5.7405719417147338e-05, 0.00010307029151590541, 2.6202413209830411e-05, 4.2880212276941165e-05, 5.9946978581137955e-05, 8.2845530414488167e-05, 9.3665206804871559e-05, 5.1903472922276706e-05, 8.0409627116750926e-05, 4.6534340071957558e-05, 0.00010615195060381666, 7.0518195570912212e-05, 5.3629533795174211e-05, 2.5773188099265099e-05, 0.00014425665722228587, 9.5124632935039699e-05, 6.5585147240199149e-05, 2.2477239326690324e-05, 3.3740237995516509e-05, 6.5185733546968549e-05, 8.1261670857202262e-05, 0.00012713880278170109, 6.4407540776301175e-05, 8.2781400124076754e-05, 5.9219601098448038e-05, 7.9367811849806458e-05, 5.3117189963813871e-05, 5.0415590521879494e-05, 5.4832329624332488e-05, 8.4087943832855672e-05, 5.3200994443614036e-05, 0.00010469921835465357, 9.8826822068076581e-05, 6.9811205321457237e-05, 8.3468468801584095e-05, 0.00011889643064932898, 9.571079135639593e-05, 3.4027809306280687e-05, 6.2410537793766707e-05, 7.5271891546435654e-05, 3.3891599741764367e-05, 6.0309092077659443e-05, 8.2054852100554854e-05, 2.6639243515091948e-05, 4.0909093513619155e-05, 7.9633136920165271e-05, 3.0638417229056358e-05, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[1*3*3*51] = { 
  /* [0][0][][] */ -82,-8,-4,-9,17,29,-6,12,-23,-13,-13,6,-36,-15,5,15,1,8,9,-12,-10,17,2,-3,-3,-10,4,-18,-13,-4,3,-7,-8,4,-11,17,-34,32,-80,-2,-86,-44,3,13,-12,1,-29,-71,33,-14,1, 4,-5,65,-12,13,58,-20,24,127,77,36,40,127,28,63,39,31,-20,101,49,12,-102,34,-47,47,37,17,-32,13,26,37,37,26,-5,-5,-6,33,-17,-106,30,-53,-65,10,-49,-16,-61,41,-71,-92,-63,42, 69,-7,2,5,16,13,-2,17,-10,-29,-16,4,22,14,-15,23,0,-5,29,-11,-16,17,1,5,16,-7,9,-7,-31,4,10,2,7,-12,-31,15,-14,40,-26,-16,-81,-37,11,7,-5,-6,-4,-63,-21,-18,4, 
  /* [0][1][][] */ -127,-19,97,-20,10,-5,-11,35,71,55,6,14,46,0,35,20,-17,-59,67,8,-32,-39,17,-44,39,59,0,-9,-25,20,8,-24,-7,0,9,-46,16,28,-81,7,-38,9,94,-37,-44,2,29,-127,-127,-6,15, 1,127,127,127,127,127,-127,127,121,127,127,127,114,110,127,127,127,-127,96,127,-127,-127,127,-127,127,127,127,-127,-127,127,108,127,127,127,127,-127,127,-31,-119,122,-127,127,-41,127,-127,127,127,107,-15,127,20, 119,-3,23,4,12,13,-26,-6,93,54,-9,32,67,44,29,5,-27,-44,86,28,-11,-37,5,-32,2,44,1,14,-35,3,6,-12,32,54,-16,-24,10,65,-44,-48,-56,13,127,14,-32,4,6,-69,-99,9,11, 
  /* [0][2][][] */ -70,20,0,18,-1,-14,2,-11,-4,13,10,2,-12,-10,23,-14,1,28,22,8,-9,-8,29,9,-4,-26,5,-8,2,1,-27,-3,7,1,-3,-16,-48,25,-67,-56,-25,-3,47,8,-1,-5,-4,-80,-41,8,-22, 10,8,-65,-52,-22,-54,-9,-45,48,32,-1,-24,-36,-127,7,-74,-5,16,-127,-16,-14,-92,17,120,7,55,-58,-37,-46,-9,-127,-109,-55,16,28,-54,7,127,-127,-127,-32,20,98,-1,-21,8,51,-72,-123,23,-127, 73,14,-3,-3,-9,-44,2,-3,-5,6,11,-11,-6,-55,21,-14,3,11,-51,-17,0,-16,11,31,6,-26,5,-5,5,-5,-24,-23,-13,14,-26,-14,-46,55,26,-42,-17,3,53,22,5,0,3,-55,-22,21,-40, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant33_scale = { 51, { 0.0059652416966855526, 0.0092356987297534943, 0.0050541553646326065, 0.012063751928508282, 0.0099488776177167892, 0.0062879882752895355, 0.015016865916550159, 0.010648882947862148, 0.0037982284557074308, 0.0044405129738152027, 0.0073843267746269703, 0.011355647817254066, 0.0055903182365000248, 0.012969767674803734, 0.0047709471546113491, 0.0068344669416546822, 0.0091701885685324669, 0.01005250308662653, 0.0075096273794770241, 0.0057902075350284576, 0.010427869856357574, 0.016024613752961159, 0.01421835832297802, 0.0071759386919438839, 0.010186418890953064, 0.0056688422337174416, 0.0056870034895837307, 0.0049029439687728882, 0.0059176329523324966, 0.0086427219212055206, 0.0095524704083800316, 0.014964590780436993, 0.0069736368022859097, 0.0077657820656895638, 0.0099559659138321877, 0.002630328293889761, 0.0068677742965519428, 0.0037923436611890793, 0.0034734916407614946, 0.0099728023633360863, 0.0042102080769836903, 0.011474926024675369, 0.0037751460913568735, 0.010750473476946354, 0.015974704176187515, 0.01082799956202507, 0.0051970141939818859, 0.0063026365824043751, 0.0047889496199786663, 0.010135460644960403, 0.010714806616306305, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 3 };
const ALIGN(16) int32_t tensor_data34[51] = { -2112, -860, -501, -2996, -2237, 1360, 18048, -1516, -6595, -9126, -128, -6620, -4803, 1409, -422, 1358, 67, 16774, -156, -238, 13699, 25067, -10529, 12382, -4689, -1086, 5546, 23177, 20738, -1559, 371, 1302, 337, -5784, 486, 39195, 2893, -71, 25610, 1154, 28383, -1881, -9118, -1548, 13760, -826, 1235, 36361, 27784, -3143, 6754, };
const TfArray<1, int> tensor_dimension34 = { 1, { 51 } };
const TfArray<51, float> quant34_scale = { 51, { 9.1289635747671127e-05, 0.00014133939112070948, 7.7346739999484271e-05, 0.00018461876607034355, 0.00015225358947645873, 9.6228817710652947e-05, 0.00022981202346272767, 0.00016296618559863418, 5.8126544900005683e-05, 6.7955807026010007e-05, 0.00011300673941150308, 0.0001737822312861681, 8.5551961092278361e-05, 0.00019848406373057514, 7.3012641223613173e-05, 0.00010459190525580198, 0.00014033683692105114, 0.00015383942809421569, 0.00011492428893689066, 8.8610984676051885e-05, 0.00015958388394210488, 0.00024523417232558131, 0.00021759197989013046, 0.00010981765080941841, 0.00015588881797157228, 8.6753658251836896e-05, 8.7031592556741089e-05, 7.5032665336038917e-05, 9.0561050456017256e-05, 0.00013226471492089331, 0.00014618712884839624, 0.00022901201737113297, 0.00010672170901671052, 0.00011884437844855711, 0.00015236205945257097, 4.0253475162899122e-05, 0.00010510162974242121, 5.8036486734636128e-05, 5.3156905778450891e-05, 0.00015261971566360444, 6.4431318605784327e-05, 0.00017560760898049921, 5.7773304433794692e-05, 0.00016452088311780244, 0.00024447040050290525, 0.00016570731531828642, 7.9532997915521264e-05, 9.6452989964745939e-05, 7.3288138082716614e-05, 0.0001551089808344841, 0.00016397505532950163, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[51*1*1*51] = { 
  /* [0][0][][] */ -26,5,-39,46,-44,86,-5,12,-50,20,-25,-18,101,9,-11,-54,-16,93,-3,-8,-3,30,6,55,-31,-5,-48,-67,-57,-21,-31,-3,127,-23,12,-71,12,-22,-15,27,-32,30,42,7,-48,-29,-31,54,-39,-14,27, 
  /* [1][0][][] */ 127,42,-54,-29,29,-27,-36,-18,75,75,-50,42,-24,-6,-1,-45,-49,-29,-21,-40,22,-85,12,23,29,-61,-42,-12,45,-36,47,68,9,47,-108,21,-10,-24,-57,69,67,-75,3,32,11,122,91,-21,-78,-43,53, 
  /* [2][0][][] */ -6,127,-33,-27,122,-70,-33,2,-57,-34,-22,-2,41,14,6,-13,-24,-9,4,45,93,36,28,92,30,-26,80,-51,83,-14,120,-7,42,-9,-28,0,-47,44,-49,-24,-21,-9,63,-67,-52,59,-78,63,-8,-42,46, 
  /* [3][0][][] */ -10,82,30,104,-36,26,98,-23,-67,-88,-36,-19,21,82,-35,3,-127,72,0,-27,56,-83,-4,7,31,-68,-22,-37,-2,123,66,79,48,39,-105,-53,13,25,-52,11,19,11,-35,-6,25,18,69,31,60,61,48, 
  /* [4][0][][] */ -23,-86,-40,-88,73,-36,-127,48,-20,14,71,-97,23,-22,-5,-11,-90,-49,2,-40,81,-5,-46,13,-9,1,24,-12,-26,-18,-12,35,49,43,45,16,-76,93,41,-4,44,5,10,68,32,4,-15,-15,-4,-57,64, 
  /* [5][0][][] */ -62,-32,82,72,-62,-11,-26,-40,-29,-38,-45,-4,-64,127,-35,-2,16,-18,-8,-10,59,-1,20,-12,34,-17,51,13,6,-22,62,114,0,32,22,54,14,-66,-1,69,-10,1,21,-18,14,13,-23,114,53,-19,62, 
  /* [6][0][][] */ 7,46,-72,-5,-17,-23,3,-12,-50,-22,49,-19,-1,-33,24,40,-37,-84,11,-9,25,-32,88,3,47,33,0,47,-9,44,109,22,101,10,-37,-3,10,-35,27,11,-4,-10,39,0,-28,-5,-9,45,-13,127,13, 
  /* [7][0][][] */ -30,-30,76,-33,-16,18,-38,7,46,-11,-86,21,-11,-23,57,-4,37,58,1,118,-3,54,65,9,127,6,35,105,32,56,12,-37,-1,-8,37,-21,33,-14,1,13,-25,-20,-48,46,22,42,70,6,44,-11,-43, 
  /* [8][0][][] */ -4,-1,19,1,-5,10,18,52,-12,-1,-6,-3,-40,-3,-20,74,-2,-11,127,32,-11,29,57,-42,4,10,-35,-16,49,0,-7,-1,-36,-16,5,24,3,36,-5,58,-18,5,-19,10,-7,8,-20,17,-44,-1,-25, 
  /* [9][0][][] */ 1,-7,-43,-1,-13,39,75,103,-60,-34,-29,-22,-36,-15,48,9,-11,1,49,57,-37,-60,30,14,-18,-105,70,-44,-78,57,18,20,37,90,20,-18,21,-5,-9,127,11,-3,45,94,-47,-5,92,8,-38,-3,-73, 
  /* [10][0][][] */ 28,27,-51,-57,34,6,5,23,0,88,33,3,-4,-127,-33,-17,-21,-35,18,7,2,73,19,-11,-13,54,19,27,8,-100,-90,-80,-19,25,32,-10,33,40,5,-36,-29,8,21,-38,-7,-46,-64,21,-18,-16,-21, 
  /* [11][0][][] */ -22,-108,-38,1,-127,36,-33,-3,-20,5,53,80,39,69,-41,-54,34,-11,-124,-6,-15,40,-2,6,-21,76,-27,-10,-123,-25,57,8,41,64,25,-32,-76,-20,28,38,56,22,-97,79,12,31,-23,9,108,22,-33, 
  /* [12][0][][] */ -44,17,29,44,-47,-127,0,-84,-56,106,57,85,52,74,57,77,-66,95,-28,-37,30,51,-15,48,114,39,47,-1,28,-49,-37,57,44,34,121,-26,-26,-31,3,94,30,9,-43,-34,2,-54,-12,30,28,62,3, 
  /* [13][0][][] */ 6,-13,27,60,17,-33,46,55,29,5,89,84,-28,59,-56,-7,-45,47,22,-87,-10,47,23,-12,-25,-55,-3,-56,38,-76,44,-55,16,51,127,103,5,56,-27,9,-29,-35,-22,-19,71,-53,58,59,7,17,-22, 
  /* [14][0][][] */ -4,61,9,-70,37,85,-52,9,-17,17,-7,28,25,0,5,-38,22,-58,-55,43,-73,2,20,93,-38,-24,-18,-22,49,-38,41,-27,-44,-65,-28,-42,-25,127,-5,-52,52,27,43,9,47,-3,0,-9,55,-3,-14, 
  /* [15][0][][] */ -32,-45,18,32,30,-1,28,40,-59,5,-127,69,49,-36,-24,-31,-46,66,-14,1,102,10,-39,-50,-45,-36,-60,-48,-8,5,-13,3,59,66,30,-26,3,-69,-84,-5,-62,25,12,-16,-19,-66,8,48,12,101,76, 
  /* [16][0][][] */ -37,38,-99,52,-60,48,41,-127,-41,108,0,-30,6,-21,47,94,-22,-29,17,-15,47,3,90,-30,3,-69,10,-101,1,6,-40,-23,52,58,-25,4,-43,1,-7,10,11,53,77,21,-32,-47,5,41,-48,-12,29, 
  /* [17][0][][] */ -2,-37,-18,31,-15,-44,5,22,1,-21,7,-2,-1,40,-26,-13,58,39,-15,33,2,-3,-23,-15,-1,15,-15,-46,-6,4,21,6,-19,-3,-15,-2,-26,1,-5,-4,-8,-20,14,127,3,1,-7,-3,-33,-6,7, 
  /* [18][0][][] */ -21,45,-12,16,26,4,70,-103,-35,23,19,82,46,-42,15,-21,-8,34,0,16,-73,-18,60,9,23,-26,-75,1,-32,-17,-11,127,34,36,-15,3,11,21,-21,-13,2,23,99,-17,35,-11,-60,16,-5,-52,28, 
  /* [19][0][][] */ 16,68,-15,40,37,14,127,-18,-38,-10,-23,-37,-13,0,24,-4,-3,-20,14,-61,-18,-2,3,-32,-43,-19,-21,-6,-3,-22,-34,45,-2,-6,-50,37,22,-2,-47,4,-63,2,3,2,-49,-6,2,63,-36,-12,25, 
  /* [20][0][][] */ 84,-127,-101,33,125,-49,72,-46,-37,-85,-32,-36,-69,68,-36,-7,10,56,-34,-60,60,2,62,22,81,-64,-50,47,-40,16,55,-11,85,-88,88,98,-74,-22,-13,30,99,50,50,95,-23,-7,-126,-62,13,3,13, 
  /* [21][0][][] */ -43,-3,-46,31,49,-12,-2,33,-42,3,-27,-20,74,25,-54,-31,22,-13,17,13,18,9,-14,40,-6,6,-58,-19,49,-21,-31,60,-30,9,16,-3,0,4,12,25,-33,-12,62,-44,-25,-15,-4,25,48,127,21, 
  /* [22][0][][] */ 11,-38,2,-20,-55,-31,-10,7,-31,34,13,-32,-2,32,18,-24,24,-8,-9,4,-32,3,-89,-2,16,11,37,-37,31,-37,-7,30,33,-53,-8,-10,-25,29,2,59,-11,31,-34,-11,-74,73,24,-8,-11,127,6, 
  /* [23][0][][] */ 24,-7,30,127,-3,2,-4,10,-59,-50,5,26,111,52,-15,0,-25,6,26,-15,-30,70,-54,-47,-22,-9,7,17,52,-71,40,2,-65,29,62,-66,0,-103,-19,-3,-21,35,60,-43,-35,30,-61,67,10,-21,22, 
  /* [24][0][][] */ -58,35,28,16,-34,12,16,-47,-68,-65,16,33,18,13,127,10,-37,-10,12,-14,-39,14,-75,-8,-2,-49,-3,27,4,20,5,22,8,-30,99,26,21,-23,-73,47,68,49,72,-1,-11,-29,-26,-13,-36,67,13, 
  /* [25][0][][] */ 3,-24,-37,-19,20,-3,-29,125,-16,-19,21,33,11,11,14,102,-4,-30,104,17,-32,-9,3,5,56,7,-40,5,11,-6,12,7,-28,-5,-16,0,-3,-4,8,127,17,4,58,-11,-2,15,-11,24,-7,5,2, 
  /* [26][0][][] */ -59,-106,-41,-7,-25,-32,88,86,-73,109,-39,46,55,-73,90,-17,-54,41,-10,-41,43,41,-17,29,127,55,1,29,-75,-10,-61,-114,25,16,-22,41,7,22,-58,54,-42,25,55,-99,62,-5,15,91,20,-16,12, 
  /* [27][0][][] */ -25,0,-62,35,-13,-8,-19,-127,-52,-55,-14,-15,16,67,23,-59,-6,20,35,33,34,11,-10,-2,-13,-9,48,-40,57,2,-40,15,24,28,9,15,17,9,3,-65,-11,18,2,-19,-62,19,-2,35,-3,-29,26, 
  /* [28][0][][] */ -8,127,2,3,34,10,-13,-23,-25,31,-15,19,-1,1,15,39,4,5,-14,-38,33,-33,-41,3,-64,55,113,27,19,-19,-4,-25,13,13,-33,9,72,-2,-47,3,-85,-25,19,32,-57,46,-15,0,-4,-33,55, 
  /* [29][0][][] */ 127,-61,101,17,43,-20,-15,-41,64,-24,69,-15,-51,-20,-13,-13,-79,50,29,-57,78,20,-35,-1,77,38,-57,-16,16,49,17,-53,-13,24,51,-4,-42,19,-4,-26,97,16,17,21,78,-15,94,-69,56,71,-59, 
  /* [30][0][][] */ 20,-29,33,2,-83,-95,51,26,-41,48,-20,9,5,52,-34,15,-127,28,11,57,54,15,87,53,-38,-17,-28,17,35,-70,-80,40,-37,-1,64,62,1,13,-21,-21,20,101,-21,99,-39,-28,-50,-8,-33,-1,10, 
  /* [31][0][][] */ -51,113,-37,48,-73,41,-32,-25,-101,-52,-31,-35,24,12,-24,-36,-44,23,27,-45,-50,2,53,41,-24,-23,-15,-10,6,-16,33,-50,99,-67,22,-112,59,8,-23,29,-11,-21,31,-17,-59,12,-22,127,-39,-24,117, 
  /* [32][0][][] */ -50,20,46,120,-64,-42,-39,-35,-43,-35,-13,-96,41,60,-69,-67,-96,21,-28,50,34,-67,-2,118,86,35,39,-2,5,-16,60,-11,63,29,127,-105,-26,-36,-16,-6,-22,49,2,-63,-59,-5,27,30,90,23,5, 
  /* [33][0][][] */ -7,13,-24,-20,-61,9,-15,-127,-27,32,22,43,1,-1,-49,-24,-67,3,53,4,-14,24,-31,33,-66,-13,66,-37,-27,-49,58,-11,8,51,-26,0,-60,10,-20,-5,-29,59,45,-39,-23,79,55,6,27,-5,19, 
  /* [34][0][][] */ -49,-46,28,-4,-38,67,-73,-42,20,-29,-19,28,10,19,-3,55,69,-58,49,6,-2,-80,-6,-37,36,67,28,58,22,45,47,76,-19,-17,101,-24,127,25,-56,63,-93,8,-2,-11,50,-41,45,44,-81,-13,-15, 
  /* [35][0][][] */ -3,-31,-10,-70,-23,-24,127,-14,22,27,62,16,25,0,9,16,25,10,-25,-34,-26,-7,-15,17,-38,-18,53,83,100,-45,-23,14,-7,-12,-33,-38,-24,54,11,5,10,-11,-2,33,-24,-28,-11,-32,43,24,28, 
  /* [36][0][][] */ 19,-24,-12,-79,110,-38,-69,29,20,-6,41,-13,15,45,-13,10,1,-11,7,-63,72,24,76,-32,-57,24,-40,-2,18,-127,-13,-6,19,30,-117,-32,-89,-105,43,-13,-21,-13,-21,6,6,42,-57,17,55,-48,-46, 
  /* [37][0][][] */ -14,-16,-18,49,-8,-36,-89,34,-43,-12,-63,71,48,-2,7,-57,-85,-22,-7,-32,-29,36,122,22,49,40,52,-4,49,-18,19,-89,24,-50,3,127,77,-36,-15,34,-15,18,25,-5,-24,25,29,67,61,29,-29, 
  /* [38][0][][] */ 67,-20,108,31,32,7,44,32,-6,-17,73,-40,54,59,-63,-36,9,-14,39,-38,49,-4,11,21,9,127,57,-23,-103,19,19,43,7,54,-75,15,13,7,23,7,-16,21,-15,-3,23,-36,19,-60,-16,10,16, 
  /* [39][0][][] */ 15,76,31,-44,-76,4,-6,3,-3,-29,7,-10,-22,-5,15,-26,127,-24,0,-28,23,33,15,-2,-49,-6,6,29,-32,19,6,-54,17,39,-2,17,15,15,-33,-4,48,30,15,-14,-112,2,-7,38,-19,-29,13, 
  /* [40][0][][] */ -27,-1,2,52,-18,22,-30,-64,8,33,-7,115,-47,64,-32,125,42,-73,-68,90,4,-2,-74,-4,-4,39,29,-84,60,86,52,127,7,44,24,-96,-87,-38,-12,36,-20,-59,23,-46,85,-23,-18,5,-80,-23,9, 
  /* [41][0][][] */ -47,-109,-45,-6,-89,-14,-127,9,-89,-19,-76,-8,-46,77,60,77,5,6,-21,-7,-47,-65,7,-32,-76,24,114,-12,-65,13,-4,-66,-1,88,78,-23,-53,1,-3,118,-109,-5,-65,7,-103,77,-48,114,27,30,-1, 
  /* [42][0][][] */ -17,42,-53,-21,-82,-65,86,-3,-4,-37,-51,-11,127,7,-42,103,-28,-6,-37,-9,-39,1,-13,29,26,-54,67,83,-14,-48,6,36,90,70,11,97,34,25,20,87,-63,89,40,-42,-29,36,-55,63,1,-37,52, 
  /* [43][0][][] */ 35,-38,-98,57,64,8,85,-90,52,21,-12,-47,20,-9,3,-38,27,-83,46,-8,-18,45,-68,14,-46,-57,28,1,27,98,-26,-31,79,-23,18,39,-41,-3,-15,25,11,-43,-9,79,24,127,-41,45,21,30,80, 
  /* [44][0][][] */ -19,42,-14,0,-8,-16,-20,8,-18,59,-32,-25,52,-35,-14,0,-56,42,-23,77,-45,4,14,-63,8,46,-35,-38,-56,-20,-21,127,104,22,-22,5,21,17,-3,-30,5,-61,-81,38,-47,-7,-1,8,70,-65,-1, 
  /* [45][0][][] */ -43,13,-50,14,-26,-21,121,-24,-37,-28,-27,122,110,11,-46,-9,-127,97,19,-10,49,6,11,75,-6,-51,-38,42,60,-7,5,-46,45,59,5,-67,20,4,-58,9,-13,46,18,-42,70,34,79,-11,52,12,30, 
  /* [46][0][][] */ -80,6,11,-33,15,-18,77,23,12,-8,-15,21,-2,12,-35,12,24,-5,-21,-7,27,11,17,13,-13,-10,-47,74,5,-13,21,-24,25,22,34,-15,12,-20,63,-31,-24,-36,-24,-17,53,33,19,127,19,15,-11, 
  /* [47][0][][] */ -15,59,-43,3,-127,44,60,5,-14,-11,11,-52,11,28,1,58,-6,41,10,24,-31,-14,2,-71,44,-26,2,-45,31,88,10,87,-28,44,35,41,-44,77,-6,12,23,13,14,-21,-76,23,-62,64,0,18,69, 
  /* [48][0][][] */ -9,-39,-4,71,-111,6,14,9,48,6,-58,8,46,-12,-23,-27,6,-23,2,-39,46,8,-85,-4,13,-46,40,-38,-16,-113,-9,44,29,49,-4,-41,-42,-19,2,59,-12,36,0,-124,-45,-23,-16,34,80,127,70, 
  /* [49][0][][] */ 17,89,-70,-63,12,88,-78,-3,-28,-23,10,1,21,72,45,107,7,-83,-24,-38,-19,46,-41,32,59,-14,-87,14,-45,81,35,-21,81,34,45,5,1,-71,33,4,3,-19,-19,127,-60,9,91,-57,-17,-105,6, 
  /* [50][0][][] */ -21,18,-16,4,-64,4,7,30,-4,29,-30,-34,1,38,8,-14,-8,7,-9,8,-36,5,-29,-7,-23,-28,-21,-32,6,65,17,-12,35,-9,23,22,127,-32,3,30,46,29,12,-20,-13,13,21,54,-29,22,10, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant35_scale = { 51, { 0.0045064301230013371, 0.0012052329257130623, 0.0038743510376662016, 0.0028081927448511124, 0.0018005919409915805, 0.0014249957166612148, 0.0031031870748847723, 0.0035150172188878059, 0.0050432877615094185, 0.0038499785587191582, 0.003274489426985383, 0.0032345314975827932, 0.0030492481309920549, 0.001510911388322711, 0.0051637054421007633, 0.0027582927141338587, 0.0028518964536488056, 0.0079045919701457024, 0.0046412325464189053, 0.0072240638546645641, 0.0019959735218435526, 0.0053752348758280277, 0.0053448998369276524, 0.0034342936705797911, 0.0018828506581485271, 0.0035707168281078339, 0.0027925369795411825, 0.0046781962737441063, 0.002644652035087347, 0.0028063408099114895, 0.005957410205155611, 0.0051650628447532654, 0.0030791396275162697, 0.0048534679226577282, 0.0017401278018951416, 0.002373184310272336, 0.0026570109184831381, 0.0038592603523284197, 0.0023492015898227692, 0.0042280578054487705, 0.0015114676207304001, 0.0029353643767535686, 0.0025786340702325106, 0.0029308116063475609, 0.0024512321688234806, 0.0049339118413627148, 0.0010390154784545302, 0.0028958949260413647, 0.0033383972477167845, 0.0040965499356389046, 0.0051292623393237591, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int32_t tensor_data36[51] = { 12881, 53309, -17304, -9766, 39034, 10154, -195, -14566, -3076, -7588, 9367, 19389, -15328, 7986, 2168, 19988, 18063, 4423, -2389, -5396, 7939, -4236, 11872, 9768, 20995, -6163, 2663, 13614, 7166, -9103, -6739, 9456, 6033, 19135, 20114, 6154, 36858, -6537, 3973, 139, 36096, 23822, -11080, -6463, 27807, -16297, 36653, -10941, 8910, 4391, -4897, };
const TfArray<1, int> tensor_dimension36 = { 1, { 51 } };
const TfArray<51, float> quant36_scale = { 51, { 7.9191275290213525e-05, 2.1179499526624568e-05, 6.8083776568528265e-05, 4.9348233005730435e-05, 3.1641713576391339e-05, 2.5041379558388144e-05, 5.4532152717001736e-05, 6.1769220337737352e-05, 8.8625449279788882e-05, 6.7655484599526972e-05, 5.7542441936675459e-05, 5.6840261095203459e-05, 5.3584288252750412e-05, 2.6551171686151065e-05, 9.074153786059469e-05, 4.8471341870026663e-05, 5.0116235797759145e-05, 0.0001389070093864575, 8.1560152466408908e-05, 0.00012694811448454857, 3.5075143387075514e-05, 9.4458737294189632e-05, 9.3925664259586483e-05, 6.0350674175424501e-05, 3.3087242627516389e-05, 6.2748033087700605e-05, 4.9073114496422932e-05, 8.2209713582415134e-05, 4.6474338887492195e-05, 4.9315687647322193e-05, 0.00010468927212059498, 9.0765395725611597e-05, 5.410956873674877e-05, 8.5289750131778419e-05, 3.0579180020140484e-05, 4.1703850001795217e-05, 4.6691522584296763e-05, 6.7818589741364121e-05, 4.1282404708908871e-05, 7.4299452535342425e-05, 2.6560945116216317e-05, 5.1583014283096418e-05, 4.531420927378349e-05, 5.1503007853170857e-05, 4.3075382563984022e-05, 8.6703388660680503e-05, 1.8258568161400035e-05, 5.0889419071609154e-05, 5.8665489632403478e-05, 7.19884701538831e-05, 9.0136272774543613e-05, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[1*3*3*51] = { 
  /* [0][0][][] */ 41,109,41,74,-17,23,41,28,-127,-74,39,-1,-16,-69,127,-127,8,40,27,45,-58,37,-70,53,-61,45,68,36,25,-99,-67,46,-85,3,-77,-43,-55,31,-31,-15,9,44,15,-14,-29,55,-76,8,40,29,41, 29,127,68,89,-86,6,25,103,-31,-104,127,-127,-121,-71,21,-15,67,30,5,127,-46,73,-127,-35,-31,32,89,36,57,-110,-48,37,-101,33,-127,-29,-127,-32,-28,-20,67,57,37,85,-73,-97,-29,42,45,51,127, -36,44,-38,40,24,8,-32,-48,-84,4,-5,56,39,-57,69,-81,-30,-51,-20,-50,-25,-35,45,88,-41,-56,-19,-35,-38,-89,-13,7,-8,-22,-22,-29,3,21,16,-6,-1,8,-32,-60,-6,-19,-30,-11,-6,-6,-37, 
  /* [0][1][][] */ 62,46,46,58,-80,22,30,127,-56,-68,15,-107,-107,-68,-18,-74,10,39,8,38,-97,50,-67,-35,25,50,37,24,58,-83,-88,39,-116,40,3,-51,-35,12,-24,-100,20,50,1,15,-76,16,66,-43,41,27,20, 127,57,90,127,-127,-14,127,86,-22,-127,43,-106,-104,-127,-105,-106,127,127,127,70,-127,127,-99,-49,107,94,127,127,127,-127,-127,127,-115,127,-108,-127,-97,127,-127,-127,87,84,127,127,-127,70,127,127,127,127,78, -73,71,-40,14,1,29,-62,92,-48,16,-7,-70,-58,11,20,-69,-30,-63,-86,-10,-84,-32,11,-5,22,-77,-45,-60,-62,-89,-87,-1,-49,-4,2,-38,-8,-47,9,-55,-17,26,-57,-29,-22,-127,0,-83,-21,-40,-12, 
  /* [0][2][][] */ 41,57,61,-18,36,55,40,-4,-50,-33,-4,-50,-13,-30,-2,-85,-14,-9,17,117,-93,24,-39,127,2,21,5,24,-5,-80,-8,-38,-48,44,15,-44,18,9,-48,14,41,6,18,17,-38,61,4,47,4,20,47, 23,-6,127,25,26,127,36,118,-9,-65,18,-99,-127,-74,-33,-119,53,-31,58,-55,-30,59,-70,67,127,127,11,53,-3,-78,-61,-35,-127,64,-44,-92,49,29,-63,-29,127,127,39,73,-102,80,-27,85,14,41,111, -15,86,-51,-19,25,24,-43,-1,-58,0,-15,5,27,-25,3,-52,-31,13,-43,89,-55,-28,-4,101,-18,-90,-28,-46,-30,-42,-5,-29,-20,15,8,-9,-18,-29,9,24,-3,-56,-22,-20,-21,-27,27,-4,-11,-22,8, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant37_scale = { 51, { 0.0049826465547084808, 0.0048629231750965118, 0.0039911265484988689, 0.0042492272332310677, 0.0060846158303320408, 0.010006646625697613, 0.0070104077458381653, 0.0039698733016848564, 0.0034560582134872675, 0.0034211257006973028, 0.0099693285301327705, 0.0027790882159024477, 0.0043161925859749317, 0.0061055552214384079, 0.0072758202441036701, 0.0030815734062343836, 0.0054430584423243999, 0.006740211509168148, 0.0066328947432339191, 0.0041679921559989452, 0.0026077772490680218, 0.0046239173971116543, 0.0027717400807887316, 0.0049356073141098022, 0.0080681797116994858, 0.003874101908877492, 0.0037716585211455822, 0.0069239400327205658, 0.006602815818041563, 0.001741118379868567, 0.0030199368484318256, 0.0081960614770650864, 0.0031196912750601768, 0.0068475636653602123, 0.0093413367867469788, 0.0050007430836558342, 0.0037552746944129467, 0.009597431868314743, 0.0067294873297214508, 0.0037672640755772591, 0.0072640003636479378, 0.005050483625382185, 0.0073555936105549335, 0.0056475149467587471, 0.0049454034306108952, 0.0061647077091038227, 0.020162427797913551, 0.0063181822188198566, 0.0069778547622263432, 0.0052162478677928448, 0.0033128366339951754, } };
const TfArray<51, int> quant37_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(16) int32_t tensor_data38[51] = { -284, -14164, 490, -1309, 19539, -5323, -112, -10438, 18888, 23080, -819, 30223, 23295, 25063, 388, 33781, 3001, 323, 1060, -685, 32128, -876, 24746, 3599, -3168, 994, 5073, -220, 2179, 48623, 24948, -629, 27558, -8593, 15603, 25563, 19308, -985, 19098, 17791, -8719, -446, 2179, 268, 28509, -444, -4546, -719, -666, -2458, -3145, };
const TfArray<1, int> tensor_dimension38 = { 1, { 51 } };
const TfArray<51, float> quant38_scale = { 51, { 0.00010058725456474349, 9.8170341516379267e-05, 8.0570927821099758e-05, 8.5781342932023108e-05, 0.0001228332839673385, 0.00020200933795422316, 0.00014152271614875644, 8.014187915250659e-05, 6.9769230321981013e-05, 6.9064029958099127e-05, 0.00020125597075093538, 5.6102886446751654e-05, 8.7133208580780774e-05, 0.0001232559880008921, 0.00014688073133584112, 6.220931390998885e-05, 0.00010988182475557551, 0.0001360681199003011, 0.00013390167441684753, 8.4141407569404691e-05, 5.2644543757196516e-05, 9.3345406639855355e-05, 5.595454786089249e-05, 9.9637647508643568e-05, 0.00016287650214508176, 7.8208489867392927e-05, 7.6140415330883116e-05, 0.00013977715570945293, 0.00013329445209819824, 3.5148856113664806e-05, 6.0965023294556886e-05, 0.00016545811377000064, 6.2978819187264889e-05, 0.00013823529297951609, 0.00018857838585972786, 0.00010095258039655164, 7.5809664849657565e-05, 0.00019374830299057066, 0.00013585163105744869, 7.6051699579693377e-05, 0.00014664212358184159, 0.00010195672075496987, 0.00014849116269033402, 0.00011400929361116141, 9.9835408036597073e-05, 0.00012445013271644711, 0.00040702932165004313, 0.00012754841009154916, 0.0001408655516570434, 0.00010530308645684272, 6.687793938908726e-05, } };
const TfArray<51, int> quant38_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[51*1*1*51] = { 
  /* [0][0][][] */ -18,-40,-22,-4,33,25,48,22,12,-4,-112,78,-31,-4,-41,26,-47,-44,127,-21,75,-50,7,-44,98,39,-58,31,-87,41,-36,7,-3,5,33,-6,20,28,54,-55,64,-14,22,24,-53,22,119,38,-102,-86,-48, 
  /* [1][0][][] */ -71,106,-127,-3,115,71,-17,-9,-55,74,81,48,-1,-68,11,22,-42,-12,2,-12,-84,-16,-94,-10,-60,42,-91,-24,-58,-63,46,-50,8,21,-7,-37,30,37,-69,-10,-28,-19,-8,0,104,-4,-75,15,45,114,-76, 
  /* [2][0][][] */ 16,53,47,3,-127,37,22,14,13,-21,-16,-16,-43,-53,-40,-46,20,6,9,-57,-31,70,-24,-39,109,-38,-9,-42,-2,17,-30,-43,-17,21,-27,-10,101,-40,15,29,36,4,-27,16,16,26,111,-23,-7,-31,21, 
  /* [3][0][][] */ -11,-30,-15,39,53,27,127,-2,-24,-5,-5,-6,10,-14,-4,4,37,5,25,-25,-6,34,4,-42,-8,-10,0,-21,-37,40,-4,-3,-6,-11,-17,7,-45,49,4,-30,8,-15,-31,21,-13,13,-23,17,-30,-39,35, 
  /* [4][0][][] */ -59,-64,-58,-13,-18,-7,91,60,66,-39,44,13,-23,25,84,15,-78,127,-69,-54,-35,115,23,20,17,-41,-75,9,-8,-23,18,27,20,-55,47,-21,77,-8,-48,-37,-18,14,-84,-12,88,17,-22,110,107,36,-89, 
  /* [5][0][][] */ -11,-14,47,-12,44,55,-12,-54,20,18,-31,11,10,-11,-8,4,26,-51,2,55,-2,5,-36,127,14,2,-10,0,24,9,-31,12,-8,-14,-17,-33,15,-9,9,19,40,10,21,-25,-11,4,-37,80,-32,-10,24, 
  /* [6][0][][] */ 113,-27,22,-79,-43,127,106,-20,-24,-34,-54,-12,-26,2,-30,-10,-54,-34,-23,6,0,-50,-48,46,-29,8,7,10,-51,28,4,72,-49,-5,-81,-9,8,-10,-20,-1,-38,27,-3,57,3,3,-11,39,-47,22,-60, 
  /* [7][0][][] */ -127,-64,29,20,62,26,-3,10,-42,-11,15,74,70,-50,9,-56,26,12,-28,-43,85,60,5,-67,-29,14,56,104,-48,11,66,10,-20,12,-83,-3,92,50,-19,-78,13,40,-11,-72,-66,6,-16,8,31,-74,20, 
  /* [8][0][][] */ 58,-57,20,33,42,-62,13,44,-68,-31,-58,27,47,17,18,-23,31,-21,-49,-14,39,2,-15,-17,-2,-20,-36,-43,-40,63,-49,53,-13,27,12,-32,20,-21,30,15,-55,5,-21,-23,27,39,127,5,-37,9,-33, 
  /* [9][0][][] */ 28,97,-21,26,-80,-30,11,7,0,55,56,-58,35,-116,-35,27,-22,-39,17,-41,77,-4,-57,-68,-70,42,-11,66,127,93,7,4,55,-11,35,5,-53,46,61,-52,2,97,-22,-69,-91,17,8,9,-25,2,-3, 
  /* [10][0][][] */ -14,-9,10,-24,53,39,-10,-33,-39,-4,-20,-23,-16,-10,26,-22,11,-9,-28,6,-33,-5,10,-35,-35,1,-22,-9,127,48,-12,36,18,-6,-12,26,-18,5,-33,-60,-35,-2,-2,-6,-8,-15,65,0,21,-17,-13, 
  /* [11][0][][] */ 0,23,-63,127,80,15,-42,-31,-18,-26,-99,-3,-24,-48,-11,-24,-31,33,-43,-35,35,-40,103,26,104,-11,-63,42,59,58,36,83,29,52,-1,-52,-93,-20,-30,-66,-89,-26,72,53,109,-11,25,69,36,-24,-10, 
  /* [12][0][][] */ 4,-14,16,-28,36,127,39,-4,-1,-51,9,66,39,-15,7,-1,8,-30,-11,47,20,-23,-29,-16,-34,-5,5,-13,-6,-34,-4,-22,65,-52,27,-30,-19,6,-15,-5,-24,21,17,-11,58,-24,-46,32,18,-19,4, 
  /* [13][0][][] */ 6,-24,126,58,6,-47,-65,107,-6,-37,28,67,127,-27,-43,68,3,-34,14,90,-29,39,35,55,17,-24,-30,-62,-32,-42,-21,-101,-26,-80,46,-82,4,6,13,-49,102,-77,-19,-19,37,-63,11,61,17,-46,58, 
  /* [14][0][][] */ 28,11,40,-91,24,41,62,-28,-22,-27,-29,-69,22,25,-18,-127,-74,37,24,-14,-120,-83,-6,40,117,87,31,-51,-110,45,58,-41,15,103,-108,3,-36,3,-41,-20,90,35,75,68,-72,29,42,-121,30,8,110, 
  /* [15][0][][] */ -77,-112,-42,8,27,127,16,46,-3,11,68,-8,7,-3,-11,42,107,-61,-35,-56,41,-1,42,19,-7,-12,46,55,-62,69,-50,18,-31,-47,43,48,7,-53,-56,-29,61,49,7,68,29,-20,14,-18,-15,40,20, 
  /* [16][0][][] */ 44,-3,53,-55,1,32,-8,-5,28,-73,-66,8,-36,4,-42,-41,39,64,56,29,6,10,21,-22,20,4,-2,127,114,39,65,-52,33,9,-60,-47,-2,23,-33,-4,-30,99,-61,78,-44,23,-12,-45,-103,8,0, 
  /* [17][0][][] */ 7,13,-69,-62,-1,91,36,49,-44,-2,-14,-74,53,-33,22,14,-127,58,85,14,-104,-40,-34,91,7,48,-90,68,4,34,-66,19,-16,-7,-5,-45,29,24,-65,-88,-14,-43,23,-8,-121,-20,-46,61,-26,47,107, 
  /* [18][0][][] */ -31,37,-49,-25,-1,-90,64,-50,-5,9,-47,-16,30,97,-14,22,0,-13,36,31,-41,107,-65,8,3,18,43,7,2,23,-27,-60,4,-94,22,-30,16,-9,-89,-70,-68,27,80,51,11,-25,64,-83,127,4,-11, 
  /* [19][0][][] */ 7,-7,-16,-1,-5,17,-13,-9,-3,-22,6,2,-29,8,-1,-1,-15,16,-32,-28,-3,-21,5,-4,16,127,87,23,6,28,-31,-25,34,2,-2,-6,-4,8,-11,-13,1,13,15,8,13,10,31,-4,8,10,46, 
  /* [20][0][][] */ 2,-6,31,7,-73,28,1,-73,24,33,-51,-37,-2,65,-31,26,-14,13,80,-8,-1,-93,-3,-5,-6,-43,50,34,4,47,-9,-5,-87,93,-28,33,-43,-5,29,-20,27,-34,18,127,16,-2,42,1,-34,-38,-33, 
  /* [21][0][][] */ 0,-74,27,-13,14,-73,-20,-68,-3,42,17,10,-6,-77,-42,-20,-58,-52,1,-49,35,29,-20,-8,-18,-12,-43,12,-23,16,76,93,-12,-25,-32,54,32,52,31,50,12,-80,24,41,-12,21,54,42,127,32,50, 
  /* [22][0][][] */ -6,-22,65,25,7,-3,90,-36,56,-37,-9,17,-33,-6,4,-26,14,34,23,2,15,-9,23,-16,2,-18,53,-81,36,25,-7,-8,23,36,-47,-25,-35,3,22,-14,-3,-13,127,4,-45,48,9,1,-3,42,-2, 
  /* [23][0][][] */ 77,-68,63,-96,-18,-127,0,-72,16,-22,46,32,-2,66,39,16,-45,-24,-44,-65,60,107,14,-19,0,1,-43,-54,110,-51,-65,52,-70,-14,-86,52,14,0,-118,-52,-20,17,7,-89,-22,24,-69,22,-88,-49,32, 
  /* [24][0][][] */ 1,40,24,9,-11,51,24,-7,20,-3,39,32,5,45,-39,69,-9,-30,16,77,-4,-79,-33,127,-57,-4,-73,6,-71,125,-32,-56,127,-1,-26,-21,-61,-2,4,11,92,20,82,77,-96,18,28,4,2,-61,-15, 
  /* [25][0][][] */ 38,-19,-10,19,-127,4,-53,-25,-11,-40,8,-21,39,34,49,62,103,58,-62,-34,-5,-52,61,-67,-20,20,-3,25,-61,13,-9,85,-53,-20,15,-52,-11,-64,-50,38,-27,-58,98,-63,-24,-47,84,92,119,-9,-55, 
  /* [26][0][][] */ -1,11,-43,-15,-5,-90,16,-11,22,27,-20,1,-76,-15,28,41,28,11,32,-74,9,-24,33,-66,-35,6,-7,11,-6,-60,15,16,-34,-44,-18,85,58,25,127,-38,-32,-10,26,-8,46,15,-10,11,5,35,-80, 
  /* [27][0][][] */ 52,15,-55,-29,34,61,41,4,-39,9,6,49,60,17,66,40,31,18,86,34,-2,54,-32,-18,2,127,-92,39,68,-34,41,-30,20,12,-52,-41,-25,-11,14,-21,-21,-8,-25,22,7,11,3,29,1,-42,-50, 
  /* [28][0][][] */ 9,-9,4,107,-89,-114,28,-90,-60,30,22,-79,-127,-84,35,57,-2,-76,13,29,-75,-71,50,-24,-11,104,-44,42,-4,58,47,-43,-37,43,38,23,-66,124,-32,77,-80,-63,-68,-39,53,61,-8,-35,-35,-41,-19, 
  /* [29][0][][] */ 6,-56,78,-81,-95,-25,4,-45,21,7,-61,59,-4,-9,0,-34,62,127,-8,-24,-38,73,32,-44,-40,-35,-33,103,-99,79,-2,-16,-25,-21,14,-6,-32,126,49,29,-9,-27,45,12,-45,11,28,23,77,27,37, 
  /* [30][0][][] */ 25,-87,80,20,-3,-12,-52,-44,11,14,18,7,-64,29,-16,23,79,3,17,-4,63,-31,-35,30,-47,12,49,-6,30,77,127,15,52,70,45,72,-59,-28,85,26,-49,32,-32,14,62,-3,58,15,12,-27,11, 
  /* [31][0][][] */ -16,-6,-4,-27,-2,127,-29,20,18,27,7,29,4,8,-3,17,13,-4,16,12,9,41,5,-11,6,-2,34,14,-14,8,21,6,6,-19,45,1,43,2,-2,-22,76,-14,-10,19,-16,-22,-16,14,7,20,-32, 
  /* [32][0][][] */ -12,-90,31,-53,-7,-41,12,-62,-74,48,70,35,-21,-100,39,90,-45,127,68,99,-48,38,-117,34,-38,15,-6,37,-1,-60,-1,-72,-22,-36,-25,61,116,-25,77,30,18,-58,-35,-33,24,-30,65,-65,16,-82,-22, 
  /* [33][0][][] */ -22,-24,8,-14,90,31,-18,-35,-28,15,-20,6,-28,-24,23,-3,0,3,-21,-1,-8,-18,-31,-90,51,10,26,38,-52,84,-57,53,-24,-28,77,57,-127,-20,105,-37,-36,13,69,43,-49,-32,-47,19,54,-76,42, 
  /* [34][0][][] */ -19,24,-61,49,-25,-6,-27,81,21,37,85,8,51,-57,18,117,-32,20,24,26,-56,-38,18,76,-66,-8,49,-28,-14,-34,17,-77,71,35,123,-8,48,57,37,-39,1,-123,-13,-35,79,0,70,-22,127,38,-69, 
  /* [35][0][][] */ 39,-112,46,44,76,1,-45,6,-127,0,-79,-28,-52,-100,-74,76,-80,117,18,-83,70,-110,-35,-31,-27,94,-54,-20,27,-64,-49,6,54,69,35,-32,-56,2,19,-48,26,25,1,40,13,58,-104,33,-26,-57,53, 
  /* [36][0][][] */ 0,-44,34,2,5,-11,-18,-5,-50,-56,-35,39,-29,-15,-73,6,8,-31,0,37,4,61,17,35,13,127,-22,-20,-23,-2,-8,-3,34,13,17,32,-4,2,16,14,-3,-3,26,29,-50,20,-43,-29,-26,-17,-26, 
  /* [37][0][][] */ 77,-14,-45,51,54,-24,-127,-18,-3,-35,-7,1,-28,-71,43,-38,-28,90,45,-12,25,69,35,-27,-18,3,34,40,-70,30,27,60,14,47,0,-22,-29,20,35,-37,16,-7,-62,-43,2,25,31,67,9,66,0, 
  /* [38][0][][] */ 12,-53,84,73,-54,12,-27,-27,42,-107,-63,5,-60,39,99,-6,-59,-16,8,13,7,-83,-57,-34,-28,-2,-6,-79,14,-26,53,-35,-114,-46,17,-46,16,40,-13,-3,-54,24,22,-27,127,-33,44,-1,-17,-106,77, 
  /* [39][0][][] */ 127,-15,-32,4,59,-2,-4,-21,-49,43,2,45,-46,-21,-26,-61,31,22,114,29,-7,20,43,-23,15,-4,107,22,-29,75,-21,-59,31,32,-53,9,0,-8,-63,-26,15,-9,47,-27,-35,46,13,-31,-12,-22,15, 
  /* [40][0][][] */ 127,-114,-26,-106,75,-63,18,-14,43,-13,3,115,61,23,-78,5,54,-86,18,-26,13,23,-53,96,120,17,82,41,6,-18,-11,-51,85,65,24,-124,-35,54,118,-90,-117,12,5,-24,-44,11,-63,28,-13,-46,52, 
  /* [41][0][][] */ 10,-28,-4,-7,5,1,21,-45,-25,-35,-21,-2,-4,32,-9,2,88,1,-10,30,-8,-31,-35,-25,-11,-16,11,-32,40,-17,-14,18,-32,62,13,3,-35,14,26,-72,-40,-11,127,3,-24,-3,-21,-9,12,15,-60, 
  /* [42][0][][] */ -56,-10,-29,-26,30,12,31,0,-25,71,-13,-2,56,63,-32,-30,9,-1,20,-5,19,28,-125,33,-92,6,-38,-28,13,42,-24,-15,12,12,-22,77,9,41,68,-38,15,62,-7,87,127,14,-5,-34,-11,-54,-3, 
  /* [43][0][][] */ -1,-115,66,-101,-35,55,14,44,-45,14,64,-94,122,5,6,23,73,54,68,56,-27,-57,43,-10,-106,30,-48,-1,-3,91,-63,5,-49,60,-18,122,-23,92,127,32,-110,68,52,-106,2,-26,91,-26,-44,-100,-19, 
  /* [44][0][][] */ 116,28,-71,-11,57,-86,-93,-7,67,91,-7,-21,-71,76,-35,-48,76,5,127,-23,-108,-90,19,-51,34,-34,-16,109,38,15,52,-5,-41,-98,43,-39,43,-81,-42,-24,-37,-9,-89,-28,48,-3,21,39,35,-60,-49, 
  /* [45][0][][] */ -4,53,67,-23,-33,-15,6,18,0,35,-7,-30,55,80,-27,58,-63,-30,127,-29,67,4,7,31,-9,-32,35,-21,-21,27,10,-19,-2,38,18,28,-11,22,18,17,-10,75,17,22,-5,-27,50,16,-2,-7,-23, 
  /* [46][0][][] */ 26,-3,-43,-1,-20,37,39,-79,-11,-95,-45,-84,-31,54,38,-18,127,-18,15,-23,92,37,-32,-5,-48,-4,8,14,-61,-23,-42,-53,30,57,-30,-30,-41,3,-37,-29,-4,53,25,-29,-43,18,9,111,-26,16,0, 
  /* [47][0][][] */ -40,-87,-1,-16,71,1,-9,-7,-17,-11,-76,70,-127,24,-22,35,29,36,27,0,37,22,-28,-52,58,-16,-26,32,-34,-79,64,8,40,40,46,35,-44,103,-13,-64,2,-15,15,55,-23,-44,44,25,-67,-20,26, 
  /* [48][0][][] */ -38,-5,10,39,28,34,-51,41,-11,32,-6,40,-16,12,15,35,-46,-32,-33,15,-2,35,-31,25,-110,12,20,105,-6,30,-71,6,-45,55,-59,-106,-44,0,-4,1,-35,-19,80,37,73,86,127,3,-11,-31,20, 
  /* [49][0][][] */ -91,71,-28,-56,-68,-7,-52,-34,28,8,-15,23,27,5,-18,67,-28,-29,85,85,-31,15,68,-17,30,-73,-58,47,79,43,-11,-51,82,-84,-29,47,113,102,70,-41,-70,-4,18,127,-56,-8,108,-34,-32,66,87, 
  /* [50][0][][] */ 58,114,8,7,25,42,65,-26,-43,8,15,15,52,16,-24,-13,15,14,-25,96,15,-32,-16,40,-39,8,45,-17,11,24,-4,31,-9,73,12,54,16,-38,-33,-34,-88,-56,7,29,4,27,-21,18,-34,-6,127, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant39_scale = { 51, { 0.0027892848011106253, 0.0038357737939804792, 0.001552499714307487, 0.0071254563517868519, 0.0037038535811007023, 0.0021916718687862158, 0.0021111012902110815, 0.0022379406727850437, 0.0036950311623513699, 0.0011767562245950103, 0.0067043718881905079, 0.0045469067990779877, 0.004655265249311924, 0.0030103919561952353, 0.0032416556496173143, 0.0021131646353751421, 0.0030884705483913422, 0.0022526516113430262, 0.0028110570274293423, 0.0051583000458776951, 0.006581487599760294, 0.0034860752057284117, 0.0025449576787650585, 0.0027044299058616161, 0.0032596744131296873, 0.0023658343125134706, 0.0016581007512286305, 0.0029416990000754595, 0.0014449023874476552, 0.0040504760108888149, 0.0048300572670996189, 0.0049027660861611366, 0.0031501157209277153, 0.002796924440190196, 0.003519540186971426, 0.0018625411903485656, 0.0041958675719797611, 0.0068930634297430515, 0.0034728262107819319, 0.002886556088924408, 0.0020336152520030737, 0.0040737506933510303, 0.0030987276695668697, 0.0026730566751211882, 0.0029995245859026909, 0.0068681971170008183, 0.003103284165263176, 0.003337174654006958, 0.0026418676134198904, 0.0026336826849728823, 0.0026100571267306805, } };
const TfArray<51, int> quant39_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[51] = { 4286, 18940, 38343, 1168, 4284, 5926, 32949, 17649, 4541, 38378, 5763, -10635, -3419, 4788, 9987, 6825, 3816, 31474, 10359, -699, -389, 3592, 4309, 40573, -14071, 28686, 30793, -5168, 55636, 3150, -28086, -15764, 16725, 10412, -17348, 48979, 10367, 601, 30370, 809, -4412, 10413, -4390, 4537, 12429, -19404, 18550, 10643, 12659, -14204, -7292, };
const TfArray<1, int> tensor_dimension40 = { 1, { 51 } };
const TfArray<51, float> quant40_scale = { 51, { 5.2668281568912789e-05, 7.2428461862728e-05, 2.9314858693396673e-05, 0.00013454543659463525, 6.9937501393724233e-05, 4.1383937059435993e-05, 3.9862574340077117e-05, 4.2257601307937875e-05, 6.9770911068189889e-05, 2.2219934180611745e-05, 0.0001265943719772622, 8.5856328951194882e-05, 8.7902393715921789e-05, 5.6843306083464995e-05, 6.121010665083304e-05, 3.9901537093101069e-05, 5.8317615184932947e-05, 4.2535379179753363e-05, 5.3079391364008188e-05, 9.7400879894848913e-05, 0.00012427402543835342, 6.5825326601043344e-05, 4.805480784852989e-05, 5.1066021114820614e-05, 6.1550344980787486e-05, 4.467253529583104e-05, 3.1308856705436483e-05, 5.5546221119584516e-05, 2.7283167582936585e-05, 7.6482545409817249e-05, 9.1202884505037218e-05, 9.2575792223215103e-05, 5.9481619246071205e-05, 5.281253470457159e-05, 6.6457228967919946e-05, 3.5169174225302413e-05, 7.9227880632970482e-05, 0.00013015730655752122, 6.5575157350394875e-05, 5.4504991567227989e-05, 3.8399455661419779e-05, 7.6922027801629156e-05, 5.8511293900664896e-05, 5.0473619921831414e-05, 5.663810225087218e-05, 0.00012968777446076274, 5.8597328461473808e-05, 6.3013736507855356e-05, 4.9884696636581793e-05, 4.9730144382920116e-05, 4.9284040869679302e-05, } };
const TfArray<51, int> quant40_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*51] = { 
  /* [0][0][][] */ -20,88,-23,-2,6,7,-19,2,81,18,6,9,-13,8,36,75,-22,-27,-38,-33,-2,18,-11,-2,37,17,60,-59,17,-5,-5,0,-20,50,-59,-49,-34,-11,3,-32,-4,-21,4,-20,-39,-2,-23,-37,-7,-51,-18, 127,-33,127,127,-127,21,9,-4,36,77,25,-127,35,21,127,65,48,124,-18,28,-59,42,18,49,127,-114,18,-10,-92,90,-15,127,-20,-83,127,-30,51,-15,-66,72,78,-127,42,-29,-2,98,127,-120,5,51,15, 62,29,3,64,-53,8,-29,-10,127,51,40,-59,0,31,0,127,27,31,-30,5,-124,18,18,24,43,-41,69,-42,0,75,-3,5,-29,10,-60,-87,6,-28,-44,19,6,-104,-76,-55,-99,-3,52,-91,27,-12,-18, 
  /* [0][1][][] */ -23,27,8,-17,-33,-5,-46,-2,-30,-26,-11,7,11,13,-18,31,-14,-10,-4,8,-48,-45,-17,-10,-47,5,-5,6,3,61,-18,-33,-8,-95,-8,50,-16,-39,17,-7,20,-29,97,-35,-10,66,11,-76,-33,-10,-4, -15,-109,106,114,-68,73,127,-127,-28,70,102,-80,127,127,33,52,127,127,127,127,-21,127,127,26,36,-75,-19,70,-112,35,127,-1,127,-71,127,-127,127,127,-98,127,127,98,127,-127,-32,127,113,-50,127,127,127, -10,0,28,31,-62,40,44,-19,-60,11,26,-28,44,53,-35,59,45,79,13,106,-105,-16,42,-19,-72,-62,5,127,-127,127,13,18,34,-127,-6,0,53,37,-51,74,65,32,-97,-83,-16,122,27,-81,55,57,53, 
  /* [0][2][][] */ -5,127,-7,-49,-55,78,-14,27,85,-5,-103,-24,-12,-27,5,73,-21,6,-29,-34,0,-2,-34,-17,0,-6,76,-61,34,-38,3,-10,-23,14,2,-73,-23,1,-5,-28,-17,-1,-36,59,-82,-19,-50,-59,-23,-4,6, 6,-40,36,-52,-47,127,116,-55,-15,127,127,-73,23,12,-40,73,-12,-47,75,-41,-127,13,-20,127,-42,-127,60,78,-117,82,6,35,42,-98,37,-26,-45,-14,-127,-35,-26,54,-51,-34,-62,79,11,-91,-1,-27,60, 17,18,-16,-73,-73,104,44,-22,110,58,45,-37,-23,-6,19,121,-13,-17,38,-39,-108,-13,-38,71,-35,-79,127,47,-25,39,3,-17,-28,-32,33,-52,-55,21,-52,-53,-12,68,28,43,-127,-12,-32,-127,-40,30,24, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant41_scale = { 51, { 0.0073325070552527905, 0.0054608290083706379, 0.0089237987995147705, 0.0042286715470254421, 0.0039290790446102619, 0.0050179632380604744, 0.0072131846100091934, 0.0059881103225052357, 0.0050308904610574245, 0.006488205399364233, 0.0056835953146219254, 0.002342987572774291, 0.0076710558496415615, 0.0053958338685333729, 0.0066959867253899574, 0.0037713004276156425, 0.0068476428277790546, 0.004498516209423542, 0.0073599787428975105, 0.0065950476564466953, 0.0026967935264110565, 0.0066378237679600716, 0.0099464580416679382, 0.0064509422518312931, 0.0062700118869543076, 0.0030390673782676458, 0.0087024001404643059, 0.0048415055498480797, 0.004697795957326889, 0.003462526248767972, 0.011411828920245171, 0.011093943379819393, 0.0083507588133215904, 0.0031902329064905643, 0.0050826976075768471, 0.0074864006601274014, 0.0069220336154103279, 0.007361170370131731, 0.003018601331859827, 0.0066493852064013481, 0.004735275637358427, 0.0060557187534868717, 0.0067333667539060116, 0.0045575336553156376, 0.0044248015619814396, 0.0025823633186519146, 0.0036630420945584774, 0.0030890472698956728, 0.00912479218095541, 0.0062042144127190113, 0.0052178283222019672, } };
const TfArray<51, int> quant41_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[51] = { 446, -47, -4898, -1612, 25092, -9644, -2078, 18536, -260, -11814, -8075, 39282, -4538, -5141, -2225, -13252, -1655, -2070, 251, -269, 21425, 957, 345, -4502, -247, 38302, -8135, -1811, 32476, -2678, -2650, -541, -883, 25475, 2978, 20711, 3768, 16, 30266, 935, -671, -2200, -4897, 21161, 17310, -8241, 934, 29372, 1233, -945, -1952, };
const TfArray<1, int> tensor_dimension42 = { 1, { 51 } };
const TfArray<51, float> quant42_scale = { 51, { 0.0001232458307640627, 9.1786394477821887e-05, 0.00014999248378444463, 7.1076116000767797e-05, 6.6040520323440433e-05, 8.4342646005097777e-05, 0.00012124023487558588, 0.00010064901289297268, 8.4559927927330136e-05, 0.00010905468661803752, 9.5530682301614434e-05, 3.9381269743898883e-05, 0.00012893619714304805, 9.0693945821840316e-05, 0.00011254710261709988, 6.3388557464350015e-05, 0.0001150961616076529, 7.5611700594890863e-05, 0.00012370757758617401, 0.0001108505020965822, 4.5328091800911352e-05, 0.00011156949040014297, 0.00016718148253858089, 0.00010842835763469338, 0.00010538725473452359, 5.1081078709103167e-05, 0.00014627118071075529, 8.137671829899773e-05, 7.8961224062368274e-05, 5.8198635088047013e-05, 0.00019181164680048823, 0.00018646859098225832, 0.00014036074571777135, 5.3621890401700512e-05, 8.5430707258637995e-05, 0.00012583249190356582, 0.00011634652764769271, 0.00012372760102152824, 5.0737082347040996e-05, 0.00011176381667610258, 7.9591191024519503e-05, 0.00010178538650507107, 0.00011317538883304223, 7.6603675552178174e-05, 7.437269960064441e-05, 4.3404732423368841e-05, 6.1568935052491724e-05, 5.1921146223321557e-05, 0.00015337081276811659, 0.00010428132372908294, 8.7702006567269564e-05, } };
const TfArray<51, int> quant42_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[51*1*1*51] = { 
  /* [0][0][][] */ 24,6,127,57,9,-59,15,-13,-1,-30,67,28,21,-2,53,4,70,8,-2,46,-28,-20,-28,10,-81,30,49,0,1,8,-18,29,-6,22,-11,-40,25,6,-1,-5,-46,-8,34,1,-47,-18,-35,-1,-7,15,13, 
  /* [1][0][][] */ 39,13,6,-47,1,8,-26,-51,-37,35,55,8,44,-34,28,-62,18,15,-30,-84,5,-18,127,-28,53,-45,6,42,31,-50,30,62,73,8,-38,-25,26,36,6,-17,-47,36,-17,-70,-50,29,16,-17,14,-42,-33, 
  /* [2][0][][] */ 63,78,-7,22,16,1,127,13,-59,-36,45,-15,-14,33,24,-7,2,62,0,-67,-3,-6,-16,43,66,-25,120,107,-59,-11,14,-33,-40,-10,-73,-8,-22,59,55,120,50,15,37,-28,-25,-23,26,-27,-41,50,-55, 
  /* [3][0][][] */ -4,28,2,8,-11,-64,22,2,-52,127,-8,26,-52,-9,4,8,3,26,43,16,14,-29,13,-19,11,-5,72,42,28,29,-7,73,18,-31,-19,-24,-17,29,36,-13,74,-18,59,-13,-62,7,17,8,4,-26,4, 
  /* [4][0][][] */ -26,-17,-34,-46,-19,-57,-57,12,-53,-3,0,-27,26,16,32,39,30,8,-17,65,-19,-33,-9,-5,21,-34,53,15,23,64,-9,127,-8,20,18,12,-10,17,-2,57,-6,-32,-31,15,-10,10,-6,-2,7,-15,10, 
  /* [5][0][][] */ -2,-13,20,17,28,18,76,7,-15,84,-15,-50,11,25,17,15,-66,-3,-38,127,11,19,93,-29,-9,41,1,9,-42,9,-2,-3,6,0,7,11,97,-5,-4,16,-32,8,-3,44,-33,-36,26,11,-46,-7,-30, 
  /* [6][0][][] */ 77,-13,40,-18,0,111,34,-3,31,15,-48,-31,-26,45,-6,-39,17,-48,26,8,-36,30,-9,51,-28,-12,-4,45,-76,41,-11,-82,58,-4,8,32,-10,-10,-26,-1,8,2,5,-1,-64,-6,13,-127,51,-43,89, 
  /* [7][0][][] */ 106,9,-19,-14,-26,118,53,59,97,-58,81,-64,-25,-12,-26,-59,-48,64,-32,119,21,44,16,-95,0,-41,127,8,10,-49,-30,-29,-78,-75,-56,33,-4,104,-9,-38,58,-20,14,-24,-69,23,-69,63,34,-29,-41, 
  /* [8][0][][] */ 37,38,-95,-34,65,-19,-8,-127,12,-16,9,78,14,-70,76,-28,-127,-27,-49,35,-9,64,26,-84,-78,-15,-37,48,8,32,28,107,-6,-26,-7,5,-4,80,20,75,79,-65,-52,-99,31,24,86,22,-69,-39,7, 
  /* [9][0][][] */ 68,19,33,-17,-16,-71,-9,-3,-28,-64,-19,84,32,73,-54,-2,10,82,-26,-84,23,-119,-33,-19,-30,63,-118,26,-70,-11,-29,118,28,63,23,48,8,-14,-19,21,-55,25,8,-15,-29,3,48,-37,127,75,-66, 
  /* [10][0][][] */ 47,35,-63,-7,4,20,127,-51,62,-10,33,34,66,9,-17,-71,2,-32,38,52,15,-18,40,53,-18,-118,-25,82,35,4,-26,-39,33,-42,-30,-66,16,-29,-52,-23,2,21,10,-36,-15,15,-3,-11,-41,-57,-41, 
  /* [11][0][][] */ 54,40,13,127,-5,14,-31,-13,49,99,26,-39,-13,52,-27,115,65,-79,35,-48,16,-8,-1,-16,-45,-24,105,52,-41,-28,74,2,-49,13,-34,-30,-31,40,5,76,-83,-6,4,15,19,-36,27,30,-49,-47,80, 
  /* [12][0][][] */ 96,20,127,-113,59,21,63,-45,-62,53,-24,-28,-1,31,10,-1,108,-34,-39,-1,-64,7,-24,113,-43,-55,-64,-29,-19,-41,27,-86,-45,2,29,-36,-16,-17,-89,-10,54,-6,-56,39,-38,-27,29,49,0,39,20, 
  /* [13][0][][] */ 37,42,-9,-46,23,41,-16,-20,-31,31,10,15,-12,18,14,-18,44,-12,1,20,-13,-6,-3,-23,19,-8,34,40,-22,-13,5,-45,-26,-64,-61,-13,-13,-13,11,32,19,6,4,11,15,-35,44,-28,127,-13,-58, 
  /* [14][0][][] */ -16,49,98,-30,62,42,54,-68,-23,-48,9,89,-27,-68,2,12,-36,-82,-30,-66,11,70,30,-75,73,94,-1,34,-46,55,14,67,47,-17,89,102,20,-127,-11,-29,16,-12,88,-70,41,15,-74,44,-1,-13,59, 
  /* [15][0][][] */ 29,-12,-5,-27,-16,-39,1,13,35,19,-19,65,28,37,-16,19,7,-15,-52,1,33,-42,10,11,22,73,11,5,52,-42,11,-64,-17,-19,-25,-34,16,53,-38,127,-17,-11,36,-15,-5,-30,1,-11,-8,-14,-7, 
  /* [16][0][][] */ 6,35,31,7,-33,-27,90,-40,-40,103,23,-32,54,57,5,-57,104,-41,-39,93,-12,9,-91,28,31,7,68,59,-27,15,23,-8,-27,-27,-57,-5,33,32,-21,-127,2,14,19,-20,-56,6,103,-55,17,30,-36, 
  /* [17][0][][] */ 6,-9,-5,80,5,15,-26,-1,-4,-23,-37,0,70,-22,31,-2,-50,51,40,-50,-47,127,120,7,5,9,-73,23,8,-42,41,102,4,-21,37,-59,-101,-1,-93,117,-15,-39,26,65,3,89,-102,14,-18,-8,-46, 
  /* [18][0][][] */ -50,28,14,-16,-44,-89,50,23,29,90,18,32,-30,40,21,-127,25,-4,-17,70,7,56,-5,-4,2,-41,55,-8,60,18,-29,33,-34,4,-50,-71,-36,-34,-4,20,-28,87,9,5,55,19,29,-48,10,70,-9, 
  /* [19][0][][] */ -17,-28,-34,30,-32,13,31,19,11,-29,6,27,127,21,-55,28,-98,53,-28,28,-15,-46,15,-7,30,12,73,34,41,30,38,-1,-36,-31,31,26,-16,5,-6,41,59,-24,8,12,46,-7,1,17,35,-28,-34, 
  /* [20][0][][] */ -41,6,-61,19,1,-6,-96,7,36,-23,-22,-40,62,-6,3,-39,100,-17,-49,-11,-8,35,-90,-2,0,-9,-24,89,-87,24,27,-14,27,-41,-15,-48,127,70,1,51,0,-26,-32,-3,-54,-2,-12,-35,-22,-15,3, 
  /* [21][0][][] */ -33,35,-84,-32,6,-59,-90,23,-18,4,127,76,5,25,55,59,-1,-11,44,-28,-18,-12,-53,36,-23,18,-71,17,65,-92,16,86,22,-40,0,27,50,-36,50,-12,-32,-22,46,-32,-10,-17,11,10,44,24,65, 
  /* [22][0][][] */ -17,7,72,15,10,-13,30,-37,45,1,-3,-28,-11,-12,-33,87,-24,-14,-6,-20,21,38,61,35,-24,-70,127,6,10,-46,42,-60,80,36,11,-37,44,-16,4,-23,-12,-3,-28,29,20,-57,-14,-14,1,-30,-29, 
  /* [23][0][][] */ 108,28,58,14,3,-1,0,-62,-77,-11,-22,15,-13,35,-44,-55,-30,1,-23,21,-52,-6,-12,4,20,-30,22,91,50,33,27,-1,-25,-33,-50,4,127,9,13,-7,7,5,4,-12,-29,-9,-1,-1,23,4,41, 
  /* [24][0][][] */ 5,10,-47,-59,91,-52,-78,20,-89,42,66,-62,59,29,36,25,-101,-82,39,116,-46,13,-61,27,-21,30,0,29,78,-89,92,-51,-28,-65,-88,-46,126,-26,-33,77,-100,-63,127,39,9,32,54,-10,81,-48,30, 
  /* [25][0][][] */ 82,12,-31,-51,-8,6,91,-44,29,-50,52,-42,-24,-6,42,56,-6,-34,-20,-34,-16,4,36,-46,17,14,8,17,42,11,-7,38,20,-14,-49,-10,64,11,92,22,-1,-16,9,-22,45,-20,-127,24,69,24,-47, 
  /* [26][0][][] */ 41,-2,-50,11,37,0,-9,15,-9,48,-9,66,9,5,56,59,25,1,66,11,-6,47,6,-32,-50,10,-58,2,49,35,38,54,-127,-49,21,-18,-29,98,-91,-69,-50,-77,85,-16,4,86,-11,-20,68,-38,-34, 
  /* [27][0][][] */ -92,11,-71,-19,85,-113,-70,78,-19,39,82,89,-61,40,-1,12,47,-38,-21,0,3,-6,-7,-10,30,26,14,66,11,6,-34,-11,11,75,40,-127,-42,9,87,-25,-54,30,-18,-114,-45,19,-34,63,-26,-39,-66, 
  /* [28][0][][] */ 0,-13,36,77,50,-35,-1,55,-26,14,35,22,-5,4,2,-17,52,26,23,-31,23,12,-40,-3,127,-26,-84,28,14,64,-19,19,-43,-6,-24,-12,43,-1,-6,2,-55,4,10,-33,-10,15,27,5,-28,-22,-21, 
  /* [29][0][][] */ -51,-44,-55,10,44,11,86,-52,-91,-33,3,-41,71,39,56,-1,-3,-29,127,-13,67,-68,-1,-124,-14,-26,-26,-5,15,-26,-64,-127,-9,-43,41,-1,-17,-49,11,16,52,11,-50,6,-71,-59,-14,-42,-37,9,26, 
  /* [30][0][][] */ 22,40,76,-82,16,125,32,3,55,118,8,-56,-32,-11,61,-88,13,-35,53,-57,10,21,46,-103,17,-42,71,73,-39,77,-28,33,-8,-38,-119,32,52,30,111,4,-30,94,13,127,85,-100,105,-7,10,40,95, 
  /* [31][0][][] */ 32,-31,-40,-28,-20,-127,-57,-38,54,-1,-2,-28,-32,-5,-40,-11,-26,43,20,22,-11,-40,-4,17,-7,55,10,4,-90,-5,-40,-7,-53,-3,-18,4,63,-18,13,10,40,-9,2,-32,44,42,25,-46,-10,39,-41, 
  /* [32][0][][] */ -63,18,-46,-28,84,69,-35,-75,17,95,59,-28,24,73,-18,-103,-17,-94,-39,-58,4,4,61,-21,-47,90,59,44,75,14,87,-15,127,-71,-32,62,74,31,-18,-53,-9,19,-9,-9,6,-10,-5,2,31,27,11, 
  /* [33][0][][] */ -63,31,-18,15,-13,-21,-43,37,-30,33,45,-15,30,-10,-50,-29,40,1,-25,10,17,-1,127,113,11,12,112,11,31,-9,15,-27,-28,-36,-46,-1,30,-19,-28,6,24,1,-4,-23,0,9,-85,-4,14,-74,-2, 
  /* [34][0][][] */ -94,-30,-94,18,-19,-126,-18,-22,-37,-81,11,-21,-63,-11,6,6,45,-127,9,24,11,32,0,33,0,51,-75,-14,6,3,44,5,-45,9,26,85,-45,57,6,24,0,17,11,36,11,9,-53,-55,56,27,-1, 
  /* [35][0][][] */ 6,44,86,34,-21,-12,89,-63,-23,51,37,-69,34,-73,21,-41,-51,29,13,-16,-32,-31,-52,-29,9,-51,32,12,-54,80,-7,-35,-26,-75,-74,-25,-59,-14,-16,127,-18,31,14,-55,-36,-38,17,80,90,-57,5, 
  /* [36][0][][] */ -8,36,56,-112,-45,-39,85,96,-78,38,55,110,26,117,22,-22,10,-58,26,21,-57,8,28,-29,-57,13,47,34,7,31,25,-95,6,-45,-49,-32,22,-15,75,6,108,34,7,-31,-26,-27,-6,-30,-127,83,102, 
  /* [37][0][][] */ 100,-15,21,6,7,-29,35,7,72,-13,-21,28,11,-36,30,-5,-77,37,-55,-8,42,92,-127,-4,72,50,-124,-65,-66,1,45,67,22,26,-50,40,36,-41,-11,-96,75,35,35,-49,-20,-16,-68,-60,41,-12,-9, 
  /* [38][0][][] */ 7,-25,52,8,-43,56,18,-42,15,-50,-8,-19,-45,-58,-10,-6,-68,31,125,-62,-9,62,-26,-21,-28,31,-2,7,101,-22,127,86,30,-25,-19,-14,46,10,-8,65,15,24,5,57,23,-12,56,-33,-67,-26,-73, 
  /* [39][0][][] */ -19,45,19,-34,48,-70,9,9,-76,18,-3,51,41,-29,6,-26,1,-29,127,25,10,-62,4,3,1,-14,8,51,-15,-41,22,-87,-36,35,-47,42,37,-6,8,0,32,-9,37,-56,-39,43,-4,22,16,38,-71, 
  /* [40][0][][] */ -5,13,-13,28,74,57,-110,-115,-6,-65,-19,-27,-16,41,17,-80,26,45,-8,35,58,28,18,-7,36,10,-17,-23,21,-43,22,-80,24,-29,-88,-24,-15,-31,-72,39,60,13,-30,75,15,30,-6,-78,-2,78,127, 
  /* [41][0][][] */ -44,12,31,31,-21,56,88,-55,-73,35,4,-26,-107,-28,9,127,34,0,42,44,12,-34,-17,-23,36,-38,-34,-69,79,-7,34,-20,27,11,-14,-25,-56,24,21,-6,-22,-10,12,7,46,47,88,-29,87,50,19, 
  /* [42][0][][] */ -50,-7,32,-1,36,22,12,24,-29,1,-2,-9,-16,127,-15,-16,-40,59,-58,54,25,5,24,-55,50,109,86,69,9,76,-5,9,25,-49,-70,-62,-5,1,21,11,32,-10,33,22,-14,11,-16,-6,29,-13,-23, 
  /* [43][0][][] */ 24,19,-2,-19,-2,61,93,-116,1,22,51,5,-112,57,-7,-71,1,-29,-49,-27,44,117,-22,104,11,107,69,-4,-22,-40,-9,-75,-127,48,-25,8,-9,33,-3,-45,-14,5,-8,-36,-18,-65,37,-42,-80,-17,-29, 
  /* [44][0][][] */ 33,56,-25,24,-25,127,53,53,-68,-11,-55,-53,-35,-80,24,1,-65,-14,28,-8,-25,-17,9,-18,43,96,-3,42,-22,-107,29,-30,20,13,68,-68,13,-20,31,-95,33,62,92,-37,59,-11,-49,28,49,-5,54, 
  /* [45][0][][] */ 24,23,-33,37,-39,-9,-72,11,-6,73,41,6,-13,33,-11,-16,-50,121,-34,51,20,34,-6,59,30,10,51,26,23,-21,49,20,31,-57,-8,-48,-65,1,20,41,26,-19,30,4,-18,-23,-7,-59,55,71,127, 
  /* [46][0][][] */ -61,38,72,-20,-92,-51,27,69,-60,18,63,-54,-4,12,-20,-33,-76,-76,59,39,11,40,-17,97,5,24,-27,19,8,8,-3,-28,127,-39,-44,8,22,55,55,91,39,12,-15,16,-22,-36,33,5,117,-74,-43, 
  /* [47][0][][] */ -18,-28,-67,-42,73,-77,43,-20,-77,-74,44,66,63,-105,3,33,-42,127,49,-24,2,2,-45,79,-32,41,-18,-70,-12,23,-55,9,-11,17,72,24,58,-50,5,85,-125,2,-5,27,-25,58,9,-65,24,-51,25, 
  /* [48][0][][] */ 5,22,-8,-4,18,-18,27,-9,-11,-17,-5,-13,-20,45,2,48,-25,-17,-14,-28,-17,-4,75,-26,4,5,-30,-9,4,2,21,-9,-16,-12,-28,-13,19,-23,-5,-44,-14,127,5,-34,-5,4,62,-35,45,-10,19, 
  /* [49][0][][] */ -43,94,-7,18,-59,-121,127,-11,53,-37,15,10,-30,-4,-8,-49,-38,-103,26,11,-109,-36,2,-16,-73,-34,35,97,-21,-47,98,-11,-18,6,-37,-16,-50,-5,30,28,11,26,44,22,-49,0,45,11,16,-25,82, 
  /* [50][0][][] */ 38,18,-102,29,-127,-58,33,-11,-30,-5,-7,-41,49,-20,17,-93,27,-2,45,-52,23,7,54,20,23,31,-1,68,37,-27,-64,-33,-56,5,-24,-26,-30,42,-14,-25,80,-16,85,55,-16,-22,6,-16,51,63,-17, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant43_scale = { 51, { 0.0038071880117058754, 0.0045513585209846497, 0.0025206811260432005, 0.0039523090235888958, 0.0023339672479778528, 0.0026346987579017878, 0.0021936371922492981, 0.0020104499999433756, 0.0028162568341940641, 0.0026166022289544344, 0.0025787078775465488, 0.0022168557625263929, 0.0021706931293010712, 0.0057543739676475525, 0.0015858407132327557, 0.0030700624920427799, 0.0029367739334702492, 0.0029302469920367002, 0.0046103820204734802, 0.0035884883254766464, 0.0030922777950763702, 0.0026682943571358919, 0.0026996491942554712, 0.0034708348102867603, 0.002267756499350071, 0.0032425869721919298, 0.0019451805856078863, 0.00255795125849545, 0.0033079630229622126, 0.0027792577166110277, 0.0023792393039911985, 0.0027544270269572735, 0.0030581415630877018, 0.0023866971023380756, 0.0024319207295775414, 0.0016170322196558118, 0.0017387783154845238, 0.0022227233275771141, 0.0032640285789966583, 0.0027570209931582212, 0.0022349737118929625, 0.0039015919901430607, 0.0034905385691672564, 0.0017579308478161693, 0.0037451274693012238, 0.0031099144835025072, 0.0033275047317147255, 0.0036258518230170012, 0.004935133270919323, 0.0042464621365070343, 0.0040342025458812714, } };
const TfArray<51, int> quant43_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int32_t tensor_data44[51] = { -4318, 8367, -5292, -7917, 17847, -980, 9885, 15676, 18765, 10377, 16654, 2395, 15375, -5974, 11577, 6850, 7494, 8667, -1471, -11788, 34252, 9383, 3370, 1293, 17232, 521, 22655, 25697, 5693, 31866, -32963, 38235, -6297, 11799, 29631, 37459, -963, 21649, 902, 14052, 28453, -14402, -9285, 35115, 675, -7353, -5119, 6909, 10506, 9467, 17841, };
const TfArray<1, int> tensor_dimension44 = { 1, { 51 } };
const TfArray<51, float> quant44_scale = { 51, { 6.5771120716817677e-05, 7.8627046605106443e-05, 4.3546056986087933e-05, 6.8278161052148789e-05, 4.0320479456568137e-05, 4.5515771489590406e-05, 3.7896206777077168e-05, 3.4731554478639737e-05, 4.8652280383976176e-05, 4.5203145418781787e-05, 4.4548498408403248e-05, 3.8297319406410679e-05, 3.7499834434129298e-05, 9.9409757240209728e-05, 2.7396210498409346e-05, 5.3036903409520164e-05, 5.0734273827401921e-05, 5.0621518312254921e-05, 7.9646713857073337e-05, 6.199297058628872e-05, 5.3420681069837883e-05, 4.6096152800600976e-05, 4.6637822379125282e-05, 5.9960450016660616e-05, 3.9176655263872817e-05, 5.6017350289039314e-05, 3.3603992051212117e-05, 4.4189917389303446e-05, 5.7146757171722129e-05, 4.8013102059485391e-05, 4.1102579416474327e-05, 4.7584137064404786e-05, 5.2830961067229509e-05, 4.1231414797948673e-05, 4.2012678022729233e-05, 2.7935060643358156e-05, 3.0038285331102088e-05, 3.8398684409912676e-05, 5.6387765653198585e-05, 4.7628949687350541e-05, 3.8610316551057622e-05, 6.7401997512206435e-05, 6.0300841141724959e-05, 3.0369155865628272e-05, 6.4698993810452521e-05, 5.3725365432910621e-05, 5.7484347053105012e-05, 6.2638449890073389e-05, 8.5256957390811294e-05, 7.3359806265216321e-05, 6.9692912802565843e-05, } };
const TfArray<51, int> quant44_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int8_t tensor_data45[1*3*3*51] = { 
  /* [0][0][][] */ -5,52,25,-127,56,25,21,-116,-2,23,32,-35,-115,54,-47,-37,4,2,-105,20,3,-52,-58,62,-32,-127,-15,-92,-6,-86,-127,-111,-67,30,90,27,39,4,9,92,-87,-67,16,-46,-53,-53,-127,-127,60,43,-55, -32,91,31,49,-19,67,116,-127,-5,29,127,3,-127,34,-64,-53,90,14,-36,46,20,-69,-124,70,30,-117,-98,115,29,-127,-29,-98,-127,47,61,80,-127,3,18,4,-127,-127,127,-59,-73,-3,-112,-114,95,127,-67, -22,40,16,-121,49,-11,13,-97,29,6,-14,-20,-79,32,-39,-42,-14,10,-127,-33,-11,-65,-44,25,-24,-88,-25,-66,-10,-82,-101,-65,-58,5,65,-7,18,-7,-13,127,-38,4,16,-16,-36,-72,-114,-106,-45,19,-18, 
  /* [0][1][][] */ -7,112,32,-101,-22,48,-73,-31,-45,-46,-11,31,-85,91,16,-19,117,12,-71,1,48,-127,-127,40,40,-56,-101,21,3,-79,-39,-82,-30,2,-68,60,-93,-37,5,35,66,67,3,-55,-58,12,-32,-1,48,38,-19, 104,105,127,40,22,127,103,-90,-127,83,58,17,-87,127,-122,-23,127,127,-10,20,127,-86,-15,127,127,-79,-86,127,8,-27,40,-127,-77,44,12,127,-121,-127,127,-21,49,90,-10,-127,-127,78,-88,-32,127,59,-127, 7,61,-9,-82,27,5,-59,-19,-43,-39,-28,52,-30,51,15,-1,54,-5,-39,-3,-8,-64,-94,-21,-13,39,-78,-8,18,-68,-32,-69,5,28,1,-21,-61,-6,-7,41,25,103,-18,-41,-93,-8,31,17,-35,41,-11, 
  /* [0][2][][] */ 74,-34,-16,-21,121,20,-95,-94,0,36,-30,127,-40,5,-50,-49,39,43,-83,97,-12,-20,17,13,2,-60,-127,-61,56,13,-105,-47,11,93,104,-55,-31,-35,18,74,24,-116,-81,6,-20,17,-105,-109,-22,-49,-44, 127,127,-15,-19,-10,12,-59,-101,-90,127,-22,98,-122,71,-127,-127,39,106,-69,127,10,-13,32,47,87,-119,-33,112,127,-42,16,11,-20,127,127,-32,-35,-87,-22,-26,72,-93,-66,22,10,127,-68,-45,32,-55,-71, 27,-8,-6,-42,127,-7,-127,-25,-4,20,-12,44,-18,16,-76,-13,13,27,-64,49,-18,-30,-27,-12,17,-29,-97,-41,31,10,-92,-32,-15,46,45,-43,-3,0,-16,77,31,-58,-70,-9,-17,-19,-68,-105,-53,-13,22, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant45_scale = { 51, { 0.0042764674872159958, 0.003134577302262187, 0.0061009316705167294, 0.003425913630053401, 0.008245992474257946, 0.0051243514753878117, 0.0067303297109901905, 0.0035771795082837343, 0.0033323378302156925, 0.00716383196413517, 0.008243173360824585, 0.0041822381317615509, 0.0027235087472945452, 0.0030558868311345577, 0.0049958857707679272, 0.0044249664060771465, 0.0039527891203761101, 0.0042462935671210289, 0.0037686894647777081, 0.0046647000126540661, 0.0064186318777501583, 0.0051322546787559986, 0.0047185700386762619, 0.0045678485184907913, 0.0042001404799520969, 0.0027730080764740705, 0.0042480197735130787, 0.0056500183418393135, 0.0055688479915261269, 0.0049823899753391743, 0.0026222988963127136, 0.0047777406871318817, 0.0031475136056542397, 0.0048986710608005524, 0.0070851114578545094, 0.0065550925210118294, 0.0034825187176465988, 0.0056346380151808262, 0.0073279291391372681, 0.0048548928461968899, 0.0083479788154363632, 0.004094722680747509, 0.0080831702798604965, 0.0083978725597262383, 0.0044406787492334843, 0.005766596645116806, 0.002381026279181242, 0.0033184485509991646, 0.0057001551613211632, 0.0033810660243034363, 0.0034081335179507732, } };
const TfArray<51, int> quant45_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 3 };
const ALIGN(16) int32_t tensor_data46[51] = { 3543, -8254, -1387, 26241, -11590, -3151, 8904, 46307, 38468, -1335, 1064, -3983, 54177, -2268, 30237, 35641, -13774, -3346, 28077, -3726, 396, 25156, 29527, -7934, 877, 42874, 38328, -2199, -692, 25875, 30891, 38772, 28752, -12348, -5755, -368, 36797, 25104, 750, -7479, -1417, 7082, 4212, 21128, 22259, -1778, 49645, 30648, -4999, 1458, 36344, };
const TfArray<1, int> tensor_dimension46 = { 1, { 51 } };
const TfArray<51, float> quant46_scale = { 51, { 6.5917280153371394e-05, 4.8316236643586308e-05, 9.4039489340502769e-05, 5.2806881285505369e-05, 0.00012710336886812001, 7.8986529842950404e-05, 0.00010374100384069607, 5.5138487368822098e-05, 5.1364506362006068e-05, 0.00011042298865504563, 0.00012705991684924811, 6.4464831666555256e-05, 4.1980041714850813e-05, 4.7103305405471474e-05, 7.7006363426335156e-05, 6.8206238211132586e-05, 6.0928115999558941e-05, 6.5452179114799947e-05, 5.8090412494493648e-05, 7.1901478804647923e-05, 9.8936507129110396e-05, 7.9108343925327063e-05, 7.2731832915451378e-05, 7.0408612373284996e-05, 6.4740779635030776e-05, 4.2743024096125737e-05, 6.5478787291795015e-05, 8.7089130829554051e-05, 8.5837978986091912e-05, 7.6798336522188038e-05, 4.0420000004814938e-05, 7.3643881478346884e-05, 4.8515634262003005e-05, 7.5507901783566922e-05, 0.00010920959175564349, 0.00010103990643983707, 5.3679388656746596e-05, 8.6852058302611113e-05, 0.0001129523734562099, 7.4833100370597094e-05, 0.00012867538316641003, 6.3115876400843263e-05, 0.00012459362915251404, 0.00012944443733431399, 6.8448425736278296e-05, 8.8886066805571318e-05, 3.6701032513519749e-05, 5.1150418585166335e-05, 8.786193939158693e-05, 5.2115603466518223e-05, 5.2532817790051922e-05, } };
const TfArray<51, int> quant46_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(16) int8_t tensor_data47[51*1*1*51] = { 
  /* [0][0][][] */ -26,21,-10,-24,16,-29,-25,35,7,13,9,0,-2,-5,22,-96,-27,13,-60,-34,25,45,-10,25,28,66,-41,103,-10,127,37,0,38,-57,-8,-18,16,-21,-12,-40,27,-8,-43,18,35,59,65,13,31,-10,91, 
  /* [1][0][][] */ 14,94,12,24,26,-127,46,-122,45,35,15,28,-44,2,-63,112,-51,-10,32,73,76,-63,-87,-14,-47,-71,79,29,-66,-91,74,-40,-76,47,-67,5,-78,-41,68,-72,26,27,15,-16,17,-51,82,6,18,-106,-9, 
  /* [2][0][][] */ -2,-6,-54,59,-119,21,63,39,-44,-11,18,-9,-35,-43,11,5,-7,-19,-20,54,98,-49,22,5,-38,-127,-34,-15,-68,6,3,13,-66,1,-11,19,-32,117,-25,11,-39,-90,6,27,18,0,-103,-61,84,17,20, 
  /* [3][0][][] */ -127,3,-13,-28,43,-54,52,-53,-93,7,-26,51,-82,-18,-4,-6,29,-42,-2,63,-7,24,-2,88,4,-9,60,-5,15,-21,6,-56,46,18,39,-74,-46,8,63,67,-16,-12,-42,26,13,-17,26,114,11,21,27, 
  /* [4][0][][] */ 46,71,-61,44,-12,11,-54,4,-66,66,57,5,109,-65,19,-103,0,-106,28,57,-127,-40,71,1,-31,-23,-64,-21,-18,2,-78,47,-3,88,-19,13,-7,-38,30,-11,62,74,-6,-7,15,-34,39,-54,33,-49,-39, 
  /* [5][0][][] */ 44,7,49,-49,-60,27,68,36,89,31,104,38,-19,51,36,-39,-93,-43,70,-127,55,7,-11,18,-52,-72,4,24,65,-31,-34,21,22,-21,11,-65,4,33,11,55,1,-66,-60,-69,30,-21,-47,68,5,-73,35, 
  /* [6][0][][] */ -5,-39,-46,61,-69,6,32,-15,48,-26,-15,-127,-10,21,-49,21,-100,-40,-12,-43,14,26,58,40,35,-23,24,-12,6,-7,-53,-6,41,22,70,46,-50,-84,-40,30,-16,-59,-12,18,-7,-1,-44,3,-14,-19,-18, 
  /* [7][0][][] */ -16,-73,-2,31,-36,3,-22,-127,-89,-53,-13,20,52,-21,83,-21,-48,-30,37,-4,40,6,22,15,5,-15,-25,29,-22,-39,-8,80,22,-63,-37,19,82,-32,-15,-113,28,15,69,-7,33,-10,-5,13,-17,-6,11, 
  /* [8][0][][] */ -23,18,59,-5,-27,69,42,-21,-56,65,42,45,21,7,-9,-38,-83,127,-57,-10,-48,48,9,-36,24,-43,8,-27,15,34,-26,29,44,-20,-27,87,-64,98,-8,35,54,-68,-12,-13,-1,1,-9,12,-41,91,-22, 
  /* [9][0][][] */ 16,16,5,-5,-22,-72,25,-24,-46,1,-27,-1,24,54,5,-17,-35,37,-11,25,-5,-6,-8,-29,-13,16,16,-11,11,-42,10,-30,24,3,-18,42,-1,10,-10,19,-15,14,24,22,-17,9,19,6,127,27,1, 
  /* [10][0][][] */ -40,6,42,64,-24,-4,-85,73,127,-84,-34,49,17,70,13,39,-9,26,50,-65,-13,-54,78,57,22,29,-97,122,-102,17,-47,-12,-8,-82,9,-66,-27,78,-18,40,59,-86,0,1,-52,-15,124,5,-35,46,-92, 
  /* [11][0][][] */ -22,-53,22,3,52,62,25,-29,19,-14,-33,7,52,22,-33,-2,16,6,3,127,-20,16,-24,-37,20,-63,44,42,-36,67,20,2,32,40,35,-4,57,30,-18,21,-37,30,22,-41,-70,-64,-46,-6,3,31,-64, 
  /* [12][0][][] */ -127,-20,38,-17,-95,16,32,-3,21,-25,-14,-11,2,35,79,-4,19,-37,25,24,-17,31,56,20,13,74,0,-6,-37,0,3,11,-1,0,-63,-2,17,-3,-4,-14,5,40,79,82,-7,-27,-25,-25,-18,-46,-35, 
  /* [13][0][][] */ -17,-16,-19,-14,-1,75,-9,-3,-29,-2,-80,-15,127,94,32,-27,48,-37,-9,12,48,96,-7,27,-55,-14,-50,10,34,6,-9,15,-102,107,14,-4,-77,-12,29,-28,9,-37,-100,29,-11,48,-24,103,0,-19,25, 
  /* [14][0][][] */ -38,34,-66,10,6,-33,114,-22,29,-11,11,-34,70,-9,6,-11,36,-24,-33,-61,4,-112,-32,14,-72,-25,-14,56,-50,33,-32,47,-40,-127,-81,0,-98,-57,63,-59,-65,7,70,34,-22,65,-97,-28,50,-13,-29, 
  /* [15][0][][] */ -29,-24,7,-23,83,-62,35,-14,47,58,49,-11,-40,127,5,-50,19,-17,-31,-54,38,6,-41,-12,21,-41,-5,-8,-8,-15,18,57,-11,-53,-7,63,-26,42,-8,-9,35,-19,20,5,33,-24,-22,12,-29,33,14, 
  /* [16][0][][] */ 28,17,-96,-15,23,15,14,-23,43,-24,34,-29,13,31,23,42,74,-81,-16,-12,97,-9,-2,127,122,-36,-5,-1,-2,-24,3,-32,8,-11,-50,24,83,-20,-83,0,-1,-39,-16,-6,-18,58,19,-18,26,13,-7, 
  /* [17][0][][] */ 127,-42,-25,-24,43,20,55,-50,17,-8,-26,10,-19,29,-23,12,27,-18,-24,61,-37,-3,-41,16,-20,0,-24,-27,-12,-38,11,3,34,4,-25,-5,-26,-16,19,2,31,-14,28,15,-12,15,39,-9,11,1,27, 
  /* [18][0][][] */ 127,64,23,-21,4,-16,-31,30,92,76,-1,-5,69,-52,126,80,-21,-40,-35,16,11,26,17,8,-49,-20,74,61,-8,-13,-30,89,40,12,18,-23,-9,97,-84,-75,16,48,5,101,17,53,21,40,13,15,-56, 
  /* [19][0][][] */ 4,71,23,-15,-4,123,25,3,-23,32,-73,31,9,41,-28,-38,-83,-12,-33,-21,-6,-28,-10,96,17,-44,57,-47,52,2,47,-13,-29,-54,4,22,1,12,87,53,40,-33,127,25,61,-49,13,-12,40,6,71, 
  /* [20][0][][] */ -10,58,75,40,-20,-86,26,-60,10,53,66,-5,-14,-13,-47,-39,59,65,-15,-11,-29,-69,-63,-5,24,-36,-73,58,41,35,32,60,-71,18,-12,-7,-56,5,-77,18,2,-65,127,-3,-56,5,0,-1,-18,5,-20, 
  /* [21][0][][] */ -23,-58,88,-12,-30,-28,127,4,-4,85,91,-8,3,-15,-16,48,-8,28,30,-11,42,-22,-7,82,-25,-31,23,-37,-25,4,-9,-17,28,8,-44,-35,-3,42,-31,11,-13,-42,-24,-38,-7,21,31,-52,38,2,10, 
  /* [22][0][][] */ 22,18,-113,30,94,-11,-6,18,42,116,-4,20,8,-51,2,-1,-49,-23,-34,34,56,49,-16,33,-55,-79,-32,-77,69,39,69,-34,36,127,72,15,-27,34,-80,92,-9,24,49,63,31,-39,48,68,18,10,-1, 
  /* [23][0][][] */ 96,3,-47,-6,-7,22,-25,65,-50,-108,85,-68,-46,-14,15,-47,-50,15,-63,64,107,-8,36,52,10,-113,9,-8,48,-2,72,-74,21,44,-78,14,-2,17,-53,64,127,60,49,-7,-124,4,1,52,-28,-59,-49, 
  /* [24][0][][] */ 11,12,-56,-40,-104,-11,34,33,73,121,-119,92,10,-28,53,-10,-87,67,54,3,42,29,-8,21,108,-89,11,-76,61,16,47,5,-4,-127,17,-25,-34,-27,20,33,26,106,-18,100,-19,120,11,67,17,-39,-29, 
  /* [25][0][][] */ -9,-30,-17,-12,-61,-48,-44,-36,12,-33,23,13,18,-60,22,-27,-4,-55,-14,-17,-82,-7,50,44,28,1,2,8,-25,25,38,-13,-28,2,-1,127,46,68,3,18,16,20,-17,-31,17,16,5,15,-30,-9,22, 
  /* [26][0][][] */ 33,-5,-71,52,-43,-62,-26,27,23,-71,17,-49,46,20,23,-41,28,-18,37,0,-22,-6,-9,3,15,24,37,10,-35,-3,31,57,6,-1,12,-38,1,43,127,-25,36,5,6,44,-15,-8,-46,7,-11,-1,1, 
  /* [27][0][][] */ -77,48,-31,70,39,-1,103,51,25,-58,-48,-38,-71,8,-28,127,70,85,-19,-112,93,37,-6,-32,14,-50,16,-119,74,-42,4,58,-25,21,97,-58,-20,8,-27,38,-6,-96,109,-50,53,-20,-16,35,30,-2,-68, 
  /* [28][0][][] */ 86,-54,28,-43,-48,-29,53,-35,-64,26,-5,30,12,-36,-21,-42,13,-65,-24,22,127,15,-1,63,78,-1,26,1,26,4,7,29,-4,-38,-19,-8,-50,-14,4,34,-31,10,103,-28,2,9,3,35,-7,96,12, 
  /* [29][0][][] */ 27,-84,60,-21,98,-22,-22,-39,-127,-79,6,-47,2,-47,28,38,15,4,5,-35,-19,-6,-20,-39,-36,-86,-28,0,54,36,22,-21,60,-32,111,-35,-13,11,10,-60,63,-42,25,14,10,19,-57,-30,38,-4,35, 
  /* [30][0][][] */ 30,43,35,-36,56,-37,16,54,9,9,-31,-82,1,20,-3,-127,-21,-5,-28,-30,-10,19,-13,58,-6,-23,-17,8,126,2,-1,15,22,35,46,-21,17,60,-8,46,-71,13,-39,6,24,32,-17,-44,6,-59,-54, 
  /* [31][0][][] */ 20,22,-49,-46,19,125,-24,-86,-26,16,127,-31,23,21,-7,2,-24,-11,42,-55,-44,48,40,28,26,-4,7,-3,-18,-15,34,11,-19,28,-30,-55,-27,21,-55,34,0,-33,48,-35,-24,-53,8,-14,77,32,-20, 
  /* [32][0][][] */ 10,54,36,-4,-4,-68,11,39,-15,9,-127,1,-29,11,-20,10,24,-32,-18,-24,59,19,25,-35,40,-16,40,-30,-46,66,32,27,-3,11,13,61,-54,-58,28,-5,68,25,14,-3,7,24,-15,9,-2,-19,-2, 
  /* [33][0][][] */ -36,-18,8,76,13,2,45,9,64,20,-16,-98,-9,-48,-13,33,34,100,-106,9,24,-65,-30,-14,73,30,-45,-20,44,4,46,-1,-13,-9,127,20,2,-63,67,-45,-66,33,-38,114,-67,64,69,-47,1,37,36, 
  /* [34][0][][] */ 8,23,-18,26,-57,-22,-10,-47,-6,1,-15,-39,3,-28,-56,21,2,23,34,-50,-7,4,-27,-23,42,34,19,7,0,25,17,67,-35,15,33,-5,22,25,6,4,-11,0,3,127,-33,-14,3,28,11,4,33, 
  /* [35][0][][] */ -10,-84,22,-1,-6,-8,-35,-8,64,1,30,6,29,20,4,5,-10,-38,5,45,3,-17,38,-45,55,-38,-2,-9,127,-27,7,54,18,42,-13,1,-75,-40,30,43,-26,-4,-28,-12,-7,-24,10,-1,6,26,88, 
  /* [36][0][][] */ 69,49,-25,26,33,16,34,-16,10,127,27,44,-16,-54,57,-23,-57,36,-3,70,42,37,-21,-94,-59,14,-28,-79,-4,3,-21,-93,-17,46,27,65,35,27,-61,-15,22,31,-5,7,50,8,-8,31,3,0,61, 
  /* [37][0][][] */ 75,78,8,-85,-3,-4,112,-3,31,23,22,-58,-48,-47,1,82,66,-60,-48,-44,-59,-36,-1,-21,20,-76,-37,4,-78,-50,-31,-25,-59,-46,0,62,-5,37,-20,49,-60,-59,-46,-73,-41,29,-54,10,127,65,-19, 
  /* [38][0][][] */ 4,-40,127,71,-26,61,1,14,66,41,-73,-23,-31,-20,-47,-13,60,-11,-22,-41,-65,87,-51,-3,-3,35,-33,13,8,40,28,58,-11,-56,46,-7,5,9,-15,39,7,-14,-33,-1,10,8,36,-7,-37,-6,42, 
  /* [39][0][][] */ 28,-23,17,-59,30,32,63,-36,0,-84,-1,0,-87,-9,-74,-119,-28,35,5,-31,62,20,23,-3,-43,37,-9,-29,-56,-127,85,-3,42,96,-49,39,-30,-57,-86,-5,-53,43,-5,-19,-18,-78,8,-27,54,83,-8, 
  /* [40][0][][] */ -40,55,2,15,-42,-66,40,-20,20,16,0,85,-56,6,-15,24,-104,-28,-3,-28,-10,32,-19,75,-9,-2,28,-4,-42,41,-28,81,-30,127,-30,-28,-49,42,-23,-46,68,23,14,-86,-29,12,7,0,102,-39,54, 
  /* [41][0][][] */ 27,-14,-9,-6,48,14,-41,2,-41,9,-20,3,-14,21,14,5,-26,-23,-18,22,18,-67,-4,53,36,21,8,-1,-13,-24,43,-2,5,43,-3,23,-29,16,-17,8,-17,-24,-13,14,-16,127,-57,-36,-30,17,-13, 
  /* [42][0][][] */ 7,-27,-9,-21,-92,-54,-10,94,-46,-27,19,99,127,27,-78,33,41,49,54,15,11,38,8,87,-87,9,-9,54,88,-24,49,29,-14,-4,97,110,29,8,-60,-23,45,-18,10,44,36,-6,-1,-16,-34,3,-35, 
  /* [43][0][][] */ 5,-2,-115,-20,-49,-41,49,-8,49,-12,16,-8,25,-3,-76,38,-1,62,-39,94,-14,-6,-51,55,10,34,-1,-39,12,22,19,19,1,-78,4,18,1,-81,62,5,6,4,49,10,4,-13,-127,3,-14,37,-116, 
  /* [44][0][][] */ 17,-10,48,3,-28,18,115,0,45,6,14,17,60,42,1,-58,-22,21,-13,-3,54,-42,-60,-61,34,15,20,49,-67,-42,-21,28,-48,-22,127,-11,10,64,-8,9,13,-43,10,-37,35,-5,38,-28,22,-19,-103, 
  /* [45][0][][] */ -37,-8,-12,7,-4,64,-7,-17,-16,19,127,0,32,5,-7,-18,-8,-32,-7,1,62,-26,-57,17,53,-12,9,-11,6,-13,-20,5,27,-1,-7,14,-13,37,-11,29,26,-17,-50,5,-6,-30,17,13,26,43,29, 
  /* [46][0][][] */ -3,-32,17,42,36,-2,-9,-19,33,51,5,-25,-6,26,11,76,0,28,-1,-18,30,25,91,-77,-62,42,-26,-26,12,-21,13,-40,-1,-36,-39,10,47,91,127,-10,120,-20,-61,61,67,-24,-73,2,-24,-60,24, 
  /* [47][0][][] */ -12,-7,-50,73,-11,25,7,15,-81,7,26,-54,-49,-2,-49,-38,-11,78,41,-25,-42,-45,37,-20,-43,-8,127,-16,5,-14,-2,-12,-106,-49,23,19,-54,-45,-93,-68,58,-41,29,54,22,74,57,-17,-33,-42,55, 
  /* [48][0][][] */ 27,-35,23,-27,-65,-12,16,27,62,92,18,-3,31,85,-19,-8,73,8,46,37,-73,42,-42,-21,0,-64,22,87,-72,44,43,-43,-65,-11,-26,-47,127,-53,-65,-98,-18,36,9,-27,20,16,-59,-5,0,-49,10, 
  /* [49][0][][] */ -50,-28,-7,-39,-24,-83,-65,-27,-51,-64,-40,-15,74,29,20,-30,25,-7,-28,-28,-56,-14,88,114,15,-46,-31,-9,-56,4,-5,-18,-1,58,-39,-127,83,-8,-24,-91,-35,-46,33,-28,-35,-21,37,-75,30,77,-20, 
  /* [50][0][][] */ -13,-7,9,-35,54,17,-33,-11,8,127,-18,4,83,-40,-39,53,28,-18,7,1,-2,-15,-58,11,119,-5,-28,39,-32,-48,-48,14,-23,27,28,84,-50,13,-15,50,-6,-6,-56,14,-45,-51,30,-22,2,20,42, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant47_scale = { 51, { 0.0027489364147186279, 0.001449239905923605, 0.0045140632428228855, 0.003397015854716301, 0.0032678050920367241, 0.0039200293831527233, 0.0019582943059504032, 0.0029964875429868698, 0.0035592718049883842, 0.0062140077352523804, 0.0023157061077654362, 0.0042014513164758682, 0.0029416524339467287, 0.0042103556916117668, 0.0025149101857095957, 0.003339928574860096, 0.0050167329609394073, 0.0031016212888062, 0.0033592660911381245, 0.002917789388448, 0.0032530622556805611, 0.0037608575075864792, 0.00301159149967134, 0.0028996111359447241, 0.0030602256301790476, 0.003506155451759696, 0.002415594644844532, 0.0027884955052286386, 0.0051329405978322029, 0.0044569079764187336, 0.0033063101582229137, 0.0032164070289582014, 0.0039694434963166714, 0.0033855419605970383, 0.0049466686323285103, 0.0031938296742737293, 0.0058006416074931622, 0.0031858920119702816, 0.0038012654986232519, 0.003381702583283186, 0.0027947437483817339, 0.0036390798632055521, 0.0030803785193711519, 0.0050469487905502319, 0.0041920570656657219, 0.0037734908983111382, 0.0048749009147286415, 0.0026005755644291639, 0.0030498902779072523, 0.0032829190604388714, 0.0040335580706596375, } };
const TfArray<51, int> quant47_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int32_t tensor_data48[51] = { 1665, 51184, 17130, 15154, 21269, -6014, 43957, 23507, -12115, 2383, 3337, -803, 8472, 557, 42962, 4096, -12939, 9665, -41741, -9341, 14943, -3944, -15533, 16770, -13836, 11341, 11082, -2665, -6669, 24504, 8980, -11427, 9616, -16957, -7836, 2989, -19163, 17408, -5091, 27226, 12162, 12841, -13447, 15738, -3679, -14999, -21832, 39065, 16445, 44506, -11462, };
const TfArray<1, int> tensor_dimension48 = { 1, { 51 } };
const TfArray<51, float> quant48_scale = { 51, { 4.6017579734325409e-05, 2.426047831249889e-05, 7.5566051236819476e-05, 5.6866520026233047e-05, 5.4703512432752177e-05, 6.5621839894447476e-05, 3.27821217069868e-05, 5.0161619583377615e-05, 5.9582707763183862e-05, 0.00010402335465187207, 3.876524351653643e-05, 7.0332884206436574e-05, 4.9243673856835812e-05, 7.0481939474120736e-05, 4.2099945858353749e-05, 5.5910870287334546e-05, 8.3980812632944435e-05, 5.1921571866841987e-05, 5.6234584917547181e-05, 4.88442019559443e-05, 5.4456715588457882e-05, 6.2957282352726907e-05, 5.0414462748449296e-05, 4.8539895942667499e-05, 5.1228602387709543e-05, 5.8693531173048541e-05, 4.0437393181491643e-05, 4.6679804654559121e-05, 8.5926141764502972e-05, 7.4609262810554355e-05, 5.5348093155771494e-05, 5.384310134104453e-05, 6.6449036239646375e-05, 5.6674445659155026e-05, 8.2807920989580452e-05, 5.3465155360754579e-05, 9.7103547886945307e-05, 5.3332278184825554e-05, 6.3633713580202311e-05, 5.6610173487570137e-05, 4.6784400183241814e-05, 6.0918704548384994e-05, 5.1565966714406386e-05, 8.4486629930324852e-05, 7.0175621658563614e-05, 6.3168765336740762e-05, 8.1606522144284099e-05, 4.3533997086342424e-05, 5.1055587391601875e-05, 5.4956522944848984e-05, 6.7522327299229801e-05, } };
const TfArray<51, int> quant48_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int8_t tensor_data49[1*3*3*51] = { 
  /* [0][0][][] */ -119,-100,-27,85,-108,-127,-127,-98,-18,57,122,-116,-120,-104,-127,38,91,112,116,8,73,-16,45,-26,115,-61,-58,-41,86,-75,12,51,40,-127,89,-97,127,-35,-60,-125,72,86,-114,-85,-34,-28,49,119,-121,-7,127, -127,-106,41,84,-123,-106,-102,-92,2,109,127,-120,-94,-127,-119,5,83,127,127,10,86,-12,50,-47,127,-57,-65,-56,82,-96,-7,48,73,-109,127,-127,98,-11,-47,-101,76,83,-111,-127,-61,-40,77,127,-114,-17,111, -33,-14,-59,-9,-43,-25,-33,-14,-35,64,19,-64,-6,3,3,-25,42,2,-26,2,-11,-29,0,-23,2,-5,-20,-16,21,-18,-23,26,15,-9,-12,-24,0,-19,-28,-98,64,26,-42,-57,-2,-15,0,-12,-33,6,7, 
  /* [0][1][][] */ -59,-127,52,127,-91,-91,-46,-127,91,94,116,-120,-116,-71,-113,88,119,118,81,110,127,53,127,-127,101,-127,-101,69,113,-105,44,127,114,-34,67,-46,-26,64,-33,-127,122,125,-127,-53,66,71,111,118,-123,-102,-23, -61,-99,127,126,-127,-84,-57,-115,127,127,125,-127,-127,-103,-127,127,127,109,100,127,109,73,102,-114,100,-116,-127,70,127,-114,57,126,127,-41,89,-36,2,75,-11,-81,127,127,-100,-35,36,98,127,110,-127,-127,-43, 12,-6,-11,18,-28,-18,24,29,52,37,-8,-8,-23,4,-37,49,38,14,-7,15,33,34,34,-45,11,-23,-17,15,6,-15,-2,35,21,-3,-21,6,73,65,29,-76,23,3,-20,-29,25,64,31,2,33,2,40, 
  /* [0][2][][] */ 68,-36,118,43,33,-12,-6,6,126,57,-36,-126,100,-41,-14,120,-30,68,-41,51,32,127,42,-4,31,-8,29,127,31,-127,127,64,59,-64,1,-36,-14,127,127,-41,1,25,-94,-68,89,102,8,-27,55,-29,-7, 69,-18,91,58,58,-5,-27,10,124,34,-30,-106,87,-22,-12,126,-31,86,-47,68,51,127,60,-16,40,-14,16,123,25,-109,123,63,60,-81,14,-38,-12,125,104,-74,4,70,-103,-89,127,127,-7,-37,73,-66,20, 14,7,32,13,19,16,13,42,28,34,-8,-44,62,31,1,11,-26,-1,7,30,7,33,8,-53,22,13,19,24,19,12,18,22,26,-10,10,-18,-40,31,35,-21,-15,13,-3,-28,-12,34,45,-13,78,-12,-59, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant49_scale = { 51, { 0.0065789367072284222, 0.0069091054610908031, 0.004987811204046011, 0.002264959504827857, 0.0041696773841977119, 0.004368096124380827, 0.006031606812030077, 0.0045506716705858707, 0.0030172304250299931, 0.002676565432921052, 0.0037551377899944782, 0.0025047534145414829, 0.0044594318605959415, 0.0023482800461351871, 0.0030505566392093897, 0.0031059796456247568, 0.0027013265062123537, 0.0035788379609584808, 0.0033164587803184986, 0.003951413556933403, 0.0035331437829881907, 0.003221442922949791, 0.0042127557098865509, 0.0028158091008663177, 0.0029280432499945164, 0.007153005339205265, 0.0059234518557786942, 0.0041268034838140011, 0.0024321016389876604, 0.0027520956937223673, 0.0036312092561274767, 0.0035236000549048185, 0.0031373414676636457, 0.0046444525942206383, 0.005465799942612648, 0.0051069986075162888, 0.0054162978194653988, 0.0029986356385052204, 0.0065531684085726738, 0.0020437769126147032, 0.0026588882319629192, 0.0033659161999821663, 0.0028819544240832329, 0.003645867807790637, 0.0039467420428991318, 0.0033867103047668934, 0.0048887697048485279, 0.003357510082423687, 0.003017503535374999, 0.0059837931767106056, 0.0053260102868080139, } };
const TfArray<51, int> quant49_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 3 };
const ALIGN(16) int32_t tensor_data50[51] = { 21357, 33068, -5495, 417, 30237, 23165, 31654, 30011, 4604, -732, -3485, 42161, 25287, 50886, 36135, 80, -188, -11276, 2514, 127, -6871, 842, -12962, 37328, -704, 28067, 29194, 3588, -221, 41650, -960, -241, -1071, 22567, -2770, 35116, -7531, -2372, 5373, 42791, -372, -4932, 53749, 19445, 470, 3721, -1296, 619, 39890, 19326, -6546, };
const TfArray<1, int> tensor_dimension50 = { 1, { 51 } };
const TfArray<51, float> quant50_scale = { 51, { 0.0001029153136187233, 0.00010808019578689709, 7.802509207976982e-05, 3.5431108699413016e-05, 6.5226900915149599e-05, 6.8330795329529792e-05, 9.4353352324105799e-05, 7.1186856075655669e-05, 4.7198998800013214e-05, 4.1869923734338954e-05, 5.8742196415551007e-05, 3.918224319932051e-05, 6.9759575126226991e-05, 3.67345055565238e-05, 4.7720324801048264e-05, 4.858731699641794e-05, 4.2257262975908816e-05, 5.5984310165513307e-05, 5.1879873353755102e-05, 6.1812570493202657e-05, 5.5269509175559506e-05, 5.0393526180414483e-05, 6.590078555746004e-05, 4.404813444125466e-05, 4.5803830289514735e-05, 0.0001118955624406226, 9.2661466624122113e-05, 6.4556217694189399e-05, 3.8045738619985059e-05, 4.3051455577369779e-05, 5.6803564802976325e-05, 5.5120217439252883e-05, 4.9077912990469486e-05, 7.2653885581530631e-05, 8.5502346337307245e-05, 7.9889563494361937e-05, 8.4727980720344931e-05, 4.6908116928534582e-05, 0.00010251221829093993, 3.1971114367479458e-05, 4.1593397327233106e-05, 5.2653544116765261e-05, 4.50828556495253e-05, 5.7032870245166123e-05, 6.1739490774925798e-05, 5.2978830353822559e-05, 7.6475771493278444e-05, 5.2522045734804124e-05, 4.720326978713274e-05, 9.3605391157325357e-05, 8.3315593656152487e-05, } };
const TfArray<51, int> quant50_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(16) int8_t tensor_data51[102*1*1*51] = { 
  /* [0][0][][] */ 75,-63,127,5,-12,-44,-40,12,-74,-25,29,-93,15,11,-24,25,46,-104,-13,-21,29,118,59,-108,23,65,-75,-23,39,-56,-51,-50,-16,-71,-52,-99,-50,64,-86,-35,72,-90,44,1,78,-36,-72,-80,-45,-45,56, 
  /* [1][0][][] */ -35,-21,97,-38,-72,-3,9,15,74,28,-34,-24,-27,-42,-27,-98,-54,-31,35,31,10,35,59,-81,-30,41,-13,82,-122,12,-25,23,-110,-12,26,-37,-17,-17,-25,2,127,-20,84,-13,-30,39,-61,-8,41,44,9, 
  /* [2][0][][] */ -48,4,-21,-59,44,-22,-10,-29,-38,-8,-72,-78,-6,38,4,-10,-33,-52,-45,-14,-8,127,0,0,-80,26,-45,-109,-28,-22,-18,32,61,51,31,8,7,9,39,21,77,50,-73,20,1,60,-8,1,-81,26,-65, 
  /* [3][0][][] */ -48,71,9,-26,-127,-36,18,-59,-28,48,-11,60,-1,-25,5,-74,-15,21,29,-14,-12,-11,-40,-23,-76,-47,-114,2,39,-15,-4,35,57,71,23,-25,47,39,-62,6,-2,-23,-17,8,52,5,-27,12,-21,9,14, 
  /* [4][0][][] */ -115,54,48,-48,-28,-48,-8,16,-49,-13,20,80,42,32,70,-41,14,10,76,127,14,66,-8,-89,-100,-74,-8,-61,36,-62,47,-102,-15,25,24,21,-15,-82,-6,34,34,80,-76,-26,-11,6,-57,61,-24,-45,-103, 
  /* [5][0][][] */ 8,123,10,-34,93,90,55,-28,-98,114,41,-110,-51,-20,-79,-59,83,48,-68,127,49,-32,35,-19,-35,-46,68,-91,-90,-51,-4,26,13,-60,110,69,19,73,1,-13,31,23,93,-31,-22,-109,-19,-58,17,-123,-116, 
  /* [6][0][][] */ -1,-2,8,-47,20,9,20,32,55,61,-14,-5,-38,40,13,51,-24,40,-55,-45,1,27,-13,28,38,-5,3,-16,-33,-57,127,69,-25,1,-42,17,8,-45,12,-48,-33,-42,-14,32,2,18,-45,1,54,64,-113, 
  /* [7][0][][] */ 4,-13,15,-56,18,9,-1,127,13,-62,-42,-48,-87,-79,-4,-8,-35,41,-24,4,-67,44,-5,-6,-38,-42,8,56,2,-9,49,-8,12,14,26,17,69,-35,-3,2,90,-18,-23,1,-8,-55,43,-27,-36,48,57, 
  /* [8][0][][] */ 23,10,35,54,-17,-2,-25,-28,19,30,-28,-24,-19,-1,6,40,-37,52,4,42,27,-12,6,-33,-19,3,-35,-11,-127,-21,3,52,-69,20,18,-50,-40,-14,14,13,32,17,21,-3,34,46,-24,-22,40,13,-6, 
  /* [9][0][][] */ 77,-45,15,-40,0,-12,63,-120,31,65,-77,25,-52,105,-108,-38,34,-23,-62,85,-57,-37,-57,59,-55,-60,-99,-31,21,2,21,1,-1,28,32,-63,-1,-11,60,-30,-77,83,-29,-17,38,74,127,8,44,66,56, 
  /* [10][0][][] */ -53,127,60,-43,-11,-32,-9,33,54,45,-20,-67,43,33,31,26,15,59,-47,16,-11,-96,-13,-28,89,-22,39,-7,-12,61,-4,-44,26,51,-25,95,41,-90,-29,-20,-1,-32,41,-15,15,-45,-13,111,79,38,-26, 
  /* [11][0][][] */ -17,-21,-96,-63,74,27,49,-7,78,127,-81,-56,-38,-60,-23,-37,18,80,-49,68,72,52,-51,-6,64,-4,43,-29,12,-104,-30,24,-51,18,-85,-61,-36,53,39,-48,-110,-112,11,-83,-29,-89,1,36,7,-2,1, 
  /* [12][0][][] */ 25,-29,29,14,39,-74,-94,-19,24,-78,25,56,70,80,-31,20,15,55,23,121,-86,58,27,33,7,-16,-57,-20,22,-8,68,-62,-52,-89,-40,-17,85,-3,-19,-32,-38,-127,-12,-1,-21,-17,-11,-58,15,-60,38, 
  /* [13][0][][] */ -86,-73,-71,-98,89,-29,-45,-27,-27,33,-15,-46,-26,-123,-60,-44,-9,-85,57,-36,-35,-3,-45,-39,-12,64,-127,-111,-6,-21,55,7,14,77,-13,-53,-48,13,-54,58,32,-64,32,-38,-8,61,-43,29,33,0,-85, 
  /* [14][0][][] */ 51,-63,-35,-9,-2,-6,-34,-74,-36,-5,26,25,-15,36,-10,-30,0,127,53,15,60,57,-96,-65,112,-22,-43,21,-2,-25,12,4,21,33,-56,33,-5,-14,17,55,-13,-28,58,-18,-1,-28,44,84,25,16,8, 
  /* [15][0][][] */ 5,62,14,-127,41,12,-51,5,-73,-50,-3,-7,-3,-29,24,-60,-28,-17,54,95,9,77,-7,-13,-66,112,-21,-74,42,69,37,7,-65,86,-53,-58,9,60,84,17,12,-26,62,-23,-52,-62,-74,18,37,-5,49, 
  /* [16][0][][] */ -1,61,-16,38,-29,11,-87,-16,38,-124,-35,2,-47,-70,37,-27,-9,37,-2,127,-54,10,8,-55,-65,0,34,5,-81,-9,-39,32,-33,2,13,-4,-14,36,-33,-15,-79,61,114,-60,16,50,-3,51,-58,28,-3, 
  /* [17][0][][] */ -11,-48,-5,127,51,-44,98,25,69,19,-89,3,30,2,-37,-34,14,-62,-14,72,2,-40,31,-31,36,77,-31,-40,-45,-29,51,-66,65,-45,76,-10,-3,-6,22,-49,18,0,33,34,20,-60,-30,113,22,32,-40, 
  /* [18][0][][] */ -42,90,7,38,-16,60,-91,45,4,103,-122,-23,-26,7,24,20,51,-45,26,-96,-27,-3,-19,-27,-50,-32,19,-27,-127,-12,-88,-48,-50,22,15,-47,-83,92,-46,9,47,-18,41,30,-23,1,11,-64,-75,-47,32, 
  /* [19][0][][] */ 36,-25,-36,23,18,-7,-39,2,-17,12,104,0,-41,14,-7,60,33,5,42,46,-18,127,-26,-75,9,-7,-21,90,44,21,47,0,-16,84,36,45,3,-56,6,2,107,-26,-16,-18,76,44,17,-38,-23,-12,-22, 
  /* [20][0][][] */ 16,-15,39,127,-23,8,5,-20,-104,20,-23,-1,2,-97,31,33,-15,-28,-23,-11,15,1,84,34,39,5,-15,62,18,18,-18,-5,-6,20,-7,-37,-80,-64,11,34,97,15,-13,-17,-38,-53,7,51,37,25,-108, 
  /* [21][0][][] */ 16,-2,4,-71,-16,-68,86,28,-22,3,83,-3,-3,-40,-64,32,31,-95,-72,31,-100,30,35,-52,89,66,-4,102,46,31,18,-17,-75,99,-7,80,-125,31,110,-17,-24,20,9,5,-25,-55,-5,112,18,0,-127, 
  /* [22][0][][] */ -20,-5,12,10,-25,-4,33,16,-20,-34,-60,-33,27,-3,-14,32,-67,-17,47,4,-14,-8,-37,11,58,15,39,-13,12,-26,127,24,-26,-15,30,69,-43,68,24,-10,-16,66,0,21,-10,-14,28,-9,-36,22,1, 
  /* [23][0][][] */ -2,11,-32,17,24,50,-2,-25,-38,-3,-12,-7,-13,-12,25,10,110,3,-26,10,-26,47,24,-51,-10,-44,-47,26,127,-16,-3,-6,-32,2,-42,-26,-5,-64,-8,24,-87,35,0,-13,3,105,-32,-14,-45,3,27, 
  /* [24][0][][] */ -13,-56,50,-40,127,-107,29,-36,-33,-119,23,13,62,-36,7,97,27,-12,19,-46,93,45,-87,-21,25,10,18,62,110,5,-4,-84,80,6,-23,8,2,-2,-49,59,-31,-37,11,60,3,-92,-65,-95,-28,9,42, 
  /* [25][0][][] */ -59,47,50,14,-44,-31,-47,-48,-60,-15,37,-19,10,-18,57,34,30,127,92,-72,73,52,-2,-5,-5,-53,59,1,-15,36,26,21,64,105,-30,2,13,58,-92,90,-47,-126,28,0,6,-76,-62,93,-38,-19,105, 
  /* [26][0][][] */ 3,2,-25,-58,49,31,11,-25,20,16,24,-55,38,-10,-48,-22,-2,107,-12,8,-28,-94,-38,-33,-18,-84,11,44,30,-31,127,83,-55,23,-3,-10,44,61,-32,21,19,-17,-20,45,-9,2,-13,-3,2,-5,-4, 
  /* [27][0][][] */ -15,28,10,-42,-8,35,31,26,3,-31,23,75,73,-21,-2,-57,6,59,-23,45,-37,41,58,57,55,-42,-26,127,-13,18,49,2,26,4,-18,-105,-2,17,15,-54,52,66,17,42,52,19,32,1,-29,42,-38, 
  /* [28][0][][] */ -20,-10,12,3,35,49,33,-27,15,-2,127,-42,12,-75,-18,39,-8,-37,6,-13,-1,1,-76,41,37,8,-2,-27,-118,-63,-78,21,21,-2,-115,-16,-40,37,-83,8,-56,27,-10,0,48,37,-65,85,2,-16,-40, 
  /* [29][0][][] */ -18,17,1,27,19,-22,21,-47,95,52,38,18,-18,96,65,88,31,-43,40,-39,-53,-14,-86,64,4,-40,41,-46,-36,97,-18,-1,-24,31,-13,76,1,46,127,-54,-6,1,23,-22,-74,107,-118,-88,-30,-21,-32, 
  /* [30][0][][] */ 23,-127,11,42,-13,-4,102,-9,14,-53,-88,30,-13,45,44,-36,108,19,-24,47,42,-49,-7,33,78,21,-67,-26,-81,22,70,-34,-5,43,52,29,92,-57,104,89,-5,-3,-23,-60,-45,46,61,115,-76,31,-43, 
  /* [31][0][][] */ 38,77,-5,22,50,26,51,5,10,40,-51,64,50,23,-55,61,5,-3,16,108,25,9,78,2,-52,38,-81,28,5,-13,-42,-11,-19,19,6,65,1,22,78,51,-49,127,22,-51,21,-37,-6,-45,-6,65,7, 
  /* [32][0][][] */ 8,16,-2,22,29,-32,2,1,72,70,-81,-127,-70,-73,-28,-35,-4,-49,8,45,-83,-124,39,25,7,3,46,-10,0,50,-55,30,91,16,-26,4,54,6,-19,-16,-2,31,26,11,0,21,1,-48,-101,33,-14, 
  /* [33][0][][] */ -11,-45,-25,56,9,-5,-21,-28,3,24,-127,11,8,-44,5,-51,-3,17,-125,-49,2,20,-20,-2,-20,94,67,47,10,-51,-24,65,45,-57,17,64,-24,49,-42,-101,-81,1,-65,34,59,29,54,59,25,-44,-33, 
  /* [34][0][][] */ -23,21,55,1,24,-36,29,-22,4,33,-7,2,77,45,71,-47,-5,54,-19,57,-39,91,75,56,-53,38,-43,-60,-20,-23,-52,-29,102,17,48,-127,63,9,-86,71,-63,11,6,5,66,-38,16,-5,68,-51,54, 
  /* [35][0][][] */ 0,6,48,49,-24,-10,-12,33,56,53,-31,-40,-24,-48,30,-127,-2,-62,5,-11,-29,7,-29,-42,-33,34,18,34,18,-7,-43,-37,-30,43,29,-5,15,-19,6,24,44,23,39,26,8,18,-3,-33,-28,-83,-8, 
  /* [36][0][][] */ 44,26,38,25,15,104,41,-55,43,62,-19,28,-5,16,22,32,3,-69,-70,49,127,-43,-17,-30,117,28,-54,-34,-98,-24,-12,-23,-93,16,-32,49,80,14,83,-37,118,-5,36,23,-45,-46,18,86,106,-43,8, 
  /* [37][0][][] */ -20,6,44,-24,59,32,-33,-17,-39,-127,37,11,-13,0,54,15,92,27,-28,-1,-49,32,23,-108,-26,24,-24,0,46,-17,-57,114,-6,-22,30,16,-16,-81,-18,-63,-72,43,71,-6,24,106,-46,-22,-8,-11,35, 
  /* [38][0][][] */ -84,-54,-19,43,10,36,36,-89,-41,21,28,-19,44,-72,47,-106,47,-51,-51,127,40,22,15,18,92,18,-74,-74,-50,45,53,24,-5,-36,59,-57,64,-103,42,47,1,-6,15,20,-32,-11,9,-112,79,-50,-53, 
  /* [39][0][][] */ -12,8,16,46,2,35,-43,-29,20,-10,88,-55,4,38,-26,8,-57,68,33,-31,35,-42,-1,10,82,18,-59,-109,3,37,-39,-24,-12,-86,127,-49,1,20,-15,-27,-68,45,4,-6,20,-14,-69,-27,-30,-60,39, 
  /* [40][0][][] */ 44,10,45,-72,-10,33,-18,102,-25,56,-5,-14,35,-4,-33,61,15,-70,15,-28,41,2,-39,87,7,32,-101,17,-9,20,-57,40,-57,-86,50,-71,-5,127,25,-50,89,18,101,-11,-6,62,-43,-88,26,-21,18, 
  /* [41][0][][] */ -5,24,24,-20,0,-23,43,-43,-20,22,79,17,27,-7,-29,-18,30,-24,127,-8,-13,-7,6,15,-16,0,32,22,-17,16,24,51,-67,-46,-36,30,27,-23,13,-7,12,-25,-55,17,-11,17,-15,-49,42,-2,-2, 
  /* [42][0][][] */ -16,48,13,-38,-7,-37,76,36,-40,-3,7,-40,43,-4,40,21,-30,65,-43,-50,-33,-36,1,-9,25,30,-60,54,26,-14,-21,31,-6,-17,8,-69,-51,127,36,-19,-11,11,-5,-6,-11,42,-26,-26,5,18,-94, 
  /* [43][0][][] */ 40,-62,7,13,15,-33,-106,-69,111,-42,10,-1,-88,7,79,6,-63,7,83,4,1,9,84,-7,-32,-38,-38,29,-14,-2,26,36,12,74,5,7,-79,-10,25,24,-24,68,-60,34,-4,-93,99,-127,8,-24,-58, 
  /* [44][0][][] */ 17,42,97,27,-52,33,20,4,-53,-19,13,6,-6,-51,62,94,41,127,42,-80,38,48,67,-14,-24,-50,-37,53,9,0,35,-11,2,-5,1,-12,-48,33,40,10,-49,-12,-16,24,78,-1,86,60,-39,-40,-66, 
  /* [45][0][][] */ 26,17,-25,-48,-83,14,1,2,14,-25,26,26,5,-40,-18,-37,-14,76,-16,-2,-21,-115,28,-54,37,-2,48,-15,1,-21,8,12,4,56,-127,28,6,22,64,-46,8,58,-4,-59,93,-16,27,4,39,-83,-62, 
  /* [46][0][][] */ 10,-28,13,-29,32,-14,-37,1,19,21,21,61,11,-6,-41,-33,-27,5,127,-30,1,-8,61,17,48,21,35,-3,33,8,40,73,36,49,-5,7,20,-33,-85,-12,-69,-33,22,13,32,-52,30,-27,-58,19,-49, 
  /* [47][0][][] */ 10,-46,-20,0,14,-23,-18,20,127,50,53,-4,-24,-47,-15,-28,-10,-83,4,96,-1,66,-36,-13,-1,22,-10,14,36,4,61,21,-34,-13,-7,9,-43,-82,3,-10,4,41,23,-14,59,33,10,-35,63,-8,25, 
  /* [48][0][][] */ 3,9,-45,-85,66,-68,45,27,-89,64,-38,-15,6,36,5,59,127,-1,-11,30,-94,-3,29,-20,-16,69,-77,29,33,8,-58,-30,-20,16,-31,-8,-31,72,-108,-17,-25,-60,-24,29,25,-80,-8,-91,0,8,-35, 
  /* [49][0][][] */ 30,-12,38,-35,-14,19,-58,52,37,-20,46,-18,64,-3,3,97,-61,127,-9,9,-72,61,-21,-17,-23,-23,-14,26,36,-40,5,14,36,51,21,8,-51,2,49,29,25,-127,39,10,-76,41,-8,-18,-38,-5,-6, 
  /* [50][0][][] */ 53,12,16,-8,-26,-21,-29,4,4,52,-37,-18,38,-8,51,-2,-38,-3,86,-32,45,-85,96,-3,-34,1,-38,12,60,56,0,-45,-26,115,27,-29,-111,-66,-17,9,-23,-12,-6,38,100,16,21,40,-118,46,-127, 
  /* [51][0][][] */ -90,-63,4,62,59,-82,25,-32,33,60,8,92,15,-40,44,12,-19,35,19,56,14,27,-127,-56,74,28,-8,-26,81,-6,89,31,87,-46,-60,-19,13,-49,-25,-8,-16,-78,13,24,44,-71,94,-51,62,74,-1, 
  /* [52][0][][] */ -8,3,11,-60,26,-33,23,-55,14,-3,-127,54,9,-49,-46,28,24,-102,-45,6,-10,25,-13,32,77,-6,-72,-75,-19,26,-73,-22,49,61,-30,-94,-11,29,9,6,-74,21,-18,46,16,-51,-18,21,16,-15,-40, 
  /* [53][0][][] */ 4,-32,1,8,35,9,51,-28,-9,35,17,-5,-6,-61,-44,-25,19,51,29,-18,31,39,-45,18,-1,-19,-11,42,18,28,-45,-10,8,6,-5,23,-17,37,8,1,42,127,50,18,-13,-42,12,-4,-21,-24,17, 
  /* [54][0][][] */ -3,48,86,34,-41,-15,-22,25,-5,-17,75,-14,5,59,-22,30,-5,-127,-20,49,-12,-11,66,-82,26,7,1,-90,-50,-35,-32,43,69,12,-39,-127,25,18,-72,-19,-41,-22,-79,3,-15,-6,-12,24,13,32,-14, 
  /* [55][0][][] */ -9,-127,41,73,-8,-15,68,35,-1,24,-80,67,-23,-48,-11,-30,36,-67,-19,62,60,92,9,-13,2,16,-54,82,-91,-42,49,-22,17,62,1,-1,-33,-26,-39,62,-70,-12,24,28,-7,-35,114,-3,53,-14,32, 
  /* [56][0][][] */ -2,24,-127,-57,36,59,-63,-48,67,61,-7,-17,30,-57,36,8,90,-38,-14,-104,105,-34,6,47,37,33,40,-45,31,-12,-18,3,73,19,92,15,-22,-31,-1,120,20,-114,-42,15,-50,20,40,108,-22,58,-10, 
  /* [57][0][][] */ 48,37,32,-115,9,33,2,-24,10,1,3,-51,14,31,20,-6,-32,31,-41,28,-3,-8,18,-1,-49,-32,-16,127,47,-27,-5,-5,-21,-16,31,41,30,-37,-5,19,-26,-12,0,32,77,-17,44,-83,54,-2,-8, 
  /* [58][0][][] */ -73,-12,4,6,45,-50,37,32,-21,64,57,33,-30,-23,-32,127,35,15,21,84,-6,3,-8,47,63,26,-21,-18,12,44,36,-19,43,14,0,53,39,-32,27,48,77,12,-70,-3,48,-83,-76,-16,10,-23,2, 
  /* [59][0][][] */ -4,-13,-4,17,11,-45,13,15,44,-3,11,-1,30,3,-39,17,61,-48,7,5,43,-24,21,-20,14,67,30,-7,-25,-19,-3,49,-4,27,-17,86,-5,-48,-69,82,72,-7,-21,-32,127,-32,11,-65,75,-53,0, 
  /* [60][0][][] */ 12,-25,37,12,1,-13,-26,6,11,-6,-13,0,33,-56,17,-3,5,19,-22,-72,-25,-9,-11,-26,8,16,-5,70,-34,10,67,-52,-17,2,20,-13,-47,-20,21,11,68,112,-14,8,127,9,-1,-28,-16,5,-71, 
  /* [61][0][][] */ -19,33,42,-64,-30,-8,-58,48,20,127,-71,-23,-60,64,-3,-61,20,5,44,60,-54,8,-22,-17,-17,24,43,-5,-15,-34,-13,-12,-107,-29,4,35,-2,52,-15,-51,93,-11,1,16,50,36,-51,1,52,6,-57, 
  /* [62][0][][] */ -26,-44,-1,-15,7,-9,-4,1,117,23,37,2,-20,-27,-3,2,16,-22,3,127,11,54,-54,-24,28,42,24,5,-6,16,64,-12,-44,9,14,9,-7,-58,-34,-13,-9,-23,64,-12,35,26,-8,-22,-21,25,-42, 
  /* [63][0][][] */ 78,-90,48,-42,-24,24,-64,-24,-59,95,-41,-2,29,4,10,98,81,-106,-61,102,36,8,49,-11,-11,-84,109,8,-27,66,-1,-41,-73,59,5,19,72,64,5,-37,-17,60,-84,17,6,-63,-62,16,-33,75,127, 
  /* [64][0][][] */ 11,22,42,40,11,27,-18,7,8,-3,14,34,-8,14,46,127,17,5,-6,16,32,-37,-17,42,5,28,-44,59,-9,-50,-8,-33,2,17,-25,-14,-33,-5,44,-16,98,-5,8,42,13,-17,-15,-39,12,-10,-29, 
  /* [65][0][][] */ 17,-20,24,11,-5,-13,17,9,11,-6,-13,-1,-9,16,0,29,32,25,127,-14,-16,-46,12,12,17,14,26,23,-20,-4,26,-23,0,11,-32,4,-17,-2,5,12,-13,-7,-13,2,-6,15,-1,-6,21,-8,9, 
  /* [66][0][][] */ -20,78,27,50,44,43,80,63,-45,-31,11,17,22,4,16,71,-35,-127,-23,6,-60,-17,103,14,69,-29,-47,113,-29,11,37,71,19,12,-29,-89,-68,-3,41,-29,21,-68,-81,2,-37,24,-80,-35,20,-6,85, 
  /* [67][0][][] */ -7,10,42,-13,-4,-1,-48,-10,50,-54,17,-28,7,-5,-14,-74,10,25,14,127,-6,-22,65,-28,25,55,26,21,-25,22,-29,-11,-37,5,12,1,-19,78,-28,-19,59,26,14,-5,11,-7,-37,-3,-6,22,17, 
  /* [68][0][][] */ -40,103,-2,-104,-55,31,-106,3,-22,24,71,-22,-5,94,-60,-69,25,50,-54,-33,19,40,-62,26,-16,-22,105,-9,10,-36,-65,7,57,-19,59,-64,-18,70,-84,-18,120,-68,-5,36,19,35,-123,-127,65,0,-5, 
  /* [69][0][][] */ -25,4,35,44,68,-21,46,-18,-18,-6,-45,-9,-42,-48,-6,11,-27,-125,5,39,-2,-2,-41,53,-7,75,4,49,119,15,-22,-19,-54,44,-46,-61,41,21,-39,5,71,-100,36,36,120,-15,-127,-38,33,-41,3, 
  /* [70][0][][] */ 32,-3,18,-10,-60,5,25,117,-14,-14,-36,2,31,69,37,-36,-4,-19,-15,-38,65,28,-5,-67,-47,13,-50,-14,-35,1,-29,79,-106,14,26,28,15,-33,-127,-4,-22,-86,24,7,-9,-44,-16,-7,-93,19,-68, 
  /* [71][0][][] */ -19,23,0,33,-9,41,31,-12,-38,-61,-18,28,-14,35,-27,-1,-61,-58,17,71,0,18,-35,34,53,82,-10,15,28,61,-14,-14,-61,-20,-27,-36,-24,23,1,12,127,-13,54,-5,37,69,13,23,96,-17,15, 
  /* [72][0][][] */ 55,-40,-8,81,-20,-8,-43,119,-47,-44,-2,-15,-54,-16,74,-79,-19,3,44,68,31,-1,-70,33,-18,8,-62,-70,9,58,103,10,29,23,-25,-31,-38,90,-30,12,-22,-44,-34,-33,127,-10,-85,-45,1,-31,67, 
  /* [73][0][][] */ 7,-22,84,0,-56,-29,8,-20,1,-15,40,-2,45,12,-40,-65,21,18,-21,-36,-8,-5,-11,-23,127,-35,-3,5,-30,50,-11,-21,50,-31,-13,-22,-4,-27,-71,-59,26,73,83,29,20,-50,-14,34,23,9,-29, 
  /* [74][0][][] */ -16,-70,8,-72,-25,34,33,2,77,-120,3,27,71,32,19,80,-47,81,36,6,-33,105,-1,-55,-86,10,14,7,12,-45,-31,-17,-41,14,119,-28,53,46,-127,-114,57,35,-76,54,36,-11,-20,-113,48,-105,-15, 
  /* [75][0][][] */ -4,5,64,-25,0,-3,-38,-19,-28,-63,17,-21,-7,0,-2,-17,77,49,-47,48,4,-9,2,-38,-49,22,26,-7,10,32,-7,127,34,-9,-26,44,-25,-16,28,-28,-52,33,79,-3,16,122,37,-3,9,32,37, 
  /* [76][0][][] */ 102,-37,2,-19,63,21,52,55,5,-34,-11,-30,25,-35,-66,-22,3,27,38,56,19,55,-31,-1,-4,-3,16,26,56,-35,19,33,13,38,44,-81,-17,8,-3,-58,4,-127,-17,8,12,54,-33,-10,55,21,-19, 
  /* [77][0][][] */ -14,-36,11,-15,26,22,-27,-70,-14,2,0,-26,30,82,72,-4,-20,78,-102,-60,-27,70,61,7,42,15,-80,35,38,-7,8,-44,-27,48,-20,127,6,4,76,-17,41,-52,16,-90,37,26,91,-15,-24,-26,-101, 
  /* [78][0][][] */ -9,69,9,-43,12,-48,67,31,127,-40,-43,-3,42,25,22,-25,52,-32,-48,13,14,12,-37,37,-15,-10,12,-39,4,0,34,-48,-93,15,11,10,-8,1,-54,-16,-35,43,40,49,-13,-41,-37,30,57,18,-9, 
  /* [79][0][][] */ -6,35,-23,44,29,-34,13,5,-46,-41,-4,-1,0,65,10,-89,59,127,-1,105,-4,-7,17,-87,30,60,-30,-38,25,1,-4,-6,-87,-4,20,-38,59,28,-35,37,-11,7,-66,-21,-54,97,19,-20,-44,-38,6, 
  /* [80][0][][] */ 42,-5,-27,-6,-44,-14,49,55,49,39,17,-10,-25,-22,-14,-70,-10,66,-20,-27,-8,77,12,20,19,-5,42,36,11,-5,-63,-33,-62,5,9,-1,-15,-20,11,24,-28,7,-127,-90,9,4,-14,3,-41,-7,-35, 
  /* [81][0][][] */ -13,28,27,-82,62,-60,-47,66,32,-84,-127,35,-61,48,-87,-4,10,-87,40,-104,-5,-20,-7,112,63,-6,-116,29,54,91,-43,63,37,-50,10,60,-103,56,-65,-125,-88,-50,-43,-78,33,7,121,55,50,7,-43, 
  /* [82][0][][] */ -52,3,30,35,8,-46,127,51,-26,25,-37,-9,-42,-3,8,-77,5,31,-61,-15,89,-80,33,-1,0,-3,-6,32,17,29,23,8,-68,38,-26,-15,-22,39,22,-70,1,-17,-63,34,-25,17,-2,-30,25,10,32, 
  /* [83][0][][] */ -17,79,0,27,42,1,-55,17,102,55,-42,-1,-4,-22,-35,71,32,7,-53,28,8,-19,56,-7,-47,-80,-3,10,127,65,-67,-20,36,27,-14,40,-19,42,5,-8,31,-44,11,-7,28,-61,-15,12,0,1,6, 
  /* [84][0][][] */ 27,-48,-19,70,-25,29,-3,20,-21,-82,12,9,82,50,-4,48,16,62,37,45,-50,-5,-35,2,-62,-11,-56,24,-18,-54,-30,9,40,36,-1,-2,0,33,127,37,47,85,41,-1,-13,-44,42,-19,1,-16,4, 
  /* [85][0][][] */ -16,29,16,32,-9,84,8,29,127,51,7,-24,-1,25,19,-46,-52,-75,16,-5,-7,17,22,6,-34,-29,-7,-1,-23,-53,-3,-37,38,-41,12,1,-14,16,-26,-24,72,0,31,7,0,23,15,74,63,8,10, 
  /* [86][0][][] */ 70,2,-53,43,-10,-84,-33,-19,-67,-17,-127,20,-64,4,-90,-80,49,30,-70,91,-37,41,-35,-38,68,49,46,25,33,2,-11,-73,-45,-13,-48,4,-56,50,18,8,69,-27,-3,-6,86,58,-44,36,1,54,-53, 
  /* [87][0][][] */ -16,-4,5,-66,-33,-1,45,-59,71,-65,-111,-41,-51,76,-28,3,-63,-102,-13,-108,43,127,59,86,52,-56,58,-85,95,-111,-121,9,-44,2,-86,-34,30,11,-42,-18,56,-63,37,-65,17,-26,-11,-102,-34,19,-21, 
  /* [88][0][][] */ 2,-13,65,-70,15,-79,78,-15,120,-17,10,8,34,-127,70,-31,6,79,-60,58,-66,-107,-46,-53,69,-113,-69,90,-23,-7,-96,6,78,-44,-27,23,-9,40,-41,12,93,54,-17,-26,32,23,60,-22,73,43,-14, 
  /* [89][0][][] */ 25,-5,-12,41,3,-4,-60,60,-12,1,-4,46,29,119,-42,-70,13,14,127,-98,54,9,-16,18,-14,29,17,38,56,-35,-10,-33,12,-21,-49,-9,-8,85,27,4,-40,-35,13,31,-26,90,-78,101,-2,13,27, 
  /* [90][0][][] */ -55,66,81,-19,-5,-15,62,-25,-46,2,-31,52,13,13,51,-25,-25,11,16,49,-41,-26,22,127,54,44,-6,-106,74,25,-37,38,37,99,72,18,29,-5,2,-31,-11,73,-29,1,29,31,-38,89,11,-20,78, 
  /* [91][0][][] */ -3,83,14,-74,4,-84,-63,-76,-42,59,-127,-8,-59,-81,47,11,80,-101,-61,19,-69,39,-53,-105,69,58,8,-47,55,-35,-123,-92,-51,-38,-81,41,34,66,84,2,90,97,8,18,121,-121,-36,-68,82,41,-55, 
  /* [92][0][][] */ -71,68,15,-21,35,-13,76,-18,9,40,29,17,7,127,96,-15,15,-16,-31,-64,8,-33,-26,35,18,31,-3,-78,50,-44,-38,45,23,-3,-89,21,35,-8,34,44,18,-1,15,81,3,2,32,105,-64,-25,86, 
  /* [93][0][][] */ -43,-13,-28,-17,32,6,3,-20,3,-40,2,0,-49,-56,-28,-14,-3,-19,127,13,-3,3,55,-38,-58,-17,-32,9,-8,-1,-37,-5,3,27,22,-6,-9,-18,-13,-14,-20,15,-25,23,-7,-24,6,-33,32,6,29, 
  /* [94][0][][] */ -10,35,14,16,25,-34,-21,17,66,127,-2,5,3,53,-14,95,26,-10,27,-16,-44,0,-65,33,-30,16,-28,9,14,34,-37,-16,2,-51,-25,-38,-69,8,-30,6,80,-34,14,84,65,42,-2,-9,25,-17,-35, 
  /* [95][0][][] */ 28,3,13,26,12,-12,36,-13,7,2,77,-10,21,12,95,-24,-6,28,-8,7,-8,44,39,24,-30,-13,39,-5,-10,-2,-18,-1,26,-15,0,-6,17,-30,64,-2,-10,11,26,127,35,2,-16,19,-2,2,-22, 
  /* [96][0][][] */ -70,24,17,-25,2,40,0,26,14,73,70,-42,97,53,-24,33,-41,-13,127,123,34,-39,61,49,3,-86,84,-91,-9,-31,93,-16,-86,47,-50,-73,30,27,33,16,33,66,-3,26,-83,42,-82,43,-60,21,-51, 
  /* [97][0][][] */ -16,1,38,-100,60,22,-22,22,5,16,-22,31,-32,38,70,-7,1,-36,14,22,25,50,-76,45,-53,31,-84,16,-66,36,-11,-24,24,-46,127,-41,-22,-13,-11,-32,-17,67,-33,-12,30,2,74,4,42,27,-74, 
  /* [98][0][][] */ 26,15,-2,-17,46,-26,-15,-12,-21,59,44,16,-18,18,-26,-36,-22,127,27,-57,27,21,-100,-55,98,-37,-55,-14,11,-2,-40,17,14,-26,-70,61,-23,-7,15,-13,60,89,70,-14,-28,-37,4,100,38,17,-11, 
  /* [99][0][][] */ 12,-24,8,40,-7,-18,-36,13,-33,17,-2,-23,30,-8,50,-56,63,-33,-12,36,-14,19,15,-15,-6,-28,-27,-10,16,17,-3,127,-67,17,11,12,-38,31,38,-3,1,13,-4,12,26,-26,13,-20,4,-2,-22, 
  /* [100][0][][] */ 53,24,23,4,1,-90,-44,60,-46,5,4,5,4,-6,53,-9,-88,30,-20,-127,-40,32,4,-37,-18,18,-34,74,63,-55,30,-45,-58,63,-2,-8,-67,44,1,-3,-1,45,-66,-9,-26,80,39,34,54,9,-54, 
  /* [101][0][][] */ -15,-9,15,-18,-42,-41,22,21,-73,-11,16,17,-29,-60,-3,-17,35,22,77,23,83,127,64,-36,39,4,-91,38,80,10,-68,38,-103,-22,-103,11,33,34,1,-9,33,-59,50,-74,3,-18,-4,-64,-17,-81,-26, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant51_scale = { 102, { 0.0040908139199018478, 0.0029389990959316492, 0.0041707698255777359, 0.0045148194767534733, 0.0047891917638480663, 0.0027679817285388708, 0.0036878464743494987, 0.0075176567770540714, 0.003818039083853364, 0.0024146696086972952, 0.004996816162019968, 0.002322586253285408, 0.0057886126451194286, 0.0039555947296321392, 0.0052426238544285297, 0.0055705015547573566, 0.0052567585371434689, 0.0070297196507453918, 0.0049000047147274017, 0.0026250234805047512, 0.0029343401547521353, 0.0028681030962616205, 0.0036592425312846899, 0.0037832541856914759, 0.0040251114405691624, 0.0042919004335999489, 0.0039868527092039585, 0.0026456019841134548, 0.0031936478335410357, 0.0017146869795396924, 0.0035847120452672243, 0.0057480246759951115, 0.0049522249028086662, 0.0028944204095751047, 0.0025609729345887899, 0.0084181465208530426, 0.0039436230435967445, 0.0064063933677971363, 0.006897317711263895, 0.0036010576877743006, 0.0043614301830530167, 0.010763733647763729, 0.0025041284970939159, 0.0026403761003166437, 0.0021364996209740639, 0.0021605412475764751, 0.0034830709919333458, 0.0042153140529990196, 0.0046309842728078365, 0.0026084166020154953, 0.0023454716429114342, 0.0045055346563458443, 0.0027493236120790243, 0.0066438661888241768, 0.0035572296474128962, 0.0037386564072221518, 0.0024084909819066525, 0.0037135523743927479, 0.0053289411589503288, 0.0071148518472909927, 0.0020023689139634371, 0.0049242852255702019, 0.0054328846745193005, 0.0019654766656458378, 0.0029404025990515947, 0.0093437992036342621, 0.0046634445898234844, 0.0076994961127638817, 0.0055081900209188461, 0.0041807889938354492, 0.0039948946796357632, 0.0062304167076945305, 0.0062124547548592091, 0.0043294043280184269, 0.0027821273542940617, 0.0045047621242702007, 0.0053175156936049461, 0.0025781113654375076, 0.0037593485321849585, 0.0039517874829471111, 0.0057854917831718922, 0.0021376102231442928, 0.0035912448074668646, 0.0057565215975046158, 0.003278432646766305, 0.00627488037571311, 0.0035916988272219896, 0.0049353810027241707, 0.0035882389638572931, 0.0071528959088027477, 0.0031280487310141325, 0.0033100040163844824, 0.0044439435005187988, 0.0080998772755265236, 0.0054381457157433033, 0.0043202084489166737, 0.0039486153982579708, 0.0033341641537845135, 0.005141169298440218, 0.0058861374855041504, 0.0026266847271472216, 0.0045957323163747787, } };
const TfArray<102, int> quant51_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int32_t tensor_data52[102] = { 42682, 25278, 30937, 23983, 4942, 8393, 293, 8660, 6809, 11652, -27314, 27778, 9893, 51719, -17836, 3282, 9154, -18491, 30764, -30378, 10084, -12530, -2416, 19982, 341, -15114, 6234, -27725, 27629, 14953, -19592, -37373, 21160, 31150, -2127, 8386, -20276, 1804, 13650, 18758, -1877, -3638, 13525, 14990, -12979, 27825, 3850, -8905, 21571, -3313, 18713, -12078, 44091, -18026, 29996, 1548, 7841, 7362, -35595, -16957, 5912, 198, -8419, 12174, -10655, -9883, -1253, -13773, 14910, 8409, 27648, -25563, 7956, -185, 367, -8059, -8295, -4892, 6659, 4649, 18162, 29089, 10200, -13679, -22714, -18618, 13721, 45729, 3346, -20788, -30057, 30479, -25498, 16355, -14723, -26608, -20627, 5347, -13996, 5753, 7995, 12741, };
const TfArray<1, int> tensor_dimension52 = { 1, { 102 } };
const TfArray<102, float> quant52_scale = { 102, { 6.8212451878935099e-05, 4.9006466724677011e-05, 6.9545676524285227e-05, 7.5282550824340433e-05, 7.9857585660647601e-05, 4.6154829760780558e-05, 6.1493155953940004e-05, 0.00012535348650999367, 6.3664054323453456e-05, 4.0263512346427888e-05, 8.3319624536670744e-05, 3.8728063373127952e-05, 9.6522468084003776e-05, 6.5957734477706254e-05, 8.7418353359680623e-05, 9.2885566118638963e-05, 8.7654043454676867e-05, 0.00011721735791070387, 8.1705336924642324e-05, 4.3771065975306556e-05, 4.8928781325230375e-05, 4.7824309149291366e-05, 6.1016195104457438e-05, 6.3084036810323596e-05, 6.7116896389052272e-05, 7.1565475082024932e-05, 6.6478947701398283e-05, 4.4114203774370253e-05, 5.3252617362886667e-05, 2.8591621230589226e-05, 5.9773436078103259e-05, 9.5845680334605277e-05, 8.2576087152119726e-05, 4.8263136704917997e-05, 4.270305362297222e-05, 0.00014036874927114695, 6.5758111304603517e-05, 0.0001068236815626733, 0.0001150096213677898, 6.0045989812351763e-05, 7.2724855272099376e-05, 0.00017948033928405493, 4.175519643467851e-05, 4.4027063268003985e-05, 3.5625154851004481e-05, 3.6026038287673146e-05, 5.807861452922225e-05, 7.0288435381371528e-05, 7.721954898443073e-05, 4.3494153942447156e-05, 3.910966552211903e-05, 7.5127732998225838e-05, 4.5843713451176882e-05, 0.00011078343231929466, 5.9315178077667952e-05, 6.2340383010450751e-05, 4.016048478661105e-05, 6.1921789892949164e-05, 8.8857654191087931e-05, 0.00011863690451718867, 3.3388587326044217e-05, 8.2110207586083561e-05, 9.0590867330320179e-05, 3.2773423299659044e-05, 4.9029869842343032e-05, 0.00015580357285216451, 7.7760807471349835e-05, 0.0001283855817746371, 9.1846552095375955e-05, 6.9712747063022107e-05, 6.6613043600227684e-05, 0.00010388935334049165, 0.00010358984582126141, 7.2190836363006383e-05, 4.6390701754717156e-05, 7.5114847277291119e-05, 8.8667140516918153e-05, 4.2988827772205696e-05, 6.2685416196472943e-05, 6.5894251747522503e-05, 9.6470430435147136e-05, 3.5643672163132578e-05, 5.9882364439545199e-05, 9.598736505722627e-05, 5.4666365031152964e-05, 0.00010463075886946172, 5.9889935073442757e-05, 8.2295220636297017e-05, 5.9832244005519897e-05, 0.00011927126615773886, 5.2158782636979595e-05, 5.5192802392411977e-05, 7.4100724305026233e-05, 0.00013506175309885293, 9.0678593551274389e-05, 7.2037502832245082e-05, 6.584135553566739e-05, 5.5595661251572892e-05, 8.5726649558637291e-05, 9.8148651886731386e-05, 4.3798765545943752e-05, 7.6631731644738466e-05, } };
const TfArray<102, int> quant52_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int8_t tensor_data53[1*3*3*102] = { 
  /* [0][0][][] */ -127,-56,-110,68,65,-49,-96,-119,43,-110,70,-59,42,-22,1,53,47,-70,75,-81,-116,-99,-63,-41,58,62,-51,-89,-43,6,17,3,39,-67,-127,51,43,64,-105,-58,-30,19,-90,-67,-57,-34,-25,-127,-17,-127,-83,-127,-26,58,-40,-75,-54,-26,26,41,-71,-48,58,-12,-94,-118,79,-69,-127,-127,32,102,48,52,90,-90,8,-119,-5,50,-64,-90,6,-96,-111,47,-93,31,58,41,-31,-69,12,66,75,96,96,-64,-127,-127,-127,84, -95,-55,-127,127,127,-45,-100,-98,123,-91,13,-38,74,81,68,46,100,80,127,-109,-127,-126,-127,-121,74,52,-96,-59,-127,-127,94,111,66,-127,-101,29,127,127,26,-100,90,-3,-118,-127,-127,-127,-25,54,40,-121,-127,-80,-127,101,-95,-49,-58,-127,100,66,-117,42,64,-54,-78,-100,123,87,-93,-63,38,106,123,15,98,-89,53,-127,-73,64,-83,-115,27,127,-101,97,-34,7,127,95,-20,20,46,106,31,94,51,-127,-126,-109,-91,79, -92,-54,-111,44,82,-38,-105,-123,16,-127,-30,-81,50,-28,4,49,11,-86,24,-57,-116,-97,-52,-28,42,48,-36,-76,-75,0,-52,-26,57,-88,-111,40,50,43,-77,-70,19,3,-102,-57,-77,-40,-33,104,-4,-110,-77,-103,-28,76,-49,-42,-61,-29,61,-127,-65,26,-127,-7,-86,-127,49,18,-122,-95,8,88,56,-127,100,-64,-127,-110,-7,67,-84,-75,-102,31,-94,45,-127,18,53,41,-48,-88,10,61,-127,110,83,-27,-79,-112,-121,48, 
  /* [0][1][][] */ -91,-127,-59,102,94,-68,-127,-52,119,-52,-103,-52,67,77,64,76,87,77,117,-124,-81,-127,-30,-127,94,18,-94,-127,-61,-24,100,124,67,-119,-45,59,-28,89,77,-99,127,79,-97,-66,-75,-57,-91,-112,92,-116,-80,-95,-9,66,-75,-108,-77,-45,84,69,-76,-60,92,-83,-127,-61,122,101,-86,-86,78,62,43,44,-16,-100,79,-62,-87,33,-110,-102,31,120,-29,58,-65,36,78,46,-25,84,-15,-20,39,53,31,-45,-69,-102,-107,108, -48,-47,-100,77,100,-92,-61,-59,127,-26,127,-70,127,127,127,127,43,127,94,-54,-111,-110,-110,-88,127,127,-122,-71,-110,-103,127,98,78,-69,-102,-32,-62,100,109,-108,71,103,-127,-110,-121,-97,-127,81,110,-92,-100,-39,-53,127,-127,-115,-116,-117,79,72,-127,36,25,-74,-89,-24,100,93,-61,-29,127,81,127,58,64,-38,67,-52,-116,-81,-94,-93,68,96,-119,127,-35,127,115,127,-127,101,127,127,37,-5,127,-115,-88,-49,-43,127, -68,-106,-55,93,65,-63,-110,-50,85,-74,48,-77,68,75,46,56,127,77,106,-127,-83,-113,-49,-103,78,35,-92,-123,-57,-11,78,127,59,-115,-49,-127,-11,93,84,-118,105,95,-79,-54,-83,-49,-119,70,95,-100,-70,-84,-10,79,-63,-114,-69,-76,78,64,-81,59,-119,-93,-100,-61,127,72,-82,-64,62,54,50,53,-10,-118,103,-65,-88,54,-127,-115,53,95,-26,92,-82,18,74,60,-36,75,-12,22,-34,71,7,-80,-74,-88,-78,90, 
  /* [0][2][][] */ -49,-74,-37,31,-47,-127,-60,-127,-7,-69,101,-127,54,-68,-45,100,43,20,-42,-103,-50,-1,-27,-84,34,30,-67,-28,-20,11,47,105,79,-37,30,72,-26,30,-21,-85,27,40,-32,19,-50,2,-47,-117,18,-43,-11,-102,0,-81,-88,-127,-67,-27,-100,31,-38,-127,36,-81,-40,-114,26,-127,-63,-77,-124,-126,16,-78,-57,-127,41,-63,-116,2,-71,-114,68,40,-127,32,-72,54,-27,0,-3,75,42,-61,33,127,29,-38,-19,-9,-73,76, -99,-97,-57,74,3,-126,-61,-109,81,-36,-6,-101,123,67,-33,126,73,114,126,-100,-10,-18,-59,-125,60,24,-127,-26,-28,-44,103,111,127,-41,-6,-35,-127,73,127,-127,94,127,-85,-40,-44,-23,-60,55,127,-1,-53,-40,31,86,-67,-115,-127,-107,127,93,-62,39,43,-127,-89,-78,114,103,-71,-70,-16,-25,122,-69,-114,-94,95,-27,-127,-127,-85,-127,127,106,-101,55,-30,59,50,33,-125,127,54,-87,41,-2,63,-37,-106,-37,11,91, -33,-73,-38,25,-56,-121,-75,-107,1,-64,-92,-96,40,-58,-45,92,-27,24,-73,-68,-52,7,-11,-46,45,9,-70,-23,16,-5,52,81,31,-47,19,-28,-59,13,15,-99,67,39,-34,21,-56,-5,-62,60,42,-58,-15,-72,-6,-3,-89,-106,-90,-15,-51,-3,-48,49,-87,-63,-35,-106,2,35,-74,-46,-90,-127,27,-85,-127,-80,26,-23,-126,-1,-82,-98,72,70,-91,23,-87,71,-40,21,9,78,16,-66,-81,83,41,-21,-28,-1,-70,64, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant53_scale = { 102, { 0.0049351551569998264, 0.011336855590343475, 0.0063106166198849678, 0.0083127068355679512, 0.0042484486475586891, 0.0046826950274407864, 0.0078215626999735832, 0.0041638324037194252, 0.0048821968957781792, 0.010715991258621216, 0.0088467346504330635, 0.0067908964119851589, 0.0044206622987985611, 0.0082329744473099709, 0.0076083405874669552, 0.0036740982905030251, 0.0063720541074872017, 0.0056763426400721073, 0.0064662103541195393, 0.0091962283477187157, 0.0073538948781788349, 0.0069082612171769142, 0.010243494063615799, 0.006882981862872839, 0.0048211780376732349, 0.009262746199965477, 0.0074396617710590363, 0.0093518104404211044, 0.0075034927576780319, 0.010412471368908882, 0.0052741006948053837, 0.0037156383041292429, 0.0060572498477995396, 0.0043258611112833023, 0.0088949119672179222, 0.011255347169935703, 0.0081307422369718552, 0.0063878819346427917, 0.0066029359586536884, 0.0049302713014185429, 0.0041930568404495716, 0.0042398450896143913, 0.0097978636622428894, 0.0093535920605063438, 0.0095165558159351349, 0.011427121236920357, 0.0062200957909226418, 0.0049064680933952332, 0.0040985764935612679, 0.0087575223296880722, 0.0055263666436076164, 0.0061005298048257828, 0.027921255677938461, 0.0037905997596681118, 0.0082679269835352898, 0.0049570845440030098, 0.0079998336732387543, 0.0080781383439898491, 0.0044103888794779778, 0.0058235982432961464, 0.012857578694820404, 0.0056603667326271534, 0.0050680381245911121, 0.0056231389753520489, 0.0089600356295704842, 0.0063704028725624084, 0.0040716137737035751, 0.0047425916418433189, 0.0046029300428926945, 0.0060170902870595455, 0.0075198379345238209, 0.0042644510976970196, 0.0036648288369178772, 0.009259822778403759, 0.0066263787448406219, 0.0091217057779431343, 0.0046275225467979908, 0.0082995574921369553, 0.0048237275332212448, 0.0077690458856523037, 0.0050248187035322189, 0.0076771075837314129, 0.0051789619028568268, 0.0044639650732278824, 0.0076207155361771584, 0.0046029407531023026, 0.0093874437734484673, 0.0068256165832281113, 0.0036731536965817213, 0.0044294525869190693, 0.01245935820043087, 0.0046929791569709778, 0.011851852759718895, 0.0091485213488340378, 0.0066742054186761379, 0.013702723197638988, 0.0059388158842921257, 0.0099364724010229111, 0.0054557910189032555, 0.006911733653396368, 0.009993530809879303, 0.0040285084396600723, } };
const TfArray<102, int> quant53_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 3 };
const ALIGN(16) int32_t tensor_data54[102] = { 23095, 23136, 26797, -7723, -3088, 27778, 25758, 29571, -10106, 10412, -984, 21223, -3376, -2080, -4986, -3296, -1955, -4538, -1735, 18843, 23374, 20235, 23890, 31473, -599, -7499, 23626, 17402, 24290, 16567, -6090, -4027, -9363, 34817, 19142, -1136, 4693, -3734, -2737, 29786, -3816, -2428, 23273, 17888, 21463, 19256, 19407, 910, -1120, 25220, 25996, 18045, 5292, -2272, 22661, 26750, 22834, 25532, -343, -1295, 20135, 379, 1235, 30371, 25282, 22946, -12078, 437, 22832, 19031, -1666, -2160, -6893, -1189, -452, 25551, 178, 22490, 34717, 3159, 33603, 18162, -4679, -3267, 22269, -4240, 17067, -3046, -1773, -2677, 12091, -9830, -2836, -1713, -1182, -13182, -11788, 16088, 24268, 20856, 23475, -5296, };
const TfArray<1, int> tensor_dimension54 = { 1, { 102 } };
const TfArray<102, float> quant54_scale = { 102, { 8.1031648733187467e-05, 0.00018614290456753224, 0.00010361572640249506, 0.00013648858293890953, 6.9756431912537664e-05, 7.6886441092938185e-05, 0.0001284243626287207, 6.8367095082066953e-05, 8.0162113590631634e-05, 0.00017594876408111304, 0.00014525692677125335, 0.00011150156933581457, 7.2584050940349698e-05, 0.00013517943443730474, 0.00012492340465541929, 6.0326015955070034e-05, 0.00010462447971804067, 9.3201408162713051e-05, 0.00010617046063998714, 0.00015099537267815322, 0.00012074559344910085, 0.00011342861398588866, 0.00016819070151541382, 0.00011301354243187234, 7.9160228779073805e-05, 0.00015208753757178783, 0.0001221538259414956, 0.0001535499031888321, 0.00012320188398007303, 0.00017096518422476947, 8.65968904690817e-05, 6.1008071497781202e-05, 9.9455624877009541e-05, 7.1027483500074595e-05, 0.00014604796888306737, 0.0001848045940278098, 0.00013350085646379739, 0.00010488436237210408, 0.00010841539187822491, 8.0951460404321551e-05, 6.8846937210764736e-05, 6.9615161919500679e-05, 0.00016087378025986254, 0.00015357916709035635, 0.00015625491505488753, 0.00018762500258162618, 0.00010212943743681535, 8.0560632341075689e-05, 6.7295637563802302e-05, 0.00014379213098436594, 9.073891123989597e-05, 0.00010016625310527161, 0.00045844665146432817, 6.2238883401732892e-05, 0.00013575333287008107, 8.1391714047640562e-05, 0.00013135143672116101, 0.0001326371420873329, 7.2415372414980084e-05, 9.561923798173666e-05, 0.00021111207024659961, 9.293909533880651e-05, 8.3213490142952651e-05, 9.232784213963896e-05, 0.00014711725816596299, 0.00010459736949997023, 6.6852931922767311e-05, 7.7869895903859288e-05, 7.557675417046994e-05, 9.8796233942266554e-05, 0.00012347025040071458, 7.0019181293901056e-05, 6.0173817473696545e-05, 0.00015203954535536468, 0.00010880031186388806, 0.00014977176033426076, 7.5980547990184277e-05, 0.00013627269072458148, 7.9202087363228202e-05, 0.00012756207433994859, 8.2503858720883727e-05, 0.00012605251686181873, 8.5034778749104589e-05, 7.3295050242450088e-05, 0.00012512659304775298, 7.557692879345268e-05, 0.00015413497749250382, 0.00011207164789084345, 6.0310507251415402e-05, 7.2728384111542255e-05, 0.00020457357459235936, 7.705529424129054e-05, 0.00019459877512417734, 0.00015021205763332546, 0.00010958558414131403, 0.00022498873295262456, 9.7511030617170036e-05, 0.00016314962704200298, 8.958011312643066e-05, 0.0001134856283897534, 0.00016408649389632046, 6.6145170421805233e-05, } };
const TfArray<102, int> quant54_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(16) int8_t tensor_data55[102*1*1*102] = { 
  /* [0][0][][] */ 4,-7,0,31,17,-4,1,57,59,23,11,29,127,89,4,68,49,-24,-4,39,11,62,27,-27,47,9,15,-2,66,-34,-25,-6,8,-62,-64,-10,13,-43,-48,13,-13,-31,25,-12,65,-8,24,-17,3,-26,-69,-9,31,26,-15,27,-32,84,20,-7,28,26,3,20,36,-34,-49,-19,17,-38,-12,-18,-1,-45,51,-59,-39,16,-70,-1,-59,12,15,-17,17,7,19,-43,21,91,24,28,-61,-32,9,53,-25,1,-16,51,29,-55, 
  /* [1][0][][] */ 57,-106,29,-13,36,0,-67,23,-75,-25,25,-39,-42,115,-87,62,25,1,9,-24,47,2,57,-13,58,-2,26,83,-35,47,10,-14,-67,15,-44,-40,44,-39,79,-79,5,-51,42,73,-53,-35,7,52,60,-72,73,-10,60,-91,-26,-126,86,47,9,83,-40,-27,54,-56,-64,27,-12,-65,-28,46,-8,108,47,33,88,-67,4,19,-44,-58,-2,-1,40,-31,15,23,115,-48,89,41,9,18,-47,64,28,-11,2,-48,-65,-51,49,-127, 
  /* [2][0][][] */ -11,-17,-1,-3,-70,4,-32,-97,-37,15,39,19,-84,11,21,-44,-74,-46,-35,6,-26,52,0,-105,-18,-2,101,-34,14,-83,70,-48,-56,-42,60,32,6,6,-30,14,106,-32,65,38,-68,-9,10,42,-3,-36,49,29,-22,-19,-37,-2,-63,-9,-29,39,-60,-23,-11,-43,-34,-36,-10,-6,27,-127,-4,61,21,-19,-26,-15,7,39,81,-17,56,-18,-2,19,-47,54,58,16,-33,-3,5,79,-26,15,32,-4,-38,20,-22,-104,-5,34, 
  /* [3][0][][] */ -39,31,-26,6,3,-39,-119,63,-52,-6,-40,94,49,-53,-12,-38,-39,9,-77,-31,1,47,-72,-33,-30,-42,-89,-44,12,-20,85,44,-46,-66,-11,-43,44,4,-17,-13,53,46,-48,14,33,-5,-1,-3,57,13,-9,-18,25,-54,-3,46,-15,98,46,27,57,-3,-30,-84,-34,67,-3,-37,8,26,-33,-31,-91,-40,127,-73,51,8,67,-57,40,70,-4,-39,11,83,28,-3,-24,3,-107,-92,-103,36,47,85,50,-33,-24,18,-113,-66, 
  /* [4][0][][] */ -54,-2,-15,23,4,-29,-15,-16,-45,5,66,-30,36,23,12,-68,-6,73,25,-2,-14,11,78,28,11,-22,-6,43,27,-17,-29,25,-15,-68,13,-11,7,44,31,-43,7,59,-51,-88,-48,-50,-50,39,12,7,-14,-20,-8,-2,72,-9,-18,13,-51,-36,-10,13,54,8,-30,-14,79,6,18,9,-27,-64,-32,-31,5,9,-11,32,-36,1,-49,-4,10,8,10,-33,-18,-29,-49,12,6,-51,-70,127,-14,-3,17,21,-51,-64,75,-71, 
  /* [5][0][][] */ -11,41,-27,-86,5,-5,-49,-26,-40,-10,-1,2,-11,-21,83,-4,-44,48,-53,11,111,51,-25,-55,-70,29,-63,127,1,-21,80,-15,6,16,-16,-41,11,20,103,-32,3,-21,-68,8,-53,113,52,17,11,-81,19,-4,49,78,-40,-36,-5,30,-73,-4,-55,-29,-6,-38,-68,-74,-27,-21,-86,44,51,11,-15,-26,0,43,-67,7,-110,-45,-42,9,51,17,37,-23,40,48,-38,75,84,57,-24,10,54,-29,32,30,33,91,-9,7, 
  /* [6][0][][] */ -1,-52,-43,20,-14,8,-16,-33,-36,-11,31,28,3,-9,-19,-21,-57,-48,-10,19,88,99,-58,-1,-47,-45,27,-10,-11,-41,-57,7,-40,4,-47,20,6,67,-25,59,-97,45,-43,-25,9,-8,29,-17,36,21,42,22,54,89,-24,54,2,25,-29,6,-59,39,-36,27,-37,14,26,-20,23,47,-15,-64,10,0,65,-56,52,-52,58,62,-46,-39,-11,23,-71,-58,1,-1,11,58,48,66,-31,8,1,-41,22,-1,-55,-74,-34,-127, 
  /* [7][0][][] */ 0,127,40,21,81,-3,44,14,3,81,-10,-84,-59,-70,65,48,-31,-61,22,-70,-70,2,6,42,-5,-70,-10,0,58,35,-70,-20,-73,-57,-27,33,41,-12,88,14,-61,13,-6,84,-82,-88,-63,33,26,-70,-43,-63,-37,-3,46,-42,12,45,3,10,-9,11,24,39,-33,29,-45,-11,-27,-38,-22,60,41,40,18,48,68,71,43,-22,104,-9,94,66,-9,31,12,30,-83,-64,-10,50,22,59,-8,54,12,21,-35,-72,-19,4, 
  /* [8][0][][] */ 87,80,6,-36,27,-22,-18,-46,-24,-10,41,12,80,-11,109,-63,30,-20,-55,8,-37,-20,-14,66,-43,58,-81,-81,79,108,-39,41,3,79,-59,-9,-13,10,-127,22,-95,-83,8,-16,-46,-4,-51,-2,-30,13,-14,-49,-20,76,9,40,-28,34,5,-34,-51,9,-2,-58,82,-48,74,32,-3,-3,-18,-2,-29,-35,14,-30,-32,10,-83,7,-55,10,-55,-9,53,-24,-18,38,10,26,42,14,-3,-26,-23,-43,62,-36,7,-28,-80,-62, 
  /* [9][0][][] */ 86,-124,-17,26,20,33,-28,-20,122,67,-43,38,-19,66,102,-56,-57,28,116,-21,91,32,9,-55,62,-43,46,-88,-41,-19,-13,-2,-8,4,-17,12,1,46,23,-13,43,36,2,11,-58,-38,70,-10,61,-93,65,41,16,7,-11,14,-125,22,-69,39,22,41,-9,1,22,33,-50,60,-73,126,41,37,-4,36,-60,-64,-44,-10,-3,63,28,1,43,-115,-46,-73,-16,-31,-50,-34,28,-4,3,16,-36,39,44,50,11,-61,127,16, 
  /* [10][0][][] */ -43,35,-55,55,1,-15,-13,0,8,30,15,-68,55,30,44,-27,-3,-38,-65,-18,-8,-11,-41,-37,66,47,24,20,-51,-2,-10,-7,-43,-34,20,18,5,28,-16,3,-12,-86,-66,-17,-10,-18,-23,-11,42,4,28,25,-53,7,65,-10,8,127,23,-8,-37,7,1,58,11,-20,28,-24,-13,28,-28,-11,-16,-37,6,-44,2,26,67,-2,-8,-5,23,29,-7,39,-56,99,-108,-17,7,3,-14,-79,-34,-62,-60,-59,2,30,43,-43, 
  /* [11][0][][] */ 36,-5,-5,50,18,-2,-66,24,32,10,-19,-23,48,127,29,-29,35,-46,39,-13,0,-54,21,-7,-47,32,32,-53,2,44,-43,21,-69,65,49,2,-24,6,-51,-3,33,-36,-11,36,29,-13,24,18,19,15,-99,2,-53,-8,-47,5,-41,-23,4,-18,-12,-11,-4,-6,77,42,-69,37,12,-58,15,2,33,1,-2,96,15,-8,11,-26,-11,0,48,39,-4,78,22,-28,-37,12,-22,-11,-50,5,36,-25,-2,11,-16,25,-10,8, 
  /* [12][0][][] */ -69,50,34,33,30,-18,80,-6,-7,-2,-17,-11,-30,-49,35,0,16,-5,-8,-19,34,60,6,106,58,60,12,22,-30,26,-3,-14,-34,16,-59,21,-34,20,-9,-31,-60,8,-68,21,8,-13,-51,53,-39,-37,-90,-73,24,38,-21,-42,37,-15,-31,-17,17,-12,59,-20,-3,57,52,-17,19,12,5,8,43,66,-1,36,39,-32,40,-18,-18,13,13,-25,9,10,-30,6,-20,58,-20,-56,52,9,-33,55,-91,14,-7,79,46,-127, 
  /* [13][0][][] */ 127,-28,43,39,-16,62,-28,-5,12,-46,25,-9,-38,-53,4,42,-11,-3,-55,-24,47,1,10,-8,-54,-13,43,75,-37,-24,-36,-14,59,0,-19,-82,-42,-30,-57,-55,-13,1,-82,-25,-5,23,-23,-7,57,-40,23,56,9,27,68,77,11,23,-46,-71,-71,-24,-16,64,-90,2,-100,-3,-27,-44,32,23,-22,-17,14,-73,35,30,-97,5,-9,-4,27,32,28,-15,41,45,33,38,-38,-56,-85,-20,65,19,-64,31,53,-8,5,-25, 
  /* [14][0][][] */ -8,-74,-80,76,18,-38,-9,2,47,-55,41,54,-75,62,-20,22,-121,-85,-127,-10,-22,85,-53,-35,-122,-7,-52,18,-95,69,62,-94,71,29,-40,66,-25,-33,87,58,-13,-8,12,-50,-94,53,-29,-14,19,22,110,4,-26,53,13,3,-1,21,-87,37,53,102,-9,43,-13,-2,23,-5,-6,32,-30,-10,-31,-22,17,-108,86,63,50,60,-59,-42,10,-34,26,-21,7,29,19,-6,-13,-51,42,-33,-26,-10,-30,-58,-5,-32,69,70, 
  /* [15][0][][] */ -18,34,-27,22,-54,-28,-21,-63,-4,30,-6,15,114,-31,92,40,22,-57,1,-34,-30,-33,4,31,9,6,-18,1,-24,-8,-40,17,0,40,-10,-9,-31,-23,-27,-26,12,-30,-127,-13,32,4,5,-5,-5,-45,-95,-28,39,-48,30,50,-32,-36,-40,-37,83,-38,17,-52,-30,54,17,41,-26,25,46,11,4,-9,29,-11,39,48,16,40,57,5,-30,88,-10,-54,-72,-4,-33,-82,-18,-20,32,-42,-4,-35,-5,-3,30,18,28,-11, 
  /* [16][0][][] */ 13,38,57,58,45,-2,69,-26,-49,25,-52,4,24,12,1,0,1,-15,32,78,35,-3,20,80,6,48,4,-113,28,21,29,-30,-90,-48,-6,-51,34,-32,-81,79,70,-61,-24,-16,-44,-64,-73,-19,67,93,34,6,-53,83,25,67,-14,-15,-29,34,21,-62,-40,-127,-77,-10,-23,62,-29,-29,42,92,-33,46,8,20,-22,7,67,10,4,13,49,-23,61,49,31,32,95,31,2,-49,-20,-24,-23,39,-3,-62,-50,2,-38,48, 
  /* [17][0][][] */ 47,8,-13,-44,-6,-18,46,-6,11,-100,0,-8,-17,-50,-16,-29,3,-70,-23,14,-24,25,33,-17,5,-22,-5,39,33,21,25,80,5,-19,32,-20,19,10,-14,3,-32,1,-62,-7,61,-71,-3,0,44,-10,5,-4,41,-33,18,-46,63,-36,24,-18,-6,-37,-17,61,-44,-2,3,19,23,-49,-24,-22,4,-24,-24,-5,-1,76,11,10,-42,-127,-33,15,-77,27,-7,23,30,49,22,-20,-36,2,10,-48,41,-70,43,-22,-22,-11, 
  /* [18][0][][] */ 34,-10,-20,9,77,16,23,7,40,-41,-4,-20,-17,38,-50,41,-68,-4,-43,21,-37,71,-5,38,33,20,17,67,-127,-32,-35,-54,-33,-31,33,58,24,9,1,-44,-62,-33,46,50,43,46,48,-44,-42,-99,-11,-38,4,-45,-88,29,30,-18,-1,-22,-116,37,9,-61,34,-2,-16,28,-5,10,16,16,-3,54,-27,-16,-47,46,7,27,53,101,2,58,-95,-16,-54,-36,49,60,-22,-42,22,34,7,9,65,95,-52,-7,-1,-36, 
  /* [19][0][][] */ 32,33,-52,-27,25,-40,-41,-101,-62,36,31,-43,-103,6,-39,-4,83,-11,-10,-18,55,-60,-3,-9,24,-27,-27,13,67,63,-54,73,83,58,70,-19,49,5,-18,-13,-90,-10,-88,55,-127,61,-17,70,51,38,-29,-18,5,-108,-28,53,-60,-121,-30,50,-32,-13,43,26,47,-31,-102,44,-23,-106,-48,-80,15,8,-22,-13,120,-88,24,-33,32,49,-65,-14,35,-33,-33,114,12,48,-37,10,24,-90,4,27,-63,5,9,-9,-23,-53, 
  /* [20][0][][] */ -36,-45,13,94,104,-3,-53,4,0,-15,-26,45,11,-26,-30,-106,54,1,58,-67,-111,96,65,-50,46,70,1,-50,70,13,-19,7,-56,2,-43,-69,10,24,-71,-52,-50,-36,-21,-9,31,87,22,-17,27,103,-48,-68,92,52,-92,19,-69,-71,45,27,53,35,15,-62,-49,23,-127,36,-23,-40,61,72,-26,82,85,61,51,-26,-48,-33,-47,8,1,-5,-16,3,-121,-21,2,6,-4,-15,-22,33,-11,19,-51,-16,24,53,85,8, 
  /* [21][0][][] */ 15,-4,-40,61,-40,48,-74,21,-26,12,16,1,-37,117,-41,25,-35,-39,-19,-43,2,-6,37,-13,14,-3,36,3,-31,-33,-22,9,26,-127,17,-24,9,4,-3,94,18,29,79,36,-7,-2,60,17,31,-21,-13,-21,-42,52,3,-19,-73,-43,38,-34,-14,-12,11,-8,5,-33,-77,5,26,39,-8,-11,-73,1,-20,-50,-42,8,-75,-10,-20,-6,30,-29,-20,-14,7,-55,30,-11,7,9,-56,112,36,-24,-3,29,74,8,-46,29, 
  /* [22][0][][] */ -5,-24,28,28,-36,-15,-26,-26,-65,21,-62,63,0,56,-85,30,46,13,-58,-24,-56,-4,20,-4,-125,44,-38,-16,39,-39,-49,-16,4,15,-46,49,-46,-14,-34,-53,-41,101,-11,-29,36,-24,-1,89,9,9,46,-23,5,-11,-18,-7,28,-56,-5,-25,-85,-3,49,-43,27,86,-2,1,6,20,9,2,-61,18,86,32,20,60,-37,-36,23,24,16,127,-49,-4,3,43,33,3,10,43,-9,-13,63,13,-5,-22,43,65,14,1, 
  /* [23][0][][] */ 17,-7,30,22,20,-30,-21,15,-12,18,14,44,-4,-23,39,-54,19,-26,10,-37,-19,-3,-28,58,-42,10,-44,32,13,-9,28,3,18,30,4,-35,-24,-14,-49,8,-8,-13,31,-27,-37,43,14,-20,15,-20,39,16,-10,12,-30,-17,-16,47,23,15,-25,6,-4,-127,-5,42,15,0,-11,24,-40,-10,-10,-16,-35,-21,-3,-29,20,5,-29,-7,-45,50,23,-28,-17,-32,-43,-9,-17,28,5,-1,10,11,0,26,-13,-24,12,12, 
  /* [24][0][][] */ -28,8,35,7,1,-66,-17,21,47,38,-55,-13,48,53,-13,-11,24,71,15,-51,14,-40,76,-121,-26,-10,1,22,-10,-12,-31,-11,4,86,39,21,-10,-35,33,-4,12,22,-32,39,39,-4,72,8,30,-12,2,5,2,-44,-48,-62,-43,-114,-73,-45,-27,-32,37,117,127,34,13,5,-48,10,16,28,54,-2,-79,-15,-10,-33,-84,-42,22,31,31,2,-26,86,-71,36,2,15,8,24,28,29,-48,12,-87,13,26,-57,34,-19, 
  /* [25][0][][] */ 64,-1,9,-23,-4,4,-37,-9,-47,85,-17,46,-79,-21,65,-26,51,-10,9,-35,-127,90,-53,-62,18,42,22,-52,-24,-25,-22,33,-18,35,-84,-51,-34,-2,61,0,-107,41,34,-31,61,-22,-21,96,72,0,36,-53,-6,8,77,-2,21,1,15,5,-91,-45,102,37,94,-25,73,30,-23,38,68,28,78,-28,13,118,-57,-76,-43,51,47,-74,18,-102,75,22,-70,-9,-109,-62,24,-43,-20,-32,-85,10,14,7,-7,-42,-96,17, 
  /* [26][0][][] */ -49,10,-1,-31,-60,39,11,38,-127,-15,-20,41,-25,-15,34,27,-26,33,-37,-24,48,75,26,-119,-26,1,48,31,-5,-46,-5,21,8,17,-68,-14,51,56,7,-37,-4,55,58,3,-40,6,35,-25,-13,-23,-54,-32,2,-1,-1,-42,18,-9,-33,6,-43,-72,-38,-49,40,20,-10,-31,31,-50,57,-23,48,-13,-5,-22,96,-59,-31,31,-22,-28,-3,13,24,69,5,18,-13,18,-3,-27,19,16,-39,10,6,11,5,27,66,29, 
  /* [27][0][][] */ -46,-28,-65,5,-27,-4,21,-8,-78,-86,-8,-64,-32,-76,75,-127,22,1,-29,-32,53,-11,25,-14,-22,74,-7,-44,-15,-24,9,83,-44,20,3,-16,-15,33,-51,24,-4,16,24,-23,-10,40,88,-13,-10,-81,-9,26,12,17,-22,12,72,-54,-7,3,-5,33,-3,9,31,60,-3,24,-1,-18,68,0,-49,89,28,16,31,43,-94,25,19,-52,36,12,-19,18,-12,2,35,-36,-52,-74,14,27,28,-33,1,7,25,-32,34,-42, 
  /* [28][0][][] */ 0,17,-18,-35,50,-49,24,-5,-78,37,-14,5,1,20,15,14,-72,17,26,13,-90,-41,38,-127,41,0,-65,0,-7,2,37,-26,-48,30,-34,33,-24,35,44,47,-20,-49,-95,10,54,56,11,47,110,-13,-10,36,-46,-9,7,16,-27,-11,-27,-59,33,28,59,-101,16,-71,41,80,-34,16,-58,-46,-68,8,31,-45,-44,-14,-64,102,-83,3,47,-17,-32,76,-9,-43,-51,-32,-32,-56,6,9,63,-49,-13,28,-98,-41,-16,42, 
  /* [29][0][][] */ 77,-17,29,-52,-55,105,-15,63,43,-23,19,-32,77,-29,3,39,-11,-12,37,-52,-17,-24,-46,5,-103,-35,15,1,11,127,-68,34,-76,-21,4,-18,21,0,76,-62,50,-22,117,-108,-53,102,19,-27,-17,14,116,28,-112,23,-96,-4,-40,-54,12,-27,52,-10,-55,-43,9,37,99,-30,36,0,-55,48,-22,14,16,27,-9,10,52,29,17,-42,10,2,-20,-19,0,-21,49,11,-49,-22,44,60,-11,-21,-14,-8,-70,26,-20,-23, 
  /* [30][0][][] */ -96,40,-85,-42,5,-49,44,30,1,-32,-21,-16,-46,4,39,1,-60,33,-23,-20,-11,-55,-78,-62,-14,-79,15,55,79,-48,-2,14,40,-48,-6,34,-28,6,-23,85,60,35,-123,-18,61,5,-20,-8,-83,91,-55,4,18,5,-32,-16,-13,-4,25,44,-63,-22,-52,-29,20,-22,25,-58,58,76,127,5,46,-42,-77,22,-20,29,-72,-12,22,25,-12,19,31,-31,92,9,8,34,48,-6,-90,38,-14,-3,-4,58,-79,-80,32,29, 
  /* [31][0][][] */ 13,12,54,27,45,46,-53,27,24,-30,31,54,51,-16,-21,28,-2,-28,-29,-22,35,-26,64,29,-35,16,-7,-37,24,-18,24,-5,-58,5,-17,-35,-24,29,49,-51,4,127,-18,-68,16,2,32,-25,-10,-40,28,22,-35,-21,21,-17,-17,-32,15,24,84,10,-6,-64,-18,71,39,-14,-6,17,10,-39,-5,-34,5,14,-23,-83,-17,-20,10,9,15,28,4,32,-6,-13,49,-7,25,-27,9,7,6,-14,20,-28,-18,27,1,-23, 
  /* [32][0][][] */ -33,-26,-8,13,-31,-30,7,53,39,12,-11,-3,-24,17,30,0,-23,127,19,-29,47,18,13,1,-14,35,-79,-8,-31,59,5,25,-31,-33,2,-29,-31,37,-28,25,-14,-53,-1,20,-106,-52,5,-20,41,-27,-3,4,6,-28,-26,8,26,19,-7,-12,-49,0,-28,-23,-39,-61,-46,-21,-5,-17,18,-16,-81,8,19,-24,-3,-55,27,18,-59,-22,24,15,-1,-7,25,-27,-11,-43,49,-11,17,-51,23,-42,-19,-21,49,-23,93,23, 
  /* [33][0][][] */ 9,-79,-14,13,-55,-21,34,-27,-79,-33,-9,31,-6,1,-9,16,-35,-9,-2,-23,-19,16,-53,-52,-51,32,-1,-2,42,-50,-26,-55,-26,-30,0,65,-3,54,4,-5,10,-64,-22,-22,-9,11,1,80,-26,1,2,8,-48,62,-54,13,-26,18,-28,16,27,34,66,-60,41,33,12,52,-24,32,15,21,11,55,-6,-127,16,-91,10,-27,-14,-110,-8,1,-31,-8,-4,-36,-10,28,24,-20,-25,38,-1,-21,39,-11,-18,27,51,-67, 
  /* [34][0][][] */ -25,-15,-59,-26,84,-24,6,5,1,15,22,-107,23,-60,-40,21,18,17,-5,-37,8,15,3,-14,-9,34,-27,48,-106,58,20,-51,-37,-74,-122,35,-27,-17,20,41,16,18,5,37,3,-53,-127,-28,26,6,-4,6,28,-8,-46,-57,106,-7,2,2,36,53,-16,10,7,-32,-28,-31,-36,41,30,-25,28,28,-17,3,-53,2,45,25,49,-43,-26,69,10,61,-6,-24,-72,-12,-18,16,-12,47,50,-34,-28,-76,-55,-21,77,26, 
  /* [35][0][][] */ 42,-17,2,-30,40,39,-20,-50,89,-20,50,60,-7,0,59,-19,68,-9,-58,-4,-23,-30,-31,68,-10,-66,-18,39,-39,-20,-41,84,-35,40,44,16,127,-54,10,-56,3,19,38,-5,-17,-32,4,77,63,-11,37,22,-7,12,6,-84,4,61,-6,4,-65,42,94,20,29,-46,-16,5,2,9,4,11,-47,52,40,-25,-81,10,-55,-3,-73,57,-11,-17,-43,22,13,22,32,-7,26,10,-33,48,8,-17,24,19,15,17,-55,-109, 
  /* [36][0][][] */ 6,-69,26,-1,-18,58,29,14,13,-29,-75,12,-27,17,-2,-102,45,127,-40,-51,-9,70,29,-58,-51,14,-38,35,7,-64,-5,-39,-70,31,14,5,12,-49,-22,-78,-56,40,-28,-16,4,-23,-8,-31,2,-32,53,86,-32,-72,-42,-66,-30,28,21,22,43,14,6,-52,61,-73,26,33,-11,7,-31,-31,39,-3,38,10,44,30,-5,44,-65,3,17,36,3,-26,-36,8,76,5,-55,2,28,-5,-47,-39,-43,51,5,-26,-13,25, 
  /* [37][0][][] */ -1,11,-13,85,76,27,-41,39,-2,-115,46,10,26,69,-12,-20,20,7,32,-3,34,43,-69,-58,127,-65,-53,5,39,-43,10,-27,-39,41,65,-24,7,-85,-4,-10,-50,43,-18,65,13,-48,24,6,-45,-14,47,-1,-25,39,-7,59,18,-32,-38,-44,25,16,44,-58,-60,15,29,-35,10,-50,-85,55,-101,-34,-3,0,-54,-17,6,-10,64,-11,61,11,38,-59,-72,100,33,108,-26,40,-24,7,-21,-112,-37,-15,25,-71,88,-15, 
  /* [38][0][][] */ -28,27,-59,-4,-76,64,-27,20,-8,-7,-14,36,-6,67,72,127,-6,-27,-21,-24,29,-57,-52,-41,-18,10,18,-35,54,-87,-93,-8,46,15,29,106,21,0,-61,-2,5,-48,13,-3,5,16,-36,58,19,-22,-15,42,49,-29,11,27,-81,59,-16,-5,-19,15,40,-53,-10,-16,-87,40,-3,17,-41,-22,-89,-11,5,55,20,45,71,22,30,-5,50,-80,-83,1,-16,-59,81,33,-31,-41,29,0,38,11,-91,63,7,-67,1,63, 
  /* [39][0][][] */ 59,53,11,-6,57,-40,13,-59,79,32,-39,-45,-17,-41,-5,4,20,-34,3,-40,-79,99,-92,-48,0,-17,-79,53,-75,41,-82,5,-110,-13,-86,18,53,-31,-5,-46,70,-3,17,67,-46,-39,-39,-14,-71,-127,42,51,122,-5,71,11,23,27,31,0,-57,25,-30,28,86,29,22,-2,13,61,-41,-83,4,68,53,54,61,-93,7,-67,16,-53,-107,5,78,12,38,6,121,-124,-42,-25,-7,-9,10,-68,35,86,26,3,64,19, 
  /* [40][0][][] */ 40,10,-101,-77,43,11,-57,-52,-67,25,57,-83,-23,-7,20,-43,6,31,76,-19,17,47,74,40,-35,16,-12,47,-92,20,3,-87,74,-43,18,4,-2,6,-5,-7,12,11,-66,36,1,-90,-1,-10,8,-114,76,-26,16,-25,-69,49,-33,2,-30,-55,-10,27,0,5,-61,61,-49,-3,26,2,-35,51,23,15,-35,-42,23,-40,-33,25,-24,22,96,-9,-11,-89,-6,-11,127,-24,-65,-29,-82,54,28,32,-22,-81,30,96,43,19, 
  /* [41][0][][] */ -8,33,-35,89,-89,-53,38,37,72,-4,17,-60,-102,-14,-31,-13,58,-47,4,-53,54,52,115,31,-47,19,-92,40,-49,33,15,-43,-10,108,-87,10,41,58,81,39,-71,-74,-51,-58,71,-69,63,5,-37,-106,10,54,9,-120,-82,-3,114,-5,116,39,-17,42,50,-67,97,34,-101,89,69,30,18,32,-14,69,15,60,-74,-22,-25,11,-109,-64,26,-93,-40,-127,-3,125,-29,79,39,-17,23,119,-105,21,46,-83,10,-3,43,-36, 
  /* [42][0][][] */ 11,6,-35,-11,-14,3,-28,-67,-4,-65,-8,-16,127,20,24,-14,8,15,-30,1,12,2,3,-6,20,-39,-63,-21,-17,-28,34,2,28,62,17,-41,16,-8,-54,31,26,-11,29,37,39,63,6,-25,39,-92,7,-21,71,38,22,-38,76,28,-13,-48,-22,8,26,3,33,12,15,-31,-31,47,-25,2,19,-18,2,-23,81,36,-54,-26,27,-13,18,-19,-50,-77,-19,5,-14,11,6,-31,-1,-21,-15,7,42,-29,0,-30,-2,5, 
  /* [43][0][][] */ -19,13,1,-121,-8,-16,1,48,43,56,-44,26,111,23,-4,-76,89,11,50,-46,9,-80,-33,2,18,37,68,8,62,-54,31,-109,-54,-34,-49,-20,-46,-42,32,30,24,85,38,-29,-78,49,127,-11,-57,37,52,-34,-22,-30,81,108,-9,-111,41,7,-106,14,-6,12,-25,-4,-12,-5,-17,-21,14,-76,-48,12,38,-20,-36,50,4,-16,-79,-59,-54,-5,41,-14,8,99,-57,-11,-34,-49,-77,45,-40,-11,59,-111,22,-25,-46,62, 
  /* [44][0][][] */ 12,-59,-23,71,-24,86,20,-4,-45,15,7,-87,-86,4,-56,64,101,127,73,-66,94,78,-18,-20,69,43,-44,-22,-22,-34,28,3,43,-9,-16,64,-34,123,-89,-109,-26,65,-22,-23,38,11,6,69,-125,15,31,27,26,-8,-59,-40,62,-35,82,49,-68,18,59,70,65,27,-48,-41,-69,18,53,-16,-23,46,13,-57,72,36,-80,-1,-27,56,-7,-51,65,-30,-23,20,112,30,-47,-50,-10,-63,-45,78,-52,6,-28,-72,51,-107, 
  /* [45][0][][] */ -19,4,12,82,-6,3,-44,7,-84,61,2,-31,61,-59,-33,73,-21,-30,123,19,127,42,31,15,33,15,-17,-74,30,30,22,83,-3,2,-21,-34,-45,19,5,-9,47,-46,-70,54,39,-61,-26,-44,-5,-9,12,-1,17,37,66,-21,31,-30,70,32,18,-43,4,84,-40,48,66,53,18,18,-35,12,-6,-40,13,-40,-5,-66,-12,12,23,-20,92,-13,21,-8,16,-3,-34,13,-56,-59,81,83,-72,-11,-19,-2,-36,-20,69,-55, 
  /* [46][0][][] */ 8,-64,11,-82,-38,-26,-15,-36,114,41,0,34,9,53,15,-12,-23,37,29,-22,-12,-23,36,-9,31,1,-9,-36,-47,-58,53,67,-60,-68,41,61,41,-90,-59,67,109,-19,23,-49,4,57,21,33,-10,-117,11,-28,78,3,-25,96,-37,-30,-60,47,-13,106,-4,-13,-55,32,-101,-40,-50,1,-31,-5,-2,-37,15,-34,3,6,37,16,56,-79,-66,37,41,-101,127,-103,17,44,-24,-1,0,-2,111,9,24,21,21,-125,-6,-25, 
  /* [47][0][][] */ -36,-11,-6,-61,26,-29,-48,21,-13,78,49,-11,-19,60,0,27,20,-37,-62,-32,127,-13,-59,11,-4,-57,23,11,5,-21,-22,21,-18,-29,45,-18,-11,-68,32,-53,22,-4,-42,21,8,-2,-51,9,-1,-10,14,-48,-36,28,-23,-108,0,3,25,12,-83,15,57,-28,8,-2,62,59,1,6,62,12,-47,-15,58,-16,-6,-122,-1,4,-39,37,-3,-5,-31,-61,-16,-26,-60,-39,52,-25,-27,21,-17,72,-5,25,30,-8,109,-12, 
  /* [48][0][][] */ -6,-20,89,21,-18,-50,58,43,4,-28,31,37,14,14,-58,31,-55,-78,-65,-81,-30,-16,-48,0,49,48,-26,-33,55,-21,118,38,45,46,-15,-46,-36,-75,-32,-33,-13,-14,-6,29,-45,113,64,48,-52,65,-4,-13,3,-42,-29,16,-37,7,-29,19,4,11,-24,28,6,24,-38,-18,-40,-1,-19,7,-14,62,6,-59,17,67,-74,4,-49,22,-8,25,47,13,30,-19,57,127,-58,2,18,-8,71,36,-54,-27,-49,-27,-27,-57, 
  /* [49][0][][] */ -37,-50,13,-10,-42,-13,-51,-1,8,-25,-1,-51,-61,25,-29,20,-12,-11,-47,-58,57,-37,53,-24,-28,-5,10,51,-19,8,-64,-30,33,33,-78,-4,34,38,3,-127,7,-25,11,14,41,22,-20,15,-9,-46,44,3,13,4,-5,0,-8,12,-27,-11,-38,32,15,-74,-38,26,-34,-35,32,7,-37,-42,-31,0,-3,58,21,-6,13,24,-10,52,-26,-14,-7,-11,41,-24,-6,40,-37,-54,-68,-48,20,-29,-19,-45,16,-35,-20,-18, 
  /* [50][0][][] */ -12,1,38,62,-12,-73,-11,0,-13,49,-35,28,8,35,-27,-23,127,-71,-68,9,92,-84,8,19,100,-54,-43,-12,44,-13,13,21,-9,-41,-30,-6,-7,-23,-38,-42,3,24,6,12,-87,45,39,-57,23,-42,120,-62,-2,31,-47,6,5,-3,-6,18,-11,36,-55,-15,26,-35,37,54,-77,-39,-7,20,2,-24,5,-32,27,104,-18,13,-18,-34,-10,-31,5,-8,-7,-53,-17,30,-16,-12,-11,-39,15,4,-18,-36,23,35,-23,-77, 
  /* [51][0][][] */ 14,16,-48,19,7,-45,1,35,46,11,-7,-84,-36,-24,-8,-7,28,18,24,8,27,7,49,-4,8,48,18,51,14,-29,20,4,-28,0,-3,-35,10,-33,21,-39,-24,-6,20,2,-1,-21,-1,-5,-26,1,-33,-41,-40,63,36,43,63,9,-5,10,-30,6,1,46,24,40,-34,-4,48,17,25,10,16,16,24,35,-16,23,2,-20,-55,6,-34,-23,-60,-2,-39,-35,-3,10,-24,19,14,-7,-22,22,-28,-45,-127,-39,36,24, 
  /* [52][0][][] */ -36,-21,35,23,-40,-33,33,-56,-72,-51,-32,47,-23,-31,127,6,-27,-25,-8,-39,-31,-66,-7,-87,-7,-22,29,52,13,3,61,4,5,-36,-37,0,32,-52,-18,41,-32,-22,21,-59,4,-23,-21,-3,-7,-81,38,-21,15,9,-30,-17,-12,19,-33,-55,92,30,0,-3,-77,-44,-65,25,-69,-96,121,20,-45,19,-18,-22,16,23,75,23,-23,108,27,89,14,54,-10,-49,52,8,54,13,-28,20,37,-44,-4,24,-20,76,-64,-6, 
  /* [53][0][][] */ 53,0,8,115,58,-1,69,55,47,24,63,29,42,3,-92,4,42,113,10,17,11,33,19,-10,86,-20,-16,-12,29,47,-67,83,104,2,-85,-39,12,-34,-82,-42,-68,-9,-50,23,-8,48,55,-7,-25,49,-69,75,-40,44,-127,-16,82,20,11,-47,-50,9,30,13,-4,30,53,64,71,33,-12,22,41,33,-14,4,-19,-37,5,-14,-47,50,-19,3,-11,-25,-51,-12,-35,-80,5,29,-18,68,-11,97,41,3,9,48,35,-80, 
  /* [54][0][][] */ -71,-127,-33,-3,-27,54,19,-45,-32,-16,15,14,-30,-1,3,26,6,11,18,50,45,-23,-22,-8,8,-60,16,-18,-24,-17,88,21,-67,-5,-10,-17,29,-53,11,-13,28,-15,-18,28,-9,-22,-16,13,-6,-51,26,0,8,-17,-10,39,6,21,-5,-14,-4,14,-3,20,-48,29,-3,23,-36,3,12,-24,-106,-27,16,-33,-31,9,41,-57,-6,-40,-15,26,-11,-43,49,54,-3,38,-57,-19,-15,14,59,-9,55,25,24,-23,-56,8, 
  /* [55][0][][] */ -1,-13,58,-7,80,-40,-47,-26,20,-25,-32,-40,-1,-37,-49,-2,-34,-19,-14,-34,-61,73,-77,27,111,6,-5,37,-7,11,13,-19,2,13,48,-78,-8,10,84,11,-22,37,-26,1,38,-6,-34,-61,-17,-46,-24,-41,4,-57,34,-59,29,-11,20,-11,-40,-11,28,-3,-25,49,-55,-16,-42,55,29,-91,65,-35,46,28,-5,55,-8,18,-39,53,32,35,-19,1,-13,1,49,-27,-2,-54,-25,-48,-63,-42,42,-13,127,-25,21,-33, 
  /* [56][0][][] */ 14,-9,-42,-39,73,-5,14,-9,-3,-47,29,31,36,-26,63,-16,-12,-28,-53,-20,-26,46,-37,-5,-53,-7,14,-14,-22,-19,4,28,14,-36,48,-14,13,-24,4,46,-27,-20,23,41,-3,-52,-29,4,27,-82,-6,30,35,-3,14,-40,-9,-28,12,39,8,6,-33,6,9,-45,127,-35,-34,-45,19,11,-16,33,-27,-21,-21,-3,13,7,-32,8,-24,12,-21,12,66,34,-40,61,15,-13,-2,-4,2,-54,-42,52,-47,-27,22,-36, 
  /* [57][0][][] */ -41,9,24,49,17,-15,127,53,-84,-92,-11,49,-8,-9,35,-87,-32,-57,72,38,-50,-12,-59,53,-33,0,-78,52,-47,9,-49,13,32,-2,-29,62,-21,-92,-18,40,94,-25,-63,23,-24,20,-54,21,65,-17,60,2,33,-19,-75,61,-2,-65,-21,-1,-11,8,9,-46,-20,5,-65,85,15,23,25,44,10,56,8,-60,52,-9,-1,-31,-56,58,-28,15,-52,-47,-37,-49,-5,22,-22,-22,-6,47,12,-23,17,61,55,-40,-12,-97, 
  /* [58][0][][] */ -5,-15,-11,-37,-39,-9,31,-19,-51,-43,4,-41,1,-16,-23,30,-3,-16,15,-9,-33,38,1,32,22,-6,-7,-26,6,-29,58,40,-30,-19,23,-11,-23,-71,5,40,-15,37,-4,-25,-13,-19,2,13,-34,-34,2,9,20,-11,-15,34,18,33,-46,0,-13,22,7,-23,48,5,17,5,-15,34,13,6,13,-38,-28,42,-4,-48,41,31,-127,66,69,10,35,25,9,-22,-14,21,0,-15,-25,37,-4,42,-2,-21,-31,-29,-18,-17, 
  /* [59][0][][] */ 79,45,58,-106,5,-49,-41,-26,4,-58,-23,78,6,44,7,-60,5,18,10,59,48,-127,-30,-36,41,29,-42,-23,-25,23,-20,-7,51,-25,-12,-40,-67,-27,-57,-28,-3,58,41,-96,62,35,2,-44,-38,-108,51,-47,-13,43,-14,-2,13,-16,39,-56,-85,15,-28,6,68,-1,30,-9,-36,34,66,-59,20,-10,-40,-63,9,37,37,16,5,38,74,80,-10,-24,-20,13,-59,44,-23,17,14,52,0,-5,-55,-45,-65,76,-7,24, 
  /* [60][0][][] */ 5,-60,22,44,60,-5,16,-4,59,-13,23,28,-37,-32,-21,-43,10,4,12,74,-3,-32,-22,4,-104,75,-15,14,-20,59,23,-19,-17,37,-28,33,-110,-44,-7,-16,-60,38,-16,-8,-33,54,41,16,-41,-1,-76,34,48,67,75,-4,116,25,-78,2,-63,-32,1,-41,-41,-22,17,9,28,-15,29,113,-30,-40,59,-57,-5,-16,-57,-47,127,-6,-9,20,22,14,-53,-74,-47,8,35,-39,60,-4,4,15,0,-53,-48,-4,0,52, 
  /* [61][0][][] */ -2,-13,-14,-21,58,-49,-40,-12,10,61,-17,-3,30,20,-33,-9,-13,-26,-61,-54,49,-19,97,-7,30,30,64,-64,-9,-21,9,-27,32,48,42,-3,-45,-3,43,38,-12,-36,-47,-127,-89,-57,-19,-45,61,-8,29,72,-15,16,4,34,-35,51,-16,-26,-25,23,-27,-62,55,3,-69,-58,-9,44,11,71,-18,39,38,33,23,34,-14,-30,-40,-23,-1,-7,60,-44,38,-21,-48,-77,-3,-8,-17,-11,-36,-20,44,-26,-4,-6,69,-43, 
  /* [62][0][][] */ -16,-9,-34,16,-2,-1,90,-11,-9,-11,-24,21,-22,-32,37,-49,73,-87,-78,-81,-47,15,-7,32,-51,63,-59,27,-127,-25,-29,33,-16,23,-24,-78,-13,-54,-41,73,24,-49,-34,105,1,5,6,62,125,-11,-54,-45,-72,-27,38,13,-98,-7,107,62,-72,-11,81,-72,-120,-53,-67,4,41,-36,60,29,28,32,-84,-60,-43,52,39,12,-9,-10,22,-31,-46,-29,-106,-96,20,-17,25,-27,74,6,54,-22,-51,41,103,22,67,-27, 
  /* [63][0][][] */ -1,-18,-105,-101,-47,-32,-10,-40,-21,34,60,-45,-36,47,72,-42,-18,-102,26,23,-99,-30,45,22,-50,39,-75,69,127,20,-34,14,44,27,-3,60,98,13,-4,62,-46,-30,-37,-119,24,25,-81,69,-41,-93,33,-14,-55,-74,-22,-30,-63,-42,40,30,33,18,-6,-14,67,-97,-11,-8,-27,5,87,-23,-9,67,-2,69,5,-13,-46,44,50,-121,103,62,-52,27,57,101,-10,-47,11,-34,-31,71,-15,-17,-83,-55,-7,23,-64,-23, 
  /* [64][0][][] */ -68,-25,43,42,18,-17,-41,-12,-25,-20,14,-9,5,-39,-125,18,-52,26,44,14,-62,-30,13,-38,0,14,34,14,1,-15,-7,-4,-14,55,33,27,18,80,-9,-23,-16,10,-12,-30,-7,42,-20,25,-11,-32,27,27,9,-71,-127,-54,35,24,-39,-21,-21,-5,22,49,-15,22,-30,-42,-31,23,14,1,44,-14,-36,-38,9,-52,29,-24,-50,46,-44,-9,16,-7,10,-82,-7,53,25,11,19,34,-26,-24,15,10,16,34,-35,66, 
  /* [65][0][][] */ -40,95,42,-6,-25,49,29,-73,-8,33,-3,-66,6,-23,-13,-13,-64,55,59,27,-13,-6,-21,51,-41,-20,-8,-2,-73,-25,-35,-31,6,49,58,-1,39,21,-46,24,-44,-38,52,62,8,-35,-12,-2,-39,-24,-60,36,-25,-8,-24,-58,23,-7,127,81,-70,-31,3,6,-14,42,23,50,-13,-8,-28,-7,-23,24,50,2,-16,42,-28,25,-42,39,-54,13,-39,29,13,40,59,23,-63,82,-64,10,-33,29,-30,12,34,-60,-42,22, 
  /* [66][0][][] */ 16,-91,42,53,-58,7,26,-21,55,14,-52,39,80,-75,45,-54,-12,4,-22,-57,11,19,-46,21,127,33,31,-27,11,-21,18,-28,45,-24,-10,93,-66,-95,-42,-25,17,51,31,22,40,6,-65,26,-68,-32,11,-21,-57,26,24,-49,23,11,-17,26,15,106,60,14,27,49,9,115,13,-49,-27,-24,10,-31,-6,-55,12,-41,-36,-25,9,-53,-62,-22,33,54,-4,63,-56,4,-50,-3,10,-38,-47,7,-3,40,8,65,-11,-22, 
  /* [67][0][][] */ 47,84,-44,77,-5,-72,49,28,-33,56,6,43,-31,44,78,7,22,0,31,1,-2,45,29,-42,11,42,46,2,27,-93,127,-40,4,-25,-30,36,16,41,-56,-7,9,-35,-34,-26,51,20,-23,85,8,23,-31,-16,15,33,-6,-50,29,1,26,-5,-18,-40,29,-48,29,-9,53,30,-48,-3,-8,4,-56,56,12,-34,18,41,-29,17,41,3,6,1,12,-90,1,-16,7,-58,-19,-53,-67,-18,39,-4,-30,-15,-48,44,-67,-81, 
  /* [68][0][][] */ 8,28,-16,2,-39,-49,-61,-18,-66,15,51,-9,-70,1,-18,-54,35,-13,9,-35,15,-41,-84,-28,24,-38,19,67,-127,-24,10,-19,-33,-50,30,31,56,-27,-31,3,-10,17,-41,-17,53,-81,39,28,11,49,53,-33,16,-38,19,-5,75,37,-56,-30,-41,-29,4,-40,-38,-7,21,11,-27,-16,0,21,36,-1,30,7,47,67,8,35,36,-3,20,21,-35,18,29,6,-36,-41,21,-5,22,23,39,45,-20,31,-55,76,0,33, 
  /* [69][0][][] */ -13,99,39,-84,11,-5,-6,42,-4,38,26,41,-34,31,5,-22,49,92,31,-37,98,-5,68,78,63,22,104,-77,7,13,4,40,-31,-14,-67,-64,2,-6,-63,-83,-108,88,-79,-18,-28,-38,5,25,96,107,15,61,13,-74,-127,-41,-108,-23,37,60,7,-21,33,1,58,-49,29,37,-24,27,-29,-11,4,-11,-27,107,-46,18,4,-8,0,23,34,-31,-45,48,-21,-4,-3,29,77,-31,53,-34,-22,-80,66,-39,47,-71,46,-50, 
  /* [70][0][][] */ -53,-11,66,-1,-56,127,-12,-54,-37,-25,-11,-41,-45,-61,20,-13,-15,-12,-55,35,-1,-63,-17,24,-17,23,-83,19,-2,17,-1,-14,-55,-5,93,-22,-4,11,-20,-16,-26,-12,49,-102,10,-36,9,14,21,-66,-35,3,53,61,-36,-19,51,-76,0,-44,-78,-12,3,-30,-32,9,-43,20,6,-15,10,-29,17,46,35,50,79,6,-1,15,-13,-13,-16,42,30,-36,-23,20,-88,-23,-36,-18,-34,35,-5,18,31,-33,16,-45,38,-36, 
  /* [71][0][][] */ -33,-26,9,84,4,8,-18,25,-24,45,10,22,-77,83,5,8,-4,90,-36,-28,67,13,-80,55,-24,11,36,-36,66,-120,-58,-7,-51,49,-6,-30,10,48,-5,6,52,-127,45,0,44,17,47,-12,9,-23,17,11,38,-53,29,66,27,25,20,-62,-46,72,55,-26,-2,33,-27,10,36,10,-11,-44,50,-45,84,66,19,-23,-82,38,6,0,30,30,-13,-28,-6,-35,-59,28,19,-37,42,-49,70,94,4,-98,14,-34,-45,-26, 
  /* [72][0][][] */ 10,82,-20,45,-1,27,-35,27,-47,-78,-18,12,-18,-50,-21,-39,8,10,-21,-3,23,-36,-3,18,-16,1,15,-18,36,-16,-66,46,5,43,-13,-21,4,6,9,-57,88,-42,-63,-8,21,-37,-103,115,-49,12,-35,-127,34,19,-60,-102,-12,44,-39,-32,-12,-37,114,8,60,60,-14,-22,-56,-1,72,9,-9,17,-4,-11,-67,20,-5,-41,-9,58,30,-16,-25,-20,-30,2,-14,8,-13,1,60,-53,2,-12,-11,18,5,3,78,15, 
  /* [73][0][][] */ 19,-108,-6,7,23,7,25,-26,107,-100,-51,-17,6,-4,-16,27,5,-43,99,-7,13,42,51,-105,32,-21,4,62,-35,-73,-85,91,-21,-6,48,25,-32,-2,93,-32,-90,35,118,-18,-25,60,42,84,-31,7,-45,54,-29,19,65,-6,77,80,37,-34,-57,-14,127,-31,-76,103,17,35,42,-48,-50,-23,10,38,29,28,51,-50,57,59,-39,-36,-11,13,17,-73,-41,8,-69,24,-81,-36,5,-77,-31,48,-49,56,77,106,32,9, 
  /* [74][0][][] */ -98,24,44,81,-11,-16,39,45,16,107,-21,-15,-59,-20,-50,-15,3,20,-62,-86,-4,-103,-9,-12,-18,71,-56,-65,8,90,-48,20,-16,54,-35,-48,-42,-70,-35,33,34,20,5,-16,-10,114,27,-71,86,-31,-1,35,-18,63,-49,-5,33,59,-28,-22,5,-41,-120,67,-23,127,-11,4,111,37,-33,4,-3,33,6,37,40,-59,-5,-1,31,-17,38,26,29,27,-27,4,-57,-12,3,36,-8,9,-34,57,3,-8,-1,18,-73,59, 
  /* [75][0][][] */ -46,18,-85,11,4,45,-2,-53,10,75,-39,22,-30,52,99,-127,11,6,-5,22,13,10,14,22,0,11,73,-7,45,100,15,24,-43,-110,-50,25,-79,60,-74,18,70,12,-36,25,6,-56,32,3,-75,-66,31,-27,-64,-41,34,-115,-14,-9,9,24,-73,15,14,-93,30,44,-78,-15,-9,-40,-1,73,22,18,13,-8,-22,-24,-39,-31,-53,69,0,27,17,-55,-46,31,-93,-23,-8,81,0,14,-3,3,37,55,-36,-74,15,-71, 
  /* [76][0][][] */ -21,-18,22,5,-10,-48,-21,-25,44,-50,58,-50,-60,28,8,-32,-59,51,-13,120,23,43,55,58,75,27,-60,33,82,-79,-10,38,24,33,-53,-45,3,-17,-61,23,80,35,-10,-26,-90,16,-4,-56,31,-33,-15,21,13,-67,-4,-5,31,46,-39,43,-120,27,-53,-55,-45,-73,-95,37,22,-11,-38,98,97,-29,-27,-16,-9,-127,10,-15,-70,-16,4,-74,-25,-55,37,-71,-23,-4,-31,12,-23,-10,-47,-75,27,-15,-30,-44,8,-26, 
  /* [77][0][][] */ -42,-52,37,-84,21,52,24,-29,-56,37,34,-13,-96,-32,57,-50,-6,-126,-127,82,-18,-1,-76,-85,114,-16,75,-60,31,21,67,-52,14,-125,-24,33,-65,47,-12,8,109,31,64,28,40,-6,-25,107,49,36,-62,-38,59,-6,-16,89,47,-36,88,15,86,2,12,26,-23,-43,1,-71,49,-127,34,23,-72,-7,39,-34,8,-51,-70,6,-31,-120,16,19,-56,-52,18,4,5,-41,-54,6,-46,30,80,-42,-25,67,-6,101,-59,26, 
  /* [78][0][][] */ -40,32,-16,-23,88,-26,-5,-56,-36,-39,9,26,-51,-42,5,-27,-46,-16,-8,-127,32,-63,26,-20,-65,35,72,42,31,-32,19,-61,16,28,5,-31,-13,11,-83,-75,-32,-14,-6,1,8,101,-20,32,32,-9,11,-33,46,-69,-42,-21,-43,-6,49,28,8,-5,35,79,-43,20,-38,52,-16,-15,-16,59,8,-16,43,-73,23,33,-3,17,-8,-44,10,-34,-24,-45,-40,-14,33,-47,-19,80,-37,51,-12,18,-15,-36,-22,-40,-2,-15, 
  /* [79][0][][] */ -77,54,16,-28,9,-42,-5,-55,-64,3,65,2,26,-27,5,73,35,47,27,-65,38,33,-58,-26,-39,-40,-13,11,3,-9,-8,-58,-47,50,-12,-14,-33,-88,-67,-40,21,62,-13,-4,-80,-1,25,19,-101,1,48,15,-6,-36,11,-58,20,-13,4,32,38,-17,-29,-3,-18,16,7,-70,-53,-1,-32,-27,15,-39,75,57,62,37,4,-42,-107,50,-13,16,-11,6,-62,-25,-16,-69,7,-25,49,58,5,-127,-51,-16,8,30,-115,3, 
  /* [80][0][][] */ 2,-23,29,-47,-38,4,-41,-63,28,31,-20,33,-17,24,-60,-18,8,24,-2,-33,127,-3,-76,-21,9,-2,-26,-5,19,-1,37,7,-2,73,1,9,-51,-39,-10,-47,-23,-30,58,-60,66,37,18,-9,5,-5,-29,39,0,3,-80,21,-39,42,-67,-55,-30,11,9,-5,9,78,70,9,18,35,-55,-22,12,2,-42,20,7,2,-5,-75,-7,-19,-9,2,5,-31,-56,28,74,17,75,33,-17,-23,-10,-8,-31,3,9,-37,10,-21, 
  /* [81][0][][] */ -27,24,56,29,-24,-102,-12,-3,-89,61,-16,-40,-2,50,-49,1,-44,5,-61,15,-21,22,60,26,-3,127,-49,-30,-40,7,59,-72,12,63,-34,-3,-27,21,45,-93,44,69,-102,-16,9,-23,-3,-13,-37,18,7,-50,17,7,33,65,-38,45,-15,33,29,12,16,69,-52,-2,-62,7,18,-12,-17,104,67,6,7,-16,55,-28,89,47,-19,2,60,43,71,58,-38,-14,3,-45,3,23,22,14,-14,55,62,43,47,-47,40,-5, 
  /* [82][0][][] */ -34,38,27,-12,-8,21,-22,32,-36,37,23,41,58,54,25,-20,53,14,1,17,30,11,12,4,-8,-68,41,9,-12,-4,-22,-12,20,-15,32,-35,3,29,33,-122,91,-36,31,3,-19,-49,0,13,26,-50,10,-7,-55,-47,-32,39,1,-29,-10,27,-8,-14,40,-14,-5,13,-63,-3,22,43,-26,41,127,12,25,-35,-48,-4,8,1,-25,-84,-47,23,9,-41,-6,19,46,36,17,-3,-23,49,15,-16,29,4,42,-7,-6,15, 
  /* [83][0][][] */ -8,8,-71,12,-17,0,2,-52,5,-47,-62,-32,9,40,18,21,-77,-26,-40,-13,-24,20,127,-16,22,-50,15,-55,-18,62,-20,18,22,18,-5,30,-37,0,16,-21,6,0,11,14,13,1,-20,20,-19,48,73,51,-12,78,13,-22,-55,-92,3,40,-57,-15,-26,23,22,-45,-10,-26,-7,6,4,-1,9,27,-22,1,-8,4,-27,-8,26,21,14,-43,-6,31,78,-21,-72,-1,28,7,57,51,8,-14,32,68,19,-25,-17,24, 
  /* [84][0][][] */ -46,1,61,19,23,-22,-50,44,-57,12,29,-7,-19,44,24,108,-12,40,64,-127,2,-35,47,26,5,-45,-16,-2,-39,27,-17,-44,-40,20,32,-34,4,-3,-35,-31,34,18,19,-43,-31,-11,-75,50,34,19,6,7,13,11,-51,15,25,69,-16,-22,34,5,54,-7,-4,74,-1,50,-32,27,1,-39,38,11,-23,-53,-32,24,-14,0,33,-37,-7,62,44,-123,15,11,-10,-7,-33,-1,8,-40,47,61,21,-56,-51,6,-50,-78, 
  /* [85][0][][] */ -45,27,-23,21,36,-17,42,9,-72,14,5,-54,-34,1,-61,-58,12,-54,-30,-5,61,-7,-25,55,127,43,-37,69,-52,6,41,15,-23,-108,23,-8,37,-71,-50,-49,29,-13,7,-12,-72,73,-62,9,-56,-120,19,4,-41,-54,-6,5,35,7,-67,42,-82,17,19,-73,30,-13,-66,36,6,3,28,-13,19,-28,50,-69,38,35,-28,88,-5,14,-33,-3,-37,24,-7,-1,-55,-5,41,-34,6,23,-12,-12,-22,-28,82,-82,-7,21, 
  /* [86][0][][] */ -13,1,21,-61,-2,-19,-35,32,30,-110,-55,-70,-41,-26,52,25,11,-56,22,40,38,127,60,-45,32,73,13,16,-60,-6,-38,7,-28,2,-68,-1,3,-27,7,-67,99,-25,84,-22,-65,7,-28,38,-28,51,-74,37,-42,-1,-47,-17,41,8,25,-55,36,45,61,37,32,-9,6,-30,-58,34,52,-60,36,-2,-75,9,41,-26,-6,36,-109,33,71,-99,-46,-76,24,35,64,-117,-3,28,80,-22,6,-28,14,-31,24,20,51,-71, 
  /* [87][0][][] */ 27,26,38,-11,44,50,20,-57,12,-40,-6,-40,-25,-21,20,42,47,-55,-23,26,22,-15,-31,-127,25,55,-2,62,3,19,5,68,3,57,-1,-12,16,93,39,-18,-5,24,4,18,-1,42,19,-42,0,42,44,8,-10,-19,-32,27,-40,67,-52,1,-11,-7,-16,-28,-30,6,-5,28,39,59,-25,25,-9,13,-44,-96,-81,-19,19,32,-84,-21,8,-6,-15,3,-14,20,47,10,-27,50,-19,-15,-29,-96,4,-4,-1,20,-12,-5, 
  /* [88][0][][] */ -52,9,51,41,-32,-17,28,-22,-57,-53,-7,26,-7,-35,-23,-31,81,-99,26,4,10,-55,6,23,5,81,-89,74,-13,-28,-58,-72,-98,-46,80,-48,-46,-5,-50,92,-127,-2,-7,-40,-51,-61,-44,18,8,-108,85,-78,-16,-38,-18,-26,-25,-39,34,22,-38,-6,-26,-18,39,-25,-33,26,-58,17,-16,39,20,-3,28,22,1,-28,-58,-12,29,9,-121,-12,17,-12,-44,-69,10,-19,-20,0,-24,-31,37,30,-56,-17,-103,20,-66,71, 
  /* [89][0][][] */ 87,20,-66,45,-21,-50,66,-3,-17,8,-5,35,-34,62,43,4,-2,-86,52,33,11,-51,16,1,4,-70,7,56,-53,-42,-95,79,-30,68,-12,61,-2,104,-13,-7,-9,14,-91,-79,31,57,25,-9,-35,-61,28,-82,11,-2,83,-36,82,25,38,-52,45,80,9,-5,-45,-8,9,-76,-47,2,127,-9,4,25,-8,-14,-26,-72,-36,39,-106,2,47,87,-17,45,-12,-37,-8,8,-28,-8,67,69,53,-22,-13,30,7,1,105,81, 
  /* [90][0][][] */ -32,13,-61,53,-58,16,-17,-18,-69,40,4,-40,8,-39,127,-14,29,-20,-9,-6,66,3,59,-5,-31,10,-15,29,-32,5,15,-39,36,-102,25,35,29,49,46,-19,52,60,-67,56,-4,62,-45,-73,117,53,-29,-5,52,-3,32,38,42,-20,-13,-42,-23,109,-45,-55,32,57,9,0,-40,30,3,-10,51,2,-29,48,-15,-24,82,-72,-82,-32,-16,1,50,28,27,-32,34,-21,-23,48,43,83,92,6,38,26,62,-16,44,-59, 
  /* [91][0][][] */ -13,-5,-10,24,-43,25,-29,-24,22,-24,-64,-18,-55,-7,-3,-13,-4,-21,29,-44,-127,-21,-19,37,2,22,-49,-26,21,-21,-28,-39,-23,43,31,-11,2,21,-21,39,-16,2,-60,-21,12,66,6,18,46,-10,12,15,-54,92,-76,-52,40,-18,16,-66,24,4,8,9,18,-10,-4,-16,-38,-28,-4,16,-75,80,-9,25,74,4,-77,-45,-24,-1,31,-40,23,35,-43,6,-75,6,28,-2,-1,-11,-2,66,12,15,11,40,18,-62, 
  /* [92][0][][] */ -12,108,22,22,-48,-6,-43,17,-22,-45,45,-44,3,34,-16,-14,40,9,40,-37,-36,-32,30,5,68,-9,13,9,11,-17,-45,-11,-16,21,7,14,-14,-58,3,25,-30,15,-15,-22,-45,27,10,9,26,-16,5,-66,48,-28,-28,18,46,-10,39,15,-30,-22,-10,7,-86,6,32,-38,27,-14,20,-66,-17,-24,33,127,-32,-42,17,-21,-32,-31,34,22,-17,-43,55,-29,0,13,30,4,9,-27,6,19,-2,20,-8,20,20,-6, 
  /* [93][0][][] */ 38,-2,-23,-95,-58,8,-55,-2,-47,31,-36,-58,-9,-36,50,-27,-16,-30,64,10,47,-29,55,-42,-36,-44,22,-16,6,-5,38,-17,-21,-38,0,-38,24,21,30,70,-67,23,-42,-67,9,84,-84,26,41,-12,-52,36,-55,35,22,-40,-95,50,-44,8,13,-6,-13,-113,-53,-62,-10,49,24,21,5,73,-66,12,8,30,29,127,14,1,12,-65,1,10,-66,23,23,13,30,22,-13,2,46,53,16,29,-63,-73,-7,5,-12,23, 
  /* [94][0][][] */ 7,-8,20,-3,-79,-28,-89,17,-13,-83,20,-9,-15,1,69,-54,7,-57,-5,-44,50,7,-91,-27,-15,-13,-43,20,-70,92,-28,-21,-24,37,-9,46,-8,-2,-18,-104,-16,-99,-75,-3,-5,-24,-82,47,-1,5,36,43,-9,-27,-6,8,-1,-36,19,-40,45,127,61,45,-9,31,35,-65,-57,68,-52,21,13,-11,-25,-28,-3,35,67,-5,-12,25,-52,-10,-13,94,-12,-1,-51,60,-29,14,1,-29,42,14,64,-26,71,-62,7,39, 
  /* [95][0][][] */ -49,36,-55,-35,13,27,-25,23,4,-42,11,33,-6,1,2,28,-2,-22,26,-35,30,49,32,21,10,-4,37,-13,-38,-20,20,25,8,-5,-41,-15,22,8,9,-15,9,0,22,-15,-25,-30,-7,-19,-31,-71,-40,44,-21,-23,2,37,25,-30,-18,-60,-127,1,16,2,3,-20,5,-17,-52,56,38,17,-40,12,24,40,12,-6,-33,39,-4,-1,-46,9,21,40,-14,-41,-6,-28,39,5,-28,-4,2,25,49,-37,-84,43,71,43, 
  /* [96][0][][] */ -73,29,60,-47,45,4,73,48,-65,-42,17,58,50,28,-19,41,112,-4,0,22,-23,48,-61,96,-21,16,25,-23,-52,11,117,8,69,-51,-38,40,-5,79,-10,6,123,-4,-16,-35,-10,-1,-18,-21,5,19,-21,47,-9,61,-8,-42,51,71,9,51,-33,22,-59,96,-88,-3,-72,-21,-35,-62,-20,20,-21,-101,-62,69,-33,7,-11,26,23,-4,-8,74,48,-6,-33,71,-19,-21,-7,-21,49,39,127,-25,11,15,48,5,3,1, 
  /* [97][0][][] */ -50,36,-26,-67,-65,48,74,-49,18,-26,-34,-15,-78,-8,25,119,127,-27,-13,-79,-28,10,84,67,81,24,-71,-82,73,-5,39,30,-64,-55,0,-32,60,-34,-21,78,4,-48,45,16,-42,-60,-7,-25,-15,-13,22,53,60,43,48,-59,-75,-5,45,36,9,-78,-13,-86,-17,24,0,19,37,-2,32,26,9,5,5,10,-58,-24,20,-1,32,-64,30,18,-10,47,-8,26,-108,-59,-44,34,-21,99,-46,-41,-22,-38,-10,16,29,-103, 
  /* [98][0][][] */ -33,29,-32,24,-32,60,9,-15,127,16,-38,-24,-19,19,33,6,17,-52,-12,-12,-23,29,2,-18,58,41,-11,18,0,-50,-63,36,-6,-34,-6,8,-33,-40,-11,41,-23,-23,-16,-46,-10,-38,20,-49,-20,56,5,-31,14,-49,-21,-13,48,-31,-18,-50,-6,57,-30,-41,-40,42,-19,9,-13,24,21,2,19,-23,22,6,4,-35,39,-2,15,-12,14,17,37,22,37,-27,-18,33,-53,-46,-25,21,-13,-32,1,17,74,11,-39,-43, 
  /* [99][0][][] */ 0,-20,37,-34,-37,-19,72,66,7,1,34,11,-43,33,40,-21,-32,4,-30,-32,13,34,55,11,-4,25,-21,20,-51,-54,47,-32,27,11,45,-4,72,-3,31,-2,43,9,24,-66,16,34,28,-37,-21,52,-14,13,27,-16,-11,-10,10,25,8,47,-19,27,-55,2,-49,29,-88,-2,-26,24,42,-5,42,7,23,31,-57,-87,-2,6,28,-57,13,10,7,-5,-27,72,8,-58,-83,25,-7,14,-11,36,-17,-1,-127,-40,-4,-34, 
  /* [100][0][][] */ -36,20,5,-67,-91,4,40,-22,-53,-35,-2,73,7,8,-55,24,-76,-4,55,0,18,-101,-26,-58,13,88,-35,26,-47,64,-17,68,-41,-18,11,-108,52,-125,-54,13,61,-10,21,40,-2,34,-33,25,42,-10,127,46,0,-59,71,26,-91,-5,-88,32,-45,22,0,-68,31,-23,24,-20,60,20,-95,13,-83,-30,15,71,108,19,-59,77,-54,-114,-29,14,13,-45,-43,-69,53,41,0,24,43,-103,61,-57,104,-66,-2,39,14,-41, 
  /* [101][0][][] */ -41,-47,11,-67,-80,9,-57,-13,17,-8,11,-30,-10,13,29,-25,18,45,-66,-27,-16,16,-37,-127,-26,23,20,38,-6,-38,10,53,16,34,17,-39,21,90,-30,53,24,-9,52,-23,-11,-3,-12,0,-30,-14,14,24,34,16,4,18,-24,-35,-45,38,-9,-43,-32,36,-36,-29,-7,24,-16,-27,-13,-33,-7,-68,-15,-74,10,12,-36,2,71,22,-26,-7,-37,-14,66,-2,-2,47,2,45,-10,18,12,69,11,-16,13,20,-15,-90, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant55_scale = { 102, { 0.012482090853154659, 0.0099234553053975105, 0.0099067864939570427, 0.0088547170162200928, 0.01324694138020277, 0.0087471418082714081, 0.010657575912773609, 0.0093701109290122986, 0.0086621493101119995, 0.009254910983145237, 0.013389736413955688, 0.013541704975068569, 0.0096089048311114311, 0.0083918338641524315, 0.0092271370813250542, 0.012580999173223972, 0.0095108263194561005, 0.013116355985403061, 0.011330400593578815, 0.0073897647671401501, 0.0077008032239973545, 0.012891720049083233, 0.013277688063681126, 0.026344424113631248, 0.010684304870665073, 0.0092664770781993866, 0.014194267801940441, 0.017555674538016319, 0.0082550011575222015, 0.0098827322944998741, 0.0077950302511453629, 0.011069110594689846, 0.011973623186349869, 0.010289104655385017, 0.01078806072473526, 0.011229773983359337, 0.011088337749242783, 0.0084271878004074097, 0.014276015572249889, 0.0090472595766186714, 0.011045359075069427, 0.0079415775835514069, 0.011338935233652592, 0.011807877570390701, 0.0081624323502182961, 0.0095594245940446854, 0.011078022420406342, 0.010426441207528114, 0.011576855555176735, 0.011184987612068653, 0.011343450285494328, 0.015012726187705994, 0.01043398305773735, 0.0093447603285312653, 0.01561674103140831, 0.012827436439692974, 0.018952697515487671, 0.013094249181449413, 0.011380042880773544, 0.011466282419860363, 0.010036639869213104, 0.016500687226653099, 0.0062209153547883034, 0.0085547743365168571, 0.01343893725425005, 0.012982092797756195, 0.0098357414826750755, 0.010530564002692699, 0.012436597608029842, 0.012078521773219109, 0.014670878648757935, 0.010101400315761566, 0.014176745899021626, 0.0116380350664258, 0.0084008276462554932, 0.0091125620529055595, 0.0082335686311125755, 0.0062589356675744057, 0.011345763690769672, 0.012243128381669521, 0.011227086186408997, 0.0096298316493630409, 0.01424979604780674, 0.015631314367055893, 0.013011694885790348, 0.013374975882470608, 0.0088301040232181549, 0.011842436157166958, 0.010895744897425175, 0.010650262236595154, 0.0106862997636199, 0.013863293454051018, 0.014356779865920544, 0.015200057998299599, 0.0095827216282486916, 0.011229177005589008, 0.0091516086831688881, 0.0099162450060248375, 0.015368856489658356, 0.010837417095899582, 0.011917570605874062, 0.011527988128364086, } };
const TfArray<102, int> quant55_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(16) int32_t tensor_data56[102] = { -12516, -3427, 23467, 26921, 18106, 11316, 19056, -7729, 23978, -12518, 9240, -2647, -3656, 10832, 6667, 11940, -8923, 11620, 7291, 26411, 9805, 12967, -3671, 13360, -8030, 13456, 11896, 14193, 29804, 7107, 16982, -5435, 17772, 32259, 21428, -5489, 16417, 4012, 3399, 8243, 19703, 1725, -2986, 17939, -4846, -17637, 10430, 20216, 1694, 38655, 13983, 1902, 16471, -28882, 19669, 2341, 12971, 12374, 8635, 13452, 4421, 11180, 30816, 26320, 13885, 6368, 5231, 4363, 12344, -6658, 26937, -3859, 13299, -16417, -7693, 26879, 32965, 28102, 25969, 31626, 10883, -15353, -6491, -78, 4718, 28431, 13123, 2027, 51290, -11843, -11817, 18831, 558, 21018, 21998, 12097, -17300, 13605, 9362, 6427, 20603, 18764, };
const TfArray<1, int> tensor_dimension56 = { 1, { 102 } };
const TfArray<102, float> quant56_scale = { 102, { 0.0002309467236045748, 0.00018360621470492333, 0.00018329780141357332, 0.00016383215552195907, 0.000245098170125857, 0.00016184177366085351, 0.00019718910334631801, 0.00017336809833068401, 0.00016026922094170004, 0.00017123665020335466, 0.00024774021585471928, 0.00025055196601897478, 0.00017778632172849029, 0.00015526778588537127, 0.00017072276386898011, 0.00023277674335986376, 0.00017597165424376726, 0.00024268205743283033, 0.00020963785937055945, 0.00013672724890056998, 0.00014248215302359313, 0.00023852578306104988, 0.00024566706269979477, 0.00048743103980086744, 0.00019768365018535405, 0.00017145065066870302, 0.00026262583560310304, 0.00032481941161677241, 0.00015273607277777046, 0.00018285274563822895, 0.00014422557433135808, 0.00020480340754147619, 0.00022153892496135086, 0.00019037154561374336, 0.00019960335339419544, 0.00020777604368049651, 0.00020515915821306407, 0.00015592190902680159, 0.00026413836167193949, 0.00016739462444093078, 0.00020436395425349474, 0.00014693703269585967, 0.00020979577675461769, 0.00021847226889804006, 0.00015102334145922214, 0.00017687083163764328, 0.00020496829529292881, 0.00019291258649900556, 0.00021419783297460526, 0.00020694739941973239, 0.00020987931929994375, 0.00027776916977018118, 0.00019305212481413037, 0.00017289906099904329, 0.00028894480783492327, 0.00023733639682177454, 0.00035066748387180269, 0.0002422730321995914, 0.00021055636170785874, 0.00021215197921264917, 0.00018570038082543761, 0.00030529979267157614, 0.00011510091280797496, 0.00015828254981897771, 0.000248650525463745, 0.0002401978854322806, 0.00018198331235907972, 0.00019483908545225859, 0.00023010499717202038, 0.00022347978665493429, 0.00027144420892000198, 0.00018689860007725656, 0.00026230164803564548, 0.00021532979735638946, 0.00015543418703600764, 0.00016860286996234208, 0.00015233951853588223, 0.00011580437421798706, 0.00020992211648263037, 0.00022652538609690964, 0.00020772631978616118, 0.00017817351908888668, 0.0002636532299220562, 0.00028921442572027445, 0.00024074559041764587, 0.00024746710550971329, 0.00016337676788680255, 0.0002191116800531745, 0.00020159575797151774, 0.00019705378508660942, 0.00019772055384237319, 0.00025650206953287125, 0.00026563266874291003, 0.00028123523225076497, 0.00017730187391862273, 0.00020776499877683818, 0.00016932531434576958, 0.00018347281729802489, 0.00028435836429707706, 0.0002005165588343516, 0.00022050182451494038, 0.00021329367882572114, } };
const TfArray<102, int> quant56_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(16) int8_t tensor_data57[4*102] = { 
  -77, 49, 120, -78, -87, -41, -107, 4, -107, 6, -65, 13, 74, -88, 109, 3, 71, -101, 112, -102, 3, 42, -28, 37, -62, 74, 62, 99, -73, -79, -4, 103, 48, -7, 112, -50, 81, 45, 81, -103, -27, -103, -51, -60, 29, -71, 42, 110, 95, -102, 2, 4, 65, 63, -107, -7, 20, 33, -103, -112, 102, -9, -71, -83, 6, -42, 34, 51, 84, 6, -116, -22, 91, 6, 100, 88, -72, 82, 79, -83, -126, 59, 46, -14, 100, 112, -81, 31, -104, -3, -86, 16, -52, -29, -85, -101, 98, 49, -109, -33, -94, -84, 
  -120, 17, 26, 87, -37, 52, 15, -76, -75, 44, -90, 83, 96, 48, 101, -78, -30, -94, 85, -23, -118, -121, 0, 33, 109, 94, 102, -22, 30, 63, -23, 36, -103, -81, -43, -60, 93, 43, -94, 5, 25, 105, -83, -10, -62, 27, -107, -14, -89, 46, -38, 63, 46, -18, 88, 58, 17, -127, 78, -19, 7, 78, -114, 43, 68, -82, 7, -96, -62, 90, 100, 29, -96, 72, 10, -35, -24, -52, -92, -2, 39, 66, -105, 41, -115, -71, 52, -107, -109, -20, 5, 65, 76, 0, 94, -16, -114, 25, -72, 62, 3, -38, 
  91, 71, -32, 28, -58, -24, 114, -69, 103, 65, -55, 89, 89, 122, -75, 29, -61, -17, 41, 103, -98, -107, 83, -109, 71, -33, -43, 101, -53, 66, -94, -35, 88, 53, -3, -48, -121, 51, 92, -51, 6, 89, -37, -112, 15, 109, 79, 36, 99, 95, 88, 17, -123, 46, -9, -104, -66, -22, 99, -22, -76, -56, -116, -7, -65, -121, -23, -111, 110, -68, -74, 76, -109, 56, 47, -60, -106, -24, -103, -36, 105, -111, 58, -58, 50, 71, 10, 33, -97, 95, -4, 27, 10, -116, 25, 55, -108, -64, -81, -89, -12, 15, 
  -72, -3, 72, -82, -62, -53, -32, -9, 126, 31, 90, 23, 62, -22, -121, 0, -33, 33, -19, 104, -82, 79, -24, 100, 104, 98, 12, 10, -96, -58, -17, -61, -105, 11, -78, -16, -93, 65, -107, -68, -67, -17, 20, 57, -19, -85, -79, 45, 7, -91, 43, -88, 55, 92, 22, 95, 112, -72, 110, 53, -114, -49, -93, 0, -68, 64, 85, -35, 95, 81, 45, 7, -98, 6, 110, -69, -63, 46, -7, 24, 76, -73, -21, -12, -20, 90, -103, 95, 34, -40, -73, 98, 104, 91, -81, -111, 34, 86, -42, -37, -28, 49, 
};
const TfArray<2, int> tensor_dimension57 = { 2, { 4,102 } };
const TfArray<1, float> quant57_scale = { 1, { 0.0020401065703481436, } };
const TfArray<1, int> quant57_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int32_t tensor_data58[4] = { 109, -170, -159, 227, };
const TfArray<1, int> tensor_dimension58 = { 1, { 4 } };
const TfArray<1, float> quant58_scale = { 1, { 4.4694708776660264e-05, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant59_scale = { 1, { 0.018275562673807144, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,48,48,6 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,49,49,6 } };
const TfArray<1, float> quant62_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,24,24,6 } };
const TfArray<1, float> quant63_scale = { 1, { 0.021993516013026237, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant66_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,25,25,12 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.016411587595939636, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant70_scale = { 1, { 0.020257517695426941, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,13,13,25 } };
const TfArray<1, float> quant72_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,6,6,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.015618683770298958, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant74_scale = { 1, { 0.018717879429459572, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant75_scale = { 1, { 0.019699383527040482, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant76_scale = { 1, { 0.015303594060242176, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant77_scale = { 1, { 0.017572950571775436, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.020187515765428543, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.018882360309362411, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.016808142885565758, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.017275512218475342, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.01541395578533411, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.016740139573812485, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.015643153339624405, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,7,7,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.015643153339624405, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,3,3,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.016674542799592018, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant87_scale = { 1, { 0.016419271007180214, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant88_scale = { 1, { 0.018502246588468552, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant89_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,1,1,102 } };
const TfArray<1, float> quant90_scale = { 1, { 0.021908026188611984, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<2, int> tensor_dimension91 = { 2, { 1,4 } };
const TfArray<1, float> quant91_scale = { 1, { 0.098514534533023834, } };
const TfArray<1, int> quant91_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<2, int> tensor_dimension92 = { 2, { 1,4 } };
const TfArray<1, float> quant92_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,3,4 } };
const TfArray<1, int> outputs0 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 59,5,6 } };
const TfArray<1, int> outputs1 = { 1, { 60 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 60,7,8 } };
const TfArray<1, int> outputs2 = { 1, { 61 } };
const TfArray<2, int> inputs3 = { 2, { 61,1 } };
const TfArray<1, int> outputs3 = { 1, { 62 } };
const TfLiteDepthwiseConvParams opdata4 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 62,9,10 } };
const TfArray<1, int> outputs4 = { 1, { 63 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 63,11,12 } };
const TfArray<1, int> outputs5 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 64,13,14 } };
const TfArray<1, int> outputs6 = { 1, { 65 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 65,15,16 } };
const TfArray<1, int> outputs7 = { 1, { 66 } };
const TfArray<2, int> inputs8 = { 2, { 66,1 } };
const TfArray<1, int> outputs8 = { 1, { 67 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 67,17,18 } };
const TfArray<1, int> outputs9 = { 1, { 68 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 68,19,20 } };
const TfArray<1, int> outputs10 = { 1, { 69 } };
const TfLiteDepthwiseConvParams opdata11 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 69,21,22 } };
const TfArray<1, int> outputs11 = { 1, { 70 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 70,23,24 } };
const TfArray<1, int> outputs12 = { 1, { 71 } };
const TfArray<2, int> inputs13 = { 2, { 71,1 } };
const TfArray<1, int> outputs13 = { 1, { 72 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 72,25,26 } };
const TfArray<1, int> outputs14 = { 1, { 73 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 73,27,28 } };
const TfArray<1, int> outputs15 = { 1, { 74 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 74,29,30 } };
const TfArray<1, int> outputs16 = { 1, { 75 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 75,31,32 } };
const TfArray<1, int> outputs17 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 76,33,34 } };
const TfArray<1, int> outputs18 = { 1, { 77 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 77,35,36 } };
const TfArray<1, int> outputs19 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 78,37,38 } };
const TfArray<1, int> outputs20 = { 1, { 79 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 79,39,40 } };
const TfArray<1, int> outputs21 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 80,41,42 } };
const TfArray<1, int> outputs22 = { 1, { 81 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 81,43,44 } };
const TfArray<1, int> outputs23 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata24 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 82,45,46 } };
const TfArray<1, int> outputs24 = { 1, { 83 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 83,47,48 } };
const TfArray<1, int> outputs25 = { 1, { 84 } };
const TfArray<2, int> inputs26 = { 2, { 84,1 } };
const TfArray<1, int> outputs26 = { 1, { 85 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 85,49,50 } };
const TfArray<1, int> outputs27 = { 1, { 86 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 86,51,52 } };
const TfArray<1, int> outputs28 = { 1, { 87 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 87,53,54 } };
const TfArray<1, int> outputs29 = { 1, { 88 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 88,55,56 } };
const TfArray<1, int> outputs30 = { 1, { 89 } };
const ALIGN(1) uint8_t opdata31[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs31 = { 2, { 89,2 } };
const TfArray<1, int> outputs31 = { 1, { 90 } };
const TfLiteFullyConnectedParams opdata32 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs32 = { 3, { 90,57,58 } };
const TfArray<1, int> outputs32 = { 1, { 91 } };
const TfLiteSoftmaxParams opdata33 = { 1 };
const TfArray<1, int> inputs33 = { 1, { 91 } };
const TfArray<1, int> outputs33 = { 1, { 92 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 81, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension59, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14416, (TfLiteIntArray*)&tensor_dimension61, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 14406, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14416, (TfLiteIntArray*)&tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7504, (TfLiteIntArray*)&tensor_dimension66, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 7500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7504, (TfLiteIntArray*)&tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3600, (TfLiteIntArray*)&tensor_dimension69, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension71, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension72, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4240, (TfLiteIntArray*)&tensor_dimension73, 900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension74, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension75, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension76, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension77, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension78, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension79, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension80, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension81, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension82, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension83, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2512, (TfLiteIntArray*)&tensor_dimension84, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension85, 2499, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3696, (TfLiteIntArray*)&tensor_dimension86, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2768, (TfLiteIntArray*)&tensor_dimension87, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1840, (TfLiteIntArray*)&tensor_dimension88, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension89, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1344, (TfLiteIntArray*)&tensor_dimension90, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension91, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension92, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_MEAN, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 93;
  for (size_t i = 0; i < 93; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 34; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 34; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  92, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 34; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
